/*TC 160 COVID 19 REPORT - ACCOUNT LEVEL*/
/*For external release:

**Any Client/Accounts with PHI = N must have at least 50 Subscribers and 200 Members at the level 
you are reporting (standard small numbers thresholds)

**Client/Accounts with PHI = Y and ASO have access to full reporting as usual

**Client/Accounts with PHI = Y and Non ASO must also have thresholds met in the following categories 
in order to get member counts or member level detailed reporting at the level you are reporting, even de-identified. 
No reporting may be released externally that would provide information showing that there are less than 25 members tested 
or diagnosed on the account. The TC 160 will display a masked number “Less than X” for the specific category if 
the threshold is not met.
-	
-	COVID 19 testing:   25 members
-	COVID 19 diagnosed: 25 members
-	COVID 19 admits     5 members
-	Relationships:      5 members in each grouping


**Accounts that do not meet the thresholds mentioned above CANNOT have any COVID 19 related data shared EXTERNALLY. 
Data obtained from this report MAY NOT be released externally as this is considered SENSITIVE data.

***If a detail is being requested and the report is for external use, the requester will need to provide detail as to why the 
information is being requested AND will be required to sign the COVID Compliance document -- As per DG

/*USER INPUT STARTS HERE*/

%let tso_id = ; /*USER ID*/

%let email_address = ; /*USER EMAIL ADDRESS*/

%let acct_num = (''); /*ACCOUNT NUMBER -- IF THIS IS A FACETS ACCOUNT, EXCLUDE ONE OF THE PRECEEDING ZEROS*/

%let client_nm = ; /*ACCOUNT NAME*/

%let proj_id = ; /*ALPHA-NUMERIC PROJECT NUMBER*/

%let Q_curr_pd_beg_yrmo  = 202101; /*PD START DATE - FORMAT YYYYMM*/

%let Q_curr_pd_end_yrmo  = 202112; /*PD END DATE - FORMAT YYYYMM*/

%let brnch_cd_used = N; /*LIMITING BY BRANCH CODE*/

%let brnch_cd = midsu_brnch_cd /*not*/ in (''); /*BRANCH CODES BEING USED OR NOT BEING USED*/

%let ben_plan_used = N; /*LIMITING BY BENEFIT PLAN CDS*/

%let ben_plan_cd = ben_plan_cd /*not*/ in (''); /*BEN PLAN CODES BEING USED/NOT BEING USED*/

%let ASO = Y; 

%let include_detail = N; /*INCLUDE COVID DETAIL BREAKDOWN*/

%let vaccine_detail = N; /*INCLUDE VACCINE INFO ON DETAIL*/

%let include_phi_on_detail = Y; /*INCLUDE OR EXCLUDE PHI ON DETAIL*/

%let intended_use = Internal; /*INTERNAL OR EXTERNAL*/

%let external_recipient = INTERNAL USE;/*LEAVE AS INTERNAL USE OR CHANGE TO RECEIVER'S NAME*/

/***************************************************************************
/**************************************************************************/
/*NO CHANGES BELOW THIS LINE***********************************************/
/**************************************************************************/
%put &email_address;
%put &acct_num;
%let client_where = midsu_acct_num in &acct_num;
%put &client_where;
%put &Q_curr_pd_beg_yrmo;
%put &Q_curr_pd_end_yrmo;
%put &proj_id;
%put &brnch_cd;
%put &brnch_cd_used;
%put &aso;
%put &include_detail;
%put &vaccine_detail;
%put &include_phi_on_detail;
%put &intended_use;
%put &ben_plan_used;
%put &ben_plan_cd;
%put &external_recipient;

data _null_;
	Months=intck('MONTH',input("&Q_curr_pd_beg_yrmo.01",yymmdd8.),input("&Q_curr_pd_end_yrmo.01",yymmdd8.));
	Months=Months+1;
	call symputx('curr_months_in_period_cnt',Months);
run;

%GET_DB2_DATABASE;
%SERVER(server=CRDM, userid=&sysuserid); 
libname CRDM db2 dsn=&crdm_database schema=APPDM  uid=&user pwd=&pwd  dbindex=no sql_functions=all;

%let TABLE_PREFIX=;
PROC SQL;
	SELECT 'fa_' into:table_prefix 
	FROM CRDM.fa_client_struc
	where &client_where
	;
quit;
%put table_prefix=&table_prefix.;

%LET authenticate = crdm2; 
%LET server_name = pluto;
%remote(remote=&server_name, userid=&sysuserid, prompt=n);

RSUBMIT &server_name;
LIBNAME cr_ref     "/projects/cr_data/reference";                                                                                         
ENDRSUBMIT;

%let client_where_mod = &client_where;
%put client_where_mod = ;
%put CLIENT_NM = &CLIENT_NM;

%include "/projects/hda/tc_reports/macros/TC_160/external_reporting.sas";

%SERVER(server=CRDM, userid=&sysuserid);
%include "/projects/hda/tc_reports/macros/TC_160/&table_prefix.cp_struc_mp.sas";
%include "/projects/hda/tc_reports/macros/TC_160/cp_e_claim_cap_wbc.sas";
%include "/projects/hda/tc_reports/macros/TC_160/cp_e_struc_mbr_agg.sas";
%include "/projects/hda/tc_reports/macros/TC_160/cp_e_admission.sas";
%include "/projects/hda/tc_reports/macros/TC_160/cp_ov.sas";
%include "/projects/hda/tc_reports/macros/TC_160/cp_op.sas";
%include "/projects/hda/tc_reports/macros/TC_160/cp_pro_detail.sas";
%include "/projects/hda/tc_reports/macros/TC_160/cp_ip.sas";
%include "/projects/hda/tc_reports/macros/TC_160/cp_financial.sas";
%include "/projects/hda/tc_reports/macros/TC_160/cp_demographics.sas";
%include "/projects/hda/tc_reports/macros/TC_160/metrics_acct_lvl.sas";
%include "/projects/hda/tc_reports/macros/TC_160/report_acct_lvl.sas";
***************************************************************************************************************************************************
proc format;
   value smlnuma 

%if (&ASO) = N AND (&intended_use) = External %then %do;   
	-1<-24='Less than 25'
%end; 
	other=[comma12.]
	;
run;

proc format;
   value smlnumc 

%if (&ASO) = N AND (&intended_use) = External %then %do;   
	-1<-4='Less than 5' 
%end;
	other=[comma12.]
	;
run;

proc format;
   value smlnumb 

%if (&ASO) = N AND (&intended_use) = External %then %do;   
	0<-4='Less than 5' 
%end;
	other=[comma12.]
	;
run;

proc format;
   value smlnumd 

%if (&ASO) = N AND (&intended_use) = External %then %do;   
	0<-9='Less than 10' 
%end;
	other=[comma12.]
	;
run;
***************************************************************************************************************************************************
/*************************************************************************************
*                                                                                    *
* MACRO: FA_CP_STRUC_MP.SAS                                                          *
*                                                                                    *
* PURPOSE:  Builds structure remap table and inserts into DB2                        *
*                                                                                    *
* UPDATES:                                                     DEVELOPER:            *
*                                                                                    *
*************************************************************************************/


 /***********************************************************************************
 *                                                                                  *
 * Get Utilization Structure from FA_Mbr_Profile                                    *
 *                                                                                  *
 ***********************************************************************************/

  PROC SQL;
   CONNECT to db2 (db=&crdm_database uid=&user pwd=&pwd);
   create table work.fa_cp_struc_mp_raw as
   select *
   from connection to db2
   (
   WITH struc_mbr_RECURSIVE_SQL as
    (

     select a.rptng_chnl_cd,
            a.rptng_prodt_categ_cd,
            a.mbr_num,
            a.cust_struc_key,
            a.mbr_mth_yr_mth as svc_yr_mth,

            CASE when a.mbr_mth_yr_mth != ''
                 then date(      substr(a.mbr_mth_yr_mth, 1,4) || '-' || substr(a.mbr_mth_yr_mth, 5,2) || '-01' )  +1 month -
                      day ( date(substr(a.mbr_mth_yr_mth, 1,4) || '-' || substr(a.mbr_mth_yr_mth, 5,2) || '-01' )) day
            END as svc_date,
            a.midsu_client_id,
            a.midsu_src_sys_cd,
            a.midsu_acct_num,
            a.midsu_brnch_cd,
            a.ben_plan_cd,
            a.acct_subty2,
            a.sex_cd,
            a.mbr_age,
            a.membr_relshp_cd,
            a.mmm_ben_pln_cd,
            a.pharm_elgbl_ind,
            a.midsu_base_nt_id,
            a.base_hmo_cd,
            a.rpt_subscrbr_num,
            a.mmos    as mmos,
            a.submmos as submmos

     from
     (
      select rptng_chnl_cd,
             rptng_prodt_categ_cd,

             mbr_num,
             -9 as membr_key,
             -9 as cust_struc_key,
             mbr_mth_yr_mth,
             midsu_client_id,
             midsu_acct_num,
             midsu_brnch_cd,
             ben_plan_cd,
             midsu_src_sys_cd,
             acct_subty2,
             mmm_ben_pln_cd,
             midsu_base_nt_id,
             base_hmo_cd,


             CASE when  gender_cd='M' then 'M'
                  else 'F'
             END as sex_cd,

             age as mbr_age,
             membr_relshp_cd,
             phrm_elgbl_ind as pharm_elgbl_ind,
             subscrbr_num   as rpt_subscrbr_num,
             mmos,

             CASE when membr_relshp_cd = 'EE' then mmos
                  else 0
             END as submmos

      from   appdm.fa_mbr_profile
     where   &client_where. and mbr_mth_yr_mth <= &Q_curr_pd_end_yrmo.
             and
             rptng_prodt_categ_cd not in ('DEN','DPPO','DIND','DHMO')

     ) a


    )

     /*** Final Select using Recursive SQL ***/

    select a.rptng_chnl_cd ,
           a.rptng_prodt_categ_cd,
           a.mbr_num,
           a.svc_yr_mth,
           a.svc_date,
           ab.age_band_cd,
           a.sex_cd,
           a.mbr_age,
           a.membr_relshp_cd,
           a.mmm_ben_pln_cd,
           a.pharm_elgbl_ind,
           a.midsu_base_nt_id,
           a.base_hmo_cd,
           a.acct_subty2,
           a.rpt_subscrbr_num,
           sum(a.mmos)                          as mmos,
           sum(a.submmos)                       as submmos

  from     struc_mbr_RECURSIVE_SQL           a

           LEFT JOIN

           appdm.age_band                    ab

    on     a.mbr_age = ab.age_amt

    group  by
           a.rptng_chnl_cd ,
           a.rptng_prodt_categ_cd,
           a.mbr_num,
           a.svc_yr_mth,
           a.svc_date,
           ab.age_band_cd,
           a.sex_cd,
           a.mbr_age,
           a.membr_relshp_cd,
           a.mmm_ben_pln_cd,
           a.pharm_elgbl_ind,
           a.midsu_base_nt_id,
           a.base_hmo_cd,
           a.acct_subty2,
           a.rpt_subscrbr_num

   ) innerSQL

   order  by mbr_num, svc_yr_mth, mmos desc
   ;
   DISCONNECT from db2;
  QUIT;


proc sort data=fa_cp_struc_mp_raw(where=(rptng_prodt_categ_cd ^='')) out=fa_cp_struc_mp_raw nodupkey;
by mbr_num svc_yr_mth rptng_prodt_categ_cd;
run;
*********************************************************************************************************
/*************************************************************************************
*                                                                                    *
* MACRO: CP_STRUC_MP.SAS                                                             *
*                                                                                    *
* PURPOSE:  Builds structure remap table and inserts into DB2                        *
*                                                                                    *
* UPDATES:                                                     DEVELOPER:            *
*                                                                                    *
*************************************************************************************/

/*************************************************************************************
*                                                                                    *
* Define CP_STRUC_MP Routine                                                         *
*                                                                                    *
*************************************************************************************/
/***********************************************************************************
*                                                                                  *
* Get Utilization Structure from Struc_Mbr_Agg and Struc_Mbr_Profile               *
*                                                                                  *
***********************************************************************************/

PROC SQL;
CONNECT to db2 (db=&crdm_database uid=&user pwd=&pwd);
create table work.cp_struc_mp_raw as
select * from connection to db2

(

select rptng_chnl_cd ,
		 rptng_prodt_categ_cd,
		 mbr_num,
		 svc_yr_mth,

		 CASE when svc_yr_mth != ''
			  then date(      substr(svc_yr_mth, 1,4) || '-' || substr(svc_yr_mth, 5,2) || '-01' )  +1 month -
				   day ( date(substr(svc_yr_mth, 1,4) || '-' || substr(svc_yr_mth, 5,2) || '-01' )) day
		 END as svc_date,

		 midsu_client_id,
		 midsu_src_sys_cd,
		 midsu_acct_num,
		 midsu_brnch_cd,
		 ben_plan_cd,
		 acct_subty2,
		 age_band_cd,
		 sex_cd,
		 mbr_age,
		 membr_relshp_cd,
		 mmm_ben_pln_cd,
		 pharm_elgbl_ind,
		 midsu_base_nt_id,
		 base_hmo_cd,
		 rpt_subscrbr_num,
		 sum(mmos)              as mmos,
		 sum(submmos)           as submmos

		 /********************************************************************************************
		 *                                                                                           *
		 * Create Member Counts                                                                      *
		 *                                                                                           *
		 * We need Member Month and Subscriber Month Counts in order to do Mbr_Elig_Type and         *
		 * Sub_Elig_Type in the mbr_elig_type_RECURSIVE_SQL                                          *
		 *                                                                                           *
		 ********************************************************************************************/

  from   appdm.struc_mbr_attribute
  where  &client_where. and svc_yr_mth <= &Q_curr_pd_end_yrmo.
  group  by

		 rptng_chnl_cd ,
		 rptng_prodt_categ_cd,
		 mbr_num,
		 svc_yr_mth,

		 CASE when svc_yr_mth != ''
			  then date(      substr(svc_yr_mth, 1,4) || '-' || substr(svc_yr_mth, 5,2) || '-01' )  +1 month -
				   day ( date(substr(svc_yr_mth, 1,4) || '-' || substr(svc_yr_mth, 5,2) || '-01' )) day
			 END,

		 midsu_client_id,
		 midsu_src_sys_cd,
		 midsu_acct_num,
		 midsu_brnch_cd,
		 ben_plan_cd,
		 acct_subty2,
		 age_band_cd,
		 sex_cd,
		 mbr_age,
		 membr_relshp_cd,
		 mmm_ben_pln_cd,
		 pharm_elgbl_ind,
		 midsu_base_nt_id,
		 base_hmo_cd,
		 rpt_subscrbr_num

) innerSQL

;
DISCONNECT from db2;
QUIT;

proc sort data=cp_struc_mp_raw(where=(rptng_prodt_categ_cd ^='')) out=cp_struc_mp_raw nodupkey;
by mbr_num svc_yr_mth rptng_prodt_categ_cd;
run;
/****************************************************************************************************************************************
%MACRO CP_E_CLAIM_CAP_WBC;
/***********************MEDICAL COVID-19*************************************************/
	PROC SQL;
		CONNECT to db2 (db=&crdm_database uid=&user pwd=&pwd);
		create table work.cp_e_claim as
			select *
				from   connection to db2
					(
					/********************************************************************************************
					*                                                                                           *
					* Define Claim Recursive SQL                                                                *
					*   Need one row per member per norm request period                                         *
					*                                                                                           *
					********************************************************************************************/
					With claim_RECURSIVE_SQL as
					(
				select
					midsu_client_id,
					midsu_src_sys_cd,
					midsu_acct_num,
					midsu_brnch_cd,
					MEMBR_RELSHP_CD,
					SEX_CD,
					ben_plan_cd,
					acct_subty2,
					base_prodt_cd,
					midsu_base_nt_id,
					base_hmo_cd,
					nt_id,
					hmo_cd,
					mbr_num,
					clm_num,
					a.claim_id,
					a.ln_num,
					orig_mbr_num,
					SUBSCRBR_STE_CD,
					subscrbr_emp_id,
					msc_major_categ,
					pro_exclude_ind,
				case 
					when msc_major_categ = '01' then '01'
					when msc_major_categ = '02' then '02'
					when msc_major_categ = '04' then '04'
					else '03'
				end 
			as msc_major_grp,
				msc_minor_categ,
				msc_subminor_categ,
				nt_clm_cd,
			CASE 
				when nt_clm_cd = 'O' then 'N' 
				else 'Y'
			END 
		as in_network_ind,
			maj_diag_categ,
			min_diag_categ,
			diag_cd1,
			diag_cd2,
			diag_cd3,
			case_id,
			confmt_ind,
			hcfa_svc_loc_cd,
			icd_maj_grp_cd,
			icd_minr_grp_cd,
			medcr_ind,
			midsu_clm_sys_cd,
			midsu_proc_mdfr_cd,
			partcptg_ind,
			a.proc_cd,
			a.proc_ty,
			clp.proc_cd as proc_cd2,
			clp.proc_ty as proc_ty2,
			regn_cd,
			rc_amt,
			risk_shr_logic_ind,
			rmk_cd,
			rsn_not_covrd_cd,
			sav_rsn_cd,
			src_sys_prov_id,
			provider_zip_cd,
			subscrbr_zip_cd,
			svc_prov_spec_cd,
			svc_prov_tax_id,
			svc_prov_ty,
			ccn_provider_ind,
			ccn_spec_cd,
			ccn_min_distance,
			msc_subminor2_cat,
			svc_prov_def_subty,
			svc_ty,
			svc_dt,
		case 
			when (diag_cd1 in ('B9729','U071')) then 'Y'
			when (diag_cd2 in ('B9729','U071')) then 'Y'
			when (diag_cd3 in ('B9729','U071')) then 'Y'
			else 'N'
		end 
	as Diagnosis_IND,
		case 
			when (diag_cd1 in ('B9729','U071') and (midsu_proc_mdfr_cd in ('GT','GQ','95') OR a.proc_cd between '99201' and '99499' OR clp.proc_cd between '99201' and '99499')) then 'Y'
			when (diag_cd2 in ('B9729','U071') and (midsu_proc_mdfr_cd in ('GT','GQ','95') OR a.proc_cd between '99201' and '99499' OR clp.proc_cd between '99201' and '99499')) then 'Y'
			when (diag_cd3 in ('B9729','U071') and (midsu_proc_mdfr_cd in ('GT','GQ','95') OR a.proc_cd between '99201' and '99499' OR clp.proc_cd between '99201' and '99499')) then 'Y'
			else 'N'
		end 
	as Treatment_IND,
		case 
			when (a.proc_cd in ('U0001','U0002','U0003','U0004','U0005','87635','87426','0202U','0223U','0224U','86328','86769','G2023','G2024','0225U','86408','86409','C9803','0240U','0241U','86413','87428','87636','87637','87811')) then 'Y'
			when (clp.proc_cd in ('U0001','U0002','U0003','U0004','U0005','87635','87426','0202U','0223U','0224U','86328','86769','G2023','G2024','0225U','86408','86409','C9803','0240U','0241U','86413','87428','87636','87637','87811')) then 'Y'
			else 'N'
		end 
	as Testing_IND,
		case 
			when (diag_cd1 in ('B9729','U071') and (a.proc_cd in ('G2012') or midsu_proc_mdfr_cd in ('GT','GQ','95'))) then 'Y'
			when (diag_cd2 in ('B9729','U071') and (a.proc_cd in ('G2012') or midsu_proc_mdfr_cd in ('GT','GQ','95'))) then 'Y'
			when (diag_cd3 in ('B9729','U071') and (a.proc_cd in ('G2012') or midsu_proc_mdfr_cd in ('GT','GQ','95'))) then 'Y'
			else 'N'
		end 
	as Virtual_IND,
		case
			when (a.proc_cd in ('0071A','0072A','91300','91301','91302','91303','0021A','0022A','0031A','0001A','0002A','0011A','0012A','0003A','0004A','0013A','0034A','0053A','0054A','91306','0064A')) then 'Y'
			when (clp.proc_cd in ('0071A','0072A','91300','91301','91302','91303','0021A','0022A','0031A','0001A','0002A','0011A','0012A','0003A','0004A','0013A','0034A','0053A','0054A','91306','0064A'))then 'Y'
			else 'N'
		end
	as Vaccinated_IND,
		case 
			when (a.proc_cd in ('U0001','U0002','U0003','U0004','U0005','87635','87426','0202U','0223U','0224U','86328',
			                    '86769','G2023','G2024','0225U','86408','86409','C9803','0240U','0241U','86413','87428','87636','87637','87811') and (a.svc_prov_tax_id in ('001234567') or a.src_sys_prov_id in ('4049274'))) then 'Y'
			when (clp.proc_cd in ('U0001','U0002','U0003','U0004','U0005','87635','87426','0202U','0223U','0224U','86328',
			                      '86769','G2023','G2024','0225U','86408','86409','C9803','0240U','0241U','86413','87428','87636','87637','87811') and (a.svc_prov_tax_id in ('001234567') or a.src_sys_prov_id in ('4049274'))) then 'Y'
			else 'N'
		end 
	as OTC_Testing_IND,
		case 
			when svc_dt='12-31-9999' then '12-31-9999'
			else(svc_dt +1 month -day(svc_dt + 1 month) day)
		end 
	as svc_date,
		svc_dt_yr_mth,
		pd_dt,
	case 
		when pd_dt='12-31-9999' then '12-31-9999'
		else (pd_dt +1 month -day(pd_dt + 1 month) day)
	end 
as pd_date,
	gl_postg_pd_yr_mth,
	icd_revsn_num ,
	sum(unit_qty)                       as unit_qty        ,
	sum(fund_amt)                       as fund_amt        ,
	sum(pay_amt)                        as pay_amt         ,
	sum(pay_amt + fund_amt)             as ccf_pay_amt     ,
	sum(copay_amt)                      as copay_amt       ,
	sum(deduct_amt)                     as deduct_amt      ,
	sum(coins_amt)                      as coins_amt       ,
	sum(cost_shr_amt)                   as cost_shr_amt    ,
	sum(cost_shr_amt - fund_amt)        as ccf_cost_shr_amt,
	sum(cost_shr_amt + pay_amt)         as plan_amt        ,
	sum(cob_sav_amt)                    as cob_sav_amt     ,
	sum(elgbl_chrg_amt)                 as elgbl_chrg_amt  ,
	sum(non_covrd_amt)                  as non_covrd_amt   ,
	sum(disct_amt)                      as disct_amt       ,
	sum(chrg_amt)                       as chrg_amt        ,
	sum(svc_unit_cnt)                   as svc_unit_cnt    ,
	sum(fee_sched_sav_amt)              as fee_sched_sav_amt,
	sum
(CASE 
	when risk_shr_logic_ind = 'Y' then pay_amt 
	else 0 
END)
as risk_shr_pay_amt,
CASE  
	when sav_rsn_cd ^= 'RC'   then sum(cntrct_sav_amt)
	else 0
END                                 
as cntrct_sav_amt  ,
CASE  
	when sav_rsn_cd ^= 'RC'   then sum(elgbl_chrg_amt + cntrct_sav_amt)
	else sum(elgbl_chrg_amt)
END                                 
as consdr_chrg_amt
from   appdm.&table_prefix.claim a
	LEFT JOIN
		(
	select claim_id,
		ln_num,
		proc_cd,
		proc_ty
	from   appdm.&table_prefix.claim_ln_procedure
		where  &client_where_mod
		and  proc_cd in ('U0001','U0002','U0003','U0004','U0005','87635','87426','0202U','0223U','0224U','86328','86769','G2023','G2024','0225U','86408','86409','C9803','0240U','0241U','86413','87428','87636','87637','87811','91300','91301','91302','0021A','0022A','91303','0031A','0001A','0002A','0011A','0012A', '0071A', '0072A','0003A','0004A','0013A','0034A','0053A','0054A','91306','0064A')
              OR proc_cd between '99201' and '99499'
					) clp
						on a.claim_id=clp.claim_id and
						a.ln_num = clp.ln_num
					LEFT JOIN

                    appdm.&table_prefix.er_claim_proc_detail_agg  c

                    on     a.claim_id=c.claim_id and a.ln_num = c.ln_num

					where &client_where                                                                 and
						gl_postg_pd_yr_mth   between &Q_curr_pd_beg_yrmo. and &Q_curr_pd_end_yrmo.  
		and encntr_ind           ^= 'Y'  
		%IF %UPCASE (&ben_plan_used) = Y %THEN %DO;
		and &ben_plan_cd
		%END;
		and msc_major_categ      ^= '09'
		%IF %UPCASE (&brnch_cd_used) = Y %THEN %DO;
		and &brnch_cd
	    %END;

		and
		(
		a.proc_cd in ('U0001','U0002','U0003','U0004','U0005','87635','87426','0202U','0223U','0224U','86328','86769','G2023','G2024','0225U','86408','86409','91300','91301','91302','0021A','0022A','91303','0031A','0001A','0002A','0011A','0012A','C9803','0240U','0241U','86413','87428','87636','87637','87811','0071A','0072A')
		OR
		clp.proc_cd in ('U0001','U0002','U0003','U0004','U0005','87635','87426','0202U','0223U','0224U','86328','86769','G2023','G2024','0225U','86408','86409','91300','91301','91302','0021A','0022A','91303','0031A','0001A','0002A','0011A','0012A','C9803','0240U','0241U','86413','87428','87636','87637','87811','0071A','0072A')
		or
		diag_cd1 in ('B9729','U071')
		OR                  
		diag_cd2 in ('B9729','U071')
		OR                  
		diag_cd3 in ('B9729','U071')
		OR
		svc_prov_tax_id in ('001234567')
			)
			group  by
				midsu_client_id,
				midsu_src_sys_cd,
				midsu_acct_num,
				midsu_brnch_cd,
				MEMBR_RELSHP_CD,
				SEX_CD,
				ben_plan_cd,
				acct_subty2,
				base_prodt_cd,
				midsu_base_nt_id,
				base_hmo_cd,
				nt_id,
				hmo_cd,
				mbr_num,
				clm_num,
				a.claim_id,
				a.ln_num,
				orig_mbr_num,
				SUBSCRBR_STE_CD,
				subscrbr_emp_id,
				msc_major_categ,
				pro_exclude_ind,
				case 
					when msc_major_categ = '01' then '01'
					when msc_major_categ = '02' then '02'
					when msc_major_categ = '04' then '04'
					else '03' 
					end,
					msc_minor_categ,
					msc_subminor_categ,
					nt_clm_cd,
					case 
						when nt_clm_cd = 'O' then 'N' 
						else 'Y'
						end,
						maj_diag_categ,
						min_diag_categ,
						diag_cd1,
						diag_cd2,
						diag_cd3,
						case_id,
						confmt_ind,
						hcfa_svc_loc_cd,
						icd_maj_grp_cd,
						icd_minr_grp_cd,
						medcr_ind,
						midsu_clm_sys_cd,
						midsu_proc_mdfr_cd,
						partcptg_ind,
						a.proc_cd,
						a.proc_ty,
						clp.proc_cd,
						clp.proc_ty,
						regn_cd,
						rc_amt,
						risk_shr_logic_ind,
						rmk_cd,
						rsn_not_covrd_cd,
						sav_rsn_cd,
						src_sys_prov_id,
						svc_prov_spec_cd,
						svc_prov_tax_id,
						svc_prov_ty,
						ccn_provider_ind,
						ccn_spec_cd,
						ccn_min_distance,
						msc_subminor2_cat,
						svc_prov_def_subty,
						svc_ty,
						svc_dt,
						case 
							when (diag_cd1 in ('B9729','U071')) then 'Y'
							when (diag_cd2 in ('B9729','U071')) then 'Y'
							when (diag_cd3 in ('B9729','U071')) then 'Y'
							else 'N'
							end,
							case 
								when (diag_cd1 in ('B9729','U071') and (midsu_proc_mdfr_cd in ('GT','GQ','95') OR a.proc_cd between '99201' and '99499' OR clp.proc_cd between '99201' and '99499')) then 'Y'
								when (diag_cd2 in ('B9729','U071') and (midsu_proc_mdfr_cd in ('GT','GQ','95') OR a.proc_cd between '99201' and '99499' OR clp.proc_cd between '99201' and '99499')) then 'Y'
								when (diag_cd3 in ('B9729','U071') and (midsu_proc_mdfr_cd in ('GT','GQ','95') OR a.proc_cd between '99201' and '99499' OR clp.proc_cd between '99201' and '99499')) then 'Y'
								else 'N'
								end,
								case 
									when (a.proc_cd in ('U0001','U0002','U0003','U0004','U0005','87635','87426','0202U','0223U','0224U','86328','86769','G2023','G2024','0225U','86408','86409','C9803','0240U','0241U','86413','87428','87636','87637','87811')) then 'Y'
									when (clp.proc_cd in ('U0001','U0002','U0003','U0004','U0005','87635','87426','0202U','0223U','0224U','86328','86769','G2023','G2024','0225U','86408','86409','C9803','0240U','0241U','86413','87428','87636','87637','87811')) then 'Y'
									else 'N'
									end,
									case 
										when (diag_cd1 in ('B9729','U071') and (a.proc_cd in ('G2012') or midsu_proc_mdfr_cd in ('GT','GQ','95'))) then 'Y'
										when (diag_cd2 in ('B9729','U071') and (a.proc_cd in ('G2012') or midsu_proc_mdfr_cd in ('GT','GQ','95'))) then 'Y'
										when (diag_cd3 in ('B9729','U071') and (a.proc_cd in ('G2012') or midsu_proc_mdfr_cd in ('GT','GQ','95'))) then 'Y'
										else 'N'
										end,
										case
										when (a.proc_cd in ('0071A','0072A','91300','91301','91302','0021A','0022A','0031A','91303','0001A','0002A','0011A','0012A')) then 'Y'
										when (clp.proc_cd in ('0071A','0072A','91300','91301','91302','0021A','0022A','91303','0031A','0001A','0002A','0011A','0012A'))then 'Y'
										else 'N'
										end,
										case 
										when (a.proc_cd in ('U0001','U0002','U0003','U0004','U0005','87635','87426','0202U','0223U','0224U','86328','86769','G2023','G2024','0225U','86408','86409','C9803','0240U','0241U','86413','87428','87636','87637','87811') and (a.svc_prov_tax_id in ('001234567') or a.src_sys_prov_id in ('4049274'))) then 'Y'
										when (clp.proc_cd in ('U0001','U0002','U0003','U0004','U0005','87635','87426','0202U','0223U','0224U','86328','86769','G2023','G2024','0225U','86408','86409','C9803','0240U','0241U','86413','87428','87636','87637','87811') and (a.svc_prov_tax_id in ('001234567') or a.src_sys_prov_id in ('4049274'))) then 'Y'
										else 'N'
										end, 
										case 
											when svc_dt='12-31-9999' then '12-31-9999'
											else (svc_dt +1 month -day(svc_dt + 1 month) day)
											end,
											svc_dt_yr_mth,
											pd_dt,
											case 
												when pd_dt='12-31-9999' then '12-31-9999'
												else(pd_dt +1 month -day(pd_dt + 1 month) day)
												end,
												gl_postg_pd_yr_mth,
												provider_zip_cd,
												subscrbr_zip_cd,
												icd_revsn_num
												)
/********************************************************************************************
*                                                                                           *
			* Final Select applying Structure Remap using Recursive SQL                                 *
*                                                                                           *
********************************************************************************************/
		select a.mbr_num,
			a.svc_dt_yr_mth,
			a.MEMBR_RELSHP_CD,	
			a.SEX_CD,
			a.midsu_client_id,
			a.midsu_src_sys_cd,
			a.midsu_acct_num,
			a.midsu_brnch_cd,
			a.ben_plan_cd,
			a.acct_subty2,
			a.base_prodt_cd,
			a.midsu_base_nt_id,
			a.base_hmo_cd,
			nt_id,
			hmo_cd,
			a.clm_num,
			a.claim_id,
			a.ln_num,
			a.SUBSCRBR_STE_CD,
			coalesce(c.er_severity_lvl, -1) as er_severity_lvl,
			orig_mbr_num,
			subscrbr_emp_id,
			msc_major_categ,
			pro_exclude_ind,
			msc_major_grp,
			msc_minor_categ,
			msc_subminor_categ,
			nt_clm_cd,
			in_network_ind,
			maj_diag_categ,
			min_diag_categ,
			diag_cd1,
			diag_cd2,
			diag_cd3,
			case_id,
			confmt_ind,
			hcfa_svc_loc_cd,
			icd_maj_grp_cd,
			icd_minr_grp_cd,
			medcr_ind,
			midsu_clm_sys_cd,
			midsu_proc_mdfr_cd,
			partcptg_ind,
			proc_cd,
			proc_ty,
			proc_cd2,
			proc_ty2,
			regn_cd,
			rc_amt,
			risk_shr_logic_ind,
			rmk_cd,
			rsn_not_covrd_cd,
			sav_rsn_cd,
			src_sys_prov_id,
			svc_prov_spec_cd,
			svc_prov_tax_id,
			svc_prov_ty,
			provider_zip_cd,
			subscrbr_zip_cd,
			ccn_provider_ind,
			ccn_spec_cd,
			ccn_min_distance,
			msc_subminor2_cat,
			svc_prov_def_subty,
			svc_ty,
			svc_dt,
			svc_date,
			Diagnosis_IND,
			Treatment_IND,
			Testing_IND,
			OTC_Testing_IND,
			Virtual_IND,
			Vaccinated_IND,
			OTC_Testing_IND,
			pd_dt,
			pd_date,
			gl_postg_pd_yr_mth,
			unit_qty,
			fund_amt,
			pay_amt,
			ccf_pay_amt,
			copay_amt,
			deduct_amt,
			coins_amt,
			cost_shr_amt,
			ccf_cost_shr_amt,
			plan_amt,
			cob_sav_amt,
			elgbl_chrg_amt,
			non_covrd_amt,
			disct_amt,
			chrg_amt,
			svc_unit_cnt,
			cntrct_sav_amt,
			consdr_chrg_amt,
			fee_sched_sav_amt,
		CASE  
			when sum(risk_shr_pay_amt) over (partition by a.claim_id, case_id)  > 100000
			then 'Y' 
		else 'N'
		END                                 
	as cat_claim_ind,
		icd_revsn_num
	from   claim_RECURSIVE_SQL  a
		LEFT JOIN
			appdm.&table_prefix.er_claim_proc_detail_agg  c
			on     a.claim_id=c.claim_id and a.ln_num = c.ln_num
			);
		%put CRDM sql (msg/rc):&sqlxmsg./&sqlxrc.;
		DISCONNECT from db2;
	QUIT;
	/********************************************************************************/
	/*				CREATES TEMP TABLE FOR PHARM VACCINE    						*/
	/********************************************************************************/
	PROC SQL;
	CONNECT to db2 (db=&crdm_database uid=&user pwd=&pwd);
		CREATE TABLE WORK.PHARM_VACCINE AS 
			select *
				from   connection to db2
				( 
			SELECT
			MBR_NUM,
			CLM_NUM,
			FILL_DT,
			MIDSU_BRNCH_CD,
			BEN_PLAN_CD,
			MEMBR_RELSHP_CD,
			NDC_NUM,
			rpt_tot_pd_amt AS PAY_AMT,
			COST_SHR_AMT,
			rpt_tot_pd_amt + COST_SHR_AMT AS PLAN_AMT,
			CASE WHEN
			NDC_NUM IN ('59676058015','00310122210','0310122210','59267100001','59267100002',
						'59267100003','5926710001','59676058005','5967658005','80777027310',
						'80777027399','8077727310') THEN 'Y'
			ELSE 'N'
			END AS VACCINATED_IND
            FROM  appdm.&table_prefix.pharmacy
			WHERE PD_YR_MTH BETWEEN &Q_curr_pd_beg_yrmo. AND &Q_curr_pd_end_yrmo.
			AND NDC_NUM IN ('59676058015','00310122210','0310122210','59267100001','59267100002',
						'59267100003','5926710001','59676058005','5967658005','80777027310',
						'80777027399','8077727310')
			%IF %UPCASE (&ben_plan_used) = Y %THEN

			%DO;
				and &ben_plan_cd
			%END;
			AND &CLIENT_WHERE
			%IF %UPCASE (&brnch_cd_used) = Y %THEN

			%DO;
				and &brnch_cd
			%END;
			);
			DISCONNECT from db2;
		QUIT;

	/********************************************************************************/
	/*				MERGES VACCINE FINANCIALS FOR METRICS    						*/
	/********************************************************************************/
	PROC SQL;
		CREATE TABLE WORK.VACCINE_FINANCIALS AS 
		SELECT 
			MBR_NUM,
			MEMBR_RELSHP_CD,
			PAY_AMT,
			COST_SHR_AMT,
			PLAN_AMT,
			VACCINATED_IND
		FROM WORK.CP_E_CLAIM
		WHERE VACCINATED_IND = 'Y'
		OUTER UNION CORR
		SELECT
			MBR_NUM,
			MEMBR_RELSHP_CD,
			PAY_AMT,
			COST_SHR_AMT,
			PLAN_AMT,
			VACCINATED_IND
		FROM WORK.PHARM_VACCINE;
	QUIT;
	/********************************************************************************/
	/*				CREATES BULK DATASET				    						*/
	/********************************************************************************/
	PROC SQL;
		create table work.cp_e_claim as
			select a.*,
				d.rptng_chnl_cd,
				d.rptng_prodt_categ_cd,
				coalesce(d.mbr_age,30)   as mbr_age,
				d.age_band_cd
			from work.cp_e_claim a
				LEFT JOIN
					(
				select d.mbr_num,
					d.svc_yr_mth,
					max(d.mbr_age) as mbr_age,
					max(d.age_band_cd) as age_band_cd,
					max(d.rptng_chnl_cd) as rptng_chnl_cd,
					max(d.rptng_prodt_categ_cd) as rptng_prodt_categ_cd
				from  work.&table_prefix.cp_struc_mp_raw d
					where rptng_prodt_categ_cd in ('MED' , 'EXT')
						group by d.mbr_num,
							d.svc_yr_mth
					)  d

					on     a.mbr_num=d.mbr_num and a.svc_dt_yr_mth=d.svc_yr_mth
		;
	quit;

    /************************************************************************************/
	/*				CREATES TEMP TABLE FOR MEMBER IND COUNT 							*/
	/************************************************************************************/
	PROC SQL;
		create table work.member_ind as		
		select
			mbr_num, 
			max(Testing_IND) as Testing_IND,
			max(OTC_Testing_IND) as OTC_Testing_IND,
			max(treatment_ind) as treatment_ind,
			max(diagnosis_ind) as diagnosis_ind,
			max(Virtual_IND) as Virtual_IND,
			max(Vaccinated_IND) as Vaccinated_IND
		from
		(
			select
				mbr_num, 
				max(Testing_IND) as Testing_IND,
				max(OTC_Testing_IND) as OTC_Testing_IND,
				max(treatment_ind) as treatment_ind,
				max(diagnosis_ind) as diagnosis_ind,
				max(Virtual_IND) as Virtual_IND,
				max(Vaccinated_IND) as Vaccinated_IND
			from
				work.cp_e_claim
			group by 
				mbr_num

			Outer Union Corr

			select
				distinct mbr_num, 
				'N' as Testing_IND,
				'N' as OTC_Testing_IND,
				'N' as treatment_ind,
				'N' as diagnosis_ind,
				'N' as Virtual_IND,
				'Y' as Vaccinated_IND
			from
				work.PHARM_VACCINE
		)
		group by 
			mbr_num;
	quit;
    /************************************************************************************/
	/*				CREATES TEMP TABLE FOR NON VACCINE DETAIL 							*/
	/************************************************************************************/
	PROC SQL;
	CREATE TABLE WORK.DETAIL AS
	SELECT 
    MBR_NUM, 
    MIDSU_CLIENT_ID,
	MIDSU_ACCT_NUM,
	MIDSU_BRNCH_CD,
	BEN_PLAN_CD,
	CLM_NUM,
	LN_NUM,
	ORIG_MBR_NUM,
	SUBSCRBR_STE_CD,
	MSC_MAJOR_CATEG,
	MSC_MINOR_CATEG,
	MSC_SUBMINOR_CATEG,
	PARTCPTG_IND,	
    DIAG_CD1,
	DIAG_CD2,
	DIAG_CD3,
	PROC_CD,
	HCFA_SVC_LOC_CD,
	SVC_DT,
   	DIAGNOSIS_IND,
	TREATMENT_IND,
	TESTING_IND,
	OTC_Testing_IND,
	VIRTUAL_IND,
	VACCINATED_IND,
	PD_DT,
	PAY_AMT,
	CHRG_AMT,
	DEDUCT_AMT,
	COINS_AMT,
	COST_SHR_AMT,
	PLAN_AMT,
	MBR_AGE,
	SEX_CD,
	MEMBR_RELSHP_CD				
	FROM WORK.CP_E_CLAIM
	WHERE PROC_CD NOT IN ('0003A','0004A','0013A','0034A','0053A','0054A','91306','0064A','0071A','0072A','91300','91301','91302','0021A','0022A','91303','0031A','0011A','0012A','0001A','0002A');
	QUIT;
	/*************************************************************************************/
	/*								COVID 19 PHARM						      			 */
	/*************************************************************************************/
PROC SQL;
	CONNECT to db2 (db=&crdm_database uid=&user pwd=&pwd);
		create table work.cp_e_pharmacy as
			select *
				from   connection to db2
					(
				select
					P.mbr_num,
					P.incrd_yr_mth,
				CASE 
					when P.midsu_src_sys_cd = 'CS' then 'PHM'
					when P.midsu_src_sys_cd = 'RX' then
				CASE 
					when  P.acct_subty2 = 'PHARM' then 'PHM'
					else 'MED'
				END
					ELSE 'MED'
					END 
				as rptng_prodt_categ_cd,
					CASE 
						when P.incrd_yr_mth = '' then ''
						when P.incrd_yr_mth = '999912' then '12-31-9999'
						else date(      substr(P.incrd_yr_mth, 1,4) || '-' || substr(P.incrd_yr_mth, 5,2) || '-01' )  +1 month -
						day ( date(substr(P.incrd_yr_mth, 1,4) || '-' || substr(P.incrd_yr_mth, 5,2) || '-01' )) day
					END 
				as svc_date,
					P.midsu_client_id,
					P.midsu_src_sys_cd,
					P.midsu_acct_num,
					P.midsu_brnch_cd,
					P.ben_plan_cd,
					P.acct_subty2,
					P.base_prodt_cd,
					P.midsu_base_nt_id,
					P.base_hmo_cd,
					P.fill_dt,
					P.formulary_ind,
					P.mail_ordr_ind,
					P.msc_major_categ,
					P.msc_minor_categ,
					P.msc_subminor_categ,
					P.nt_clm_cd,
					P.nt_id,
					P.paid_dt,
					P.pd_yr_mth,
					P.prscb_prov_dea_num,
					P.argus_clnt_num,
					P.copay_ben_cd,
					P.ndc_genrc_mids_ind,
					P.nabp_pharmacy_num,
					P.drg_intract_cd,
					P.regn_cd,
				CASE 
					when P.nt_clm_cd = 'O' then 'N' 
					else 'Y'
				END 
			as in_network_ind,
				P.cust_num,
				P.ndc_num,
				P.rx_refll_num,
				SPFC.MINOR_GRP as spfc_thrpdc_clss,
				P.brand_cd,
				P.disp_ind,
				P.preauth_sfx,
				P.dup_thrpy_cd,
				P.dsge_rng_compl_ind,
				P.open_frmlry_ind,
				P.prefrd_ind,
				P.retail_mail,
				P.single_multi,
				P.episode_num,
				P.etg_num,
				sum(P.disp_fee_amt)                                         as disp_fee_amt       ,
				sum(P.act_mac_dif_amt)                                      as act_mac_dif_amt    ,
				sum(P.ingrd_cst_amt)                                        as ingrd_cst_amt      ,
				sum(P.fund_amt)                                             as fund_amt           ,
				sum(P.cost_shr_amt - P.fund_amt)                            as ccf_cost_shr_amt   ,
				sum(P.cost_shr_amt + P.rpt_tot_pd_amt)                      as rx_plan_amt        ,
				sum(P.awp_ingrd_cst_amt)                                    as awp_ingrd_cst_amt  ,
				sum(P.days_sup_qty)                                         as days_sup_qty       ,
				sum(P.presc_filld_cnt)                                      as presc_filld_cnt    ,
				sum(P.rtl_adj_presc_cnt)                                    as rtl_adj_presc_cnt  ,
				sum(P.rpt_ingrd_cst_amt)                                    as rpt_ingrd_cst_amt  ,
				sum(P.sales_tax_amt)                                        as sales_tax_amt      ,
				sum(P.metrc_qty)                                            as metrc_qty          ,
				sum(P.rpt_disp_fee_amt)                                     as rpt_disp_fee_amt   ,
				sum(P.dedct_appld_amt  )                                    as dedct_appld_amt    ,
				sum(P.copay_coins_amt  )                                    as copay_coins_amt    ,
				sum(P.rpt_tot_pd_amt + P.fund_amt)                            as ccf_rpt_tot_pd_amt ,
				sum(P.rpt_tot_pd_amt   )                                    as rpt_tot_pd_amt     ,
				sum(P.tot_pd_amt       )                                    as tot_pd_amt         ,
				sum(P.fsa_amt)                                              as fsa_amt            ,
				sum(P.hra_amt)                                              as hra_amt            ,
				sum(P.pharm_disp_fee_amt)                                   as pharm_disp_fee_amt ,
				sum(P.pharm_ingrd_cst_amt)                                  as pharm_ingrd_cst_amt,
				sum(P.pharm_pd_amt)                                         as pharm_pd_amt       ,
				sum(P.pharm_retl_sprd_amt)                                  as pharm_retl_sprd_amt,
				sum(P.pharm_sales_tax_amt)                                  as pharm_sales_tax_amt,
				%if "%upcase(&table_prefix.)" = "FA_"
				%then

			%do;
				sum(P.pnt_of_sale_rbt_amt)                           as pnt_of_sale_rbt_amt
			%end;
%else
	%do;
		0                                                  as pnt_of_sale_rbt_amt
	%end;

	from  appdm.&table_prefix.pharmacy P
		left join appdm.spfc SPFC
			on P.SPFC_THRPDC_CLSS = SPFC.SPFC_THRPDC_CLSS

		where P.pd_yr_mth between &Q_curr_pd_beg_yrmo. and &Q_curr_pd_end_yrmo.                    and
			P.msc_major_categ ^= '09'                                                            and
			&client_where


			/*           %if %length(&fa_account_in_list) > 0*/

	/*           %then %do;*/
	/*            and med_pharm_ind != 'Y'*/
	/*           %end;*/
	group by
		P.mbr_num,
		P.incrd_yr_mth,
	CASE 
		when P.midsu_src_sys_cd = 'CS' then 'PHM'
		when P.midsu_src_sys_cd = 'RX' then
	CASE 
		when  P.acct_subty2 = 'PHARM' then 'PHM'
		else 'MED'
	END
		ELSE 'MED'
		END,
	CASE 
		when P.incrd_yr_mth = '' then ''
		when P.incrd_yr_mth = '999912' then '12-31-9999'
		else date(      substr(P.incrd_yr_mth, 1,4) || '-' || substr(P.incrd_yr_mth, 5,2) || '-01' )  +1 month -
		day ( date(substr(P.incrd_yr_mth, 1,4) || '-' || substr(P.incrd_yr_mth, 5,2) || '-01' )) day
		END,
		P.midsu_client_id,
		P.midsu_src_sys_cd,
		P.midsu_acct_num,
		P.midsu_brnch_cd,
		P.ben_plan_cd,
		P.acct_subty2,
		P.base_prodt_cd,
		P.midsu_base_nt_id,
		P.base_hmo_cd,
		P.fill_dt,
		P.formulary_ind,
		P.mail_ordr_ind,
		P.msc_major_categ,
		P.msc_minor_categ,
		P.msc_subminor_categ,
		P.nt_clm_cd,
		P.nt_id,
		P.paid_dt,
		P.pd_yr_mth,
		P.prscb_prov_dea_num,
		P.argus_clnt_num,
		P.copay_ben_cd,
		P.ndc_genrc_mids_ind,
		P.nabp_pharmacy_num,
		P.drg_intract_cd,
		P.regn_cd,
	CASE 
		when P.nt_clm_cd = 'O' then 'N' 
		else 'Y' END,
		P.cust_num,
		P.ndc_num,
		P.rx_refll_num,
		SPFC.MINOR_GRP,
		P.brand_cd,
		P.disp_ind,
		P.preauth_sfx,
		P.dup_thrpy_cd,
		P.dsge_rng_compl_ind,
		P.open_frmlry_ind,
		P.prefrd_ind,
		P.retail_mail,
		P.single_multi,
		P.episode_num,
		P.etg_num
		);
	/*DISCONNECT from db2;*/
	QUIT;

	/************************************************************************
	 *                                                                       *
	 * Pull all diagnosed members from claim                                 *
	 *                                                                       *
 ************************************************************************/
	PROC SQL;
		create table work.covid_diag_claims as
			select mbr_num,
				min(svc_dt) as svc_dt,
				sum(plan_amt) as plan_amt

			from   work.cp_e_claim a
				where  diagnosis_ind = 'Y'
					group  by mbr_num

		;
	QUIT;

	/************************************************************************
	 *                                                                       *
	 * Pull all covid related drugs                                          *
	 *                                                                       *
     ************************************************************************/
	PROC SQL;
		create table work.covid_rx as
			select a.*, c.BRND_NM 

			from   work.cp_e_pharmacy a

			INNER JOIN

				crdm.covid_drug_list b
				on a.ndc_num = b.ndc
			LEFT JOIN
				crdm.ndc c
				on b.ndc = c.ndc_num
		;
	QUIT;

	/************************************************************************
	 *                                                                       *
	 * Join the two to limit the scripts to diagnosed customers              *
	 *                                                                       *
 ************************************************************************/
	PROC SQL;
		create table work.cp_covid_pharmacy as
			select  a.incrd_yr_mth                as svc_yr_mth         length=6     label='svc_yr_mth'                      ,
				a.svc_date                                          length=8     label='svc_date'        format=yymmdd10.,
				a.mbr_num                                           length=15    label='mbr_num'                         ,
				a.brnd_nm                                           length=50    label='brnd_nm'                         ,
				a.spfc_thrpdc_clss                                  length=40     label='spfc_thrpdc_clss'                ,

				sum(presc_filld_cnt)   as presc_filld_cnt         length=8     label='presc_filld_cnt'     format=13.  ,
				sum(rtl_adj_presc_cnt) as rtl_adj_presc_cnt       length=8     label='rtl_adj_presc_cnt'   format=13.  ,
				sum(ccf_rpt_tot_pd_amt)as ccf_tot_pd_amt          length=8     label='ccf_rpt_tot_pd_amt'              ,
				sum(ccf_cost_shr_amt)  as ccf_cost_shr_amt        length=8     label='ccf_cost_shr_amt'                ,
				sum(fund_amt)          as fund_amt                length=8     label='fund_amt'                        ,
				sum(rpt_disp_fee_amt)  as rpt_disp_fee_amt        length=8     label='rpt_disp_fee_amt'                ,
				sum(rpt_ingrd_cst_amt) as rpt_ingrd_cst_amt       length=8     label='rpt_ingrd_cst_amt'               ,
				sum(sales_tax_amt)     as sales_tax_amt           length=8     label='sales_tax_amt'                   ,
				sum(awp_ingrd_cst_amt) as awp_ingrd_cst_amt       length=8     label='awp_ingrd_cst_amt'               ,
				sum(rx_plan_amt)       as rx_plan_amt             length=8     label='rx_plan_amt'                     ,
				sum(rpt_tot_pd_amt)    as rpt_tot_pd_amt          length=8     label='rpt_tot_pd_amt'                  ,
				sum(ACT_MAC_DIF_AMT)   as ACT_MAC_DIF_AMT

			from   work.covid_rx a

			INNER JOIN

				work.covid_diag_claims b
				on a.mbr_num = b.mbr_num

			where  a.fill_dt >= b.svc_dt
				group  by a.incrd_yr_mth,
					a.svc_date,
					a.mbr_num,
					a.brnd_nm,
					a.spfc_thrpdc_clss
		;
	QUIT;
%MEND CP_E_CLAIM_CAP_WBC;

/**********************************************************
 *                                                         *
 * Call Routine                                            *
 *                                                         *
 **********************************************************/
%CP_E_CLAIM_CAP_WBC;
****************************************************************************************************************************************

 NAME:        cp_e_struc_mbr_agg.sas
 LAN PATH:    k:\hda_sys\apps\cap\extract_library\programs\extract
 UNIX PATH:   /apps/cap/extract_library/programs/extract

 DESCRIPTION:

 UPDATED(Reason-Date):                                              DEVELOPER:

*******************************************************************************/


/**********************************************************
*                                                         *
* Define Routine                                          *
*                                                         *
**********************************************************/

 /********************************************************************************************
 *                                                                                           *
 * Extract Table                                                                             *
 *                                                                                           *
 ********************************************************************************************/

 PROC SQL;

  CONNECT to db2 (db=&crdm_database uid=&user pwd=&pwd);

  create table WORK.cp_e_struc_mbr_agg as
  select *
  from   connection to db2

  (

   /********************************************************************************************
   *                                                                                           *
   * Define struc_mbr_agg Recursive SQL                                                        *
   *                                                                                           *
   ********************************************************************************************/

   with struc_mbr_agg_RECURSIVE_SQL as
   (

    select mbr_num,
           svc_yr_mth,
           rptng_prodt_categ_cd,

           CASE when svc_yr_mth = ''        then ''
                when svc_yr_mth =  '999912' then '12-31-9999'
                else date(      substr(svc_yr_mth, 1,4) || '-' || substr(svc_yr_mth, 5,2) || '-01' )  +1 month -
                     day ( date(substr(svc_yr_mth, 1,4) || '-' || substr(svc_yr_mth, 5,2) || '-01' )) day
           END as svc_date,

           midsu_client_id,
           midsu_src_sys_cd,
           midsu_acct_num,
           midsu_brnch_cd,
           ben_plan_cd,
           acct_subty2,
           base_prodt_cd,
           midsu_base_nt_id,
           base_hmo_cd,

           max(member_month_ind)           as member_month_ind,
           max(claim_ind)                  as claim_ind,
           max(pharmacy_ind)               as pharmacy_ind,
           max(capitation_ind)             as capitation_ind,

           sum(claim_pay_amt)              as  claim_pay_amt,
           sum(claim_fund_amt)             as  claim_fund_amt,
           sum(claim_ccf_pay_amt)          as  claim_ccf_pay_amt,

           sum(pharmacy_rpt_tot_pd_amt)    as  pharmacy_rpt_tot_pd_amt,
           sum(pharmacy_fund_amt)          as  pharmacy_fund_amt,
           sum(capitation_paid_amt)        as  capitation_paid_amt

    from   appdm.&table_prefix.struc_mbr_agg

    where  &client_where and
           paid_yr_mth between &Q_curr_pd_beg_yrmo.  and &Q_curr_pd_end_yrmo. and
           rptng_prodt_categ_cd in ('MED', 'EXT', 'PHM')

    group  by
           mbr_num,
           svc_yr_mth,
           rptng_prodt_categ_cd,
           CASE when svc_yr_mth = ''        then ''
                when svc_yr_mth =  '999912' then '12-31-9999'
                else date(      substr(svc_yr_mth, 1,4) || '-' || substr(svc_yr_mth, 5,2) || '-01' )  +1 month -
                     day ( date(substr(svc_yr_mth, 1,4) || '-' || substr(svc_yr_mth, 5,2) || '-01' )) day
           END,
           midsu_client_id,
           midsu_src_sys_cd,
           midsu_acct_num,
           midsu_brnch_cd,
           ben_plan_cd,
           acct_subty2,
           base_prodt_cd,
           midsu_base_nt_id,
           base_hmo_cd

   ),

   /********************************************************************************************
   *                                                                                           *
   * Define CBH_CRVD_STRUC Recursive SQL                                                       *
   *                                                                                           *
   ********************************************************************************************/

   cbh_crvd_struc_RECURSIVE_SQL as
   (
    select distinct midsu_client_id,
           midsu_acct_num,
           ben_plan_cd,
           ben_plan_eff_yr_mth,
           ben_plan_can_yr_mth,
           carve_in_ind

    from   appdm.cbh_crvd_struc
    where  &client_where and
           carve_in_ind = 'Y'
   ),

   /********************************************************************************************
   *                                                                                           *
   * Define MBR_DTL_SQL for AMI_ID, First Name and Last Name                                   *
   *                                                                                           *
   ********************************************************************************************/


   mbr_dtl_RECURSIVE_SQL as
   (
    select distinct 
           mbr_num,
		   max(membr_relshp_cd)                     as membr_relshp_cd,
           max(ami_membr_id)                        as ami_membr_id, 
           max(frst_nm)                             as frst_nm,
           max(last_nm)                             as last_nm

    from   appdm.member
    where  &client_where_mod and mbr_num <> '' and (ami_membr_id <> '' or frst_nm <> '' or last_nm <> '') 
    group by mbr_num
   ) ,
   
   /********************************************************************************************
   *                                                                                           *
   * ADD define MBR_DTL_SQL for AMI_ID for FACET ( West) - JW                                  *
   *                                                                                           *
   ********************************************************************************************/

   fa_mbr_dtl_RECURSIVE_SQL as
   (
    select distinct 
           mbr_num,
		   max(membr_relshp_cd)                     as membr_relshp_cd,
           trim(substr(max(ami_id), 1,10) || substr(max(ami_id), 14,2)) as ami_membr_id
    from   appdm.fa_eligibility
    where  &client_where and mbr_num <> '' and (ami_id <> '' or frst_nm <> '' or last_nm <> '')   
    group by mbr_num
   ) 

   /********************************************************************************************
   *                                                                                           *
   * Final Select applying Structure Remap using Recursive SQL                                 *
   *                                                                                           *
   ********************************************************************************************/
   select a.mbr_num,
          a.svc_yr_mth,
          svc_date,

          /********************************************************************************************
          * Note we leave the original structure indicatives rather than the remapped ones            *
          ********************************************************************************************/

          a.midsu_client_id,
          a.midsu_src_sys_cd,
          a.midsu_acct_num,
          a.midsu_brnch_cd,
          a.ben_plan_cd,
          a.acct_subty2,
          a.base_prodt_cd,
          a.midsu_base_nt_id,
          a.base_hmo_cd,

          coalesce(d.ami_membr_id, e.ami_membr_id) as ami_membr_id, /* updated - JW */
          d.frst_nm,
          d.last_nm,

          a.member_month_ind,
          a.claim_ind,
          a.pharmacy_ind,
          a.capitation_ind,
		  coalesce(d.membr_relshp_cd, e.membr_relshp_cd)             as  membr_relshp_cd,
		  a.rptng_prodt_categ_cd,
          CASE when c.carve_in_ind = 'Y' and a.member_month_ind='Y' then 'Y'
               else 'N'
          END                                                                        as cbh_ind,

          CASE when a.member_month_ind='Y' and a.midsu_src_sys_cd ^= 'RX'
           then count(distinct a.mbr_num||a.svc_yr_mth)         else 0
          END                                                                        as mmos,
          CASE when a.member_month_ind='Y' and coalesce(d.membr_relshp_cd, e.membr_relshp_cd)='E' and a.midsu_src_sys_cd ^= 'RX'
           then count(DISTINCT a.mbr_num||a.svc_yr_mth)         else 0
          END                                                                        as submos,
          
          coalesce(sum(a.claim_pay_amt), 0)             as  claim_pay_amt,
          coalesce(sum(a.claim_fund_amt), 0)            as  claim_fund_amt,
          coalesce(sum(a.claim_ccf_pay_amt), 0)         as  claim_ccf_pay_amt,
          coalesce(sum(a.pharmacy_rpt_tot_pd_amt),0)    as  pharmacy_rpt_tot_pd_amt,
          coalesce(sum(a.pharmacy_fund_amt),0)          as  pharmacy_fund_amt,
          coalesce(sum(a.capitation_paid_amt),0)        as  capitation_paid_amt

   from   struc_mbr_agg_RECURSIVE_SQL  a

          LEFT JOIN

          cbh_crvd_struc_RECURSIVE_SQL c
   on     a.midsu_client_id = c.midsu_client_id and
          a.midsu_acct_num = c.midsu_acct_num and
          a.ben_plan_cd = c.ben_plan_cd and
          a.svc_yr_mth between c.ben_plan_eff_yr_mth and c.ben_plan_can_yr_mth

          LEFT JOIN
          
          mbr_dtl_RECURSIVE_SQL        d
   on     a.mbr_num = d.mbr_num
   
          /* Add Fa_eligibility - JW */  
          LEFT JOIN
          
          fa_mbr_dtl_RECURSIVE_SQL     e
   on     a.mbr_num = e.mbr_num

   group  by
          a.mbr_num,
          a.svc_yr_mth,
          svc_date,
          a.midsu_client_id,
          a.midsu_src_sys_cd,
          a.midsu_acct_num,
          a.midsu_brnch_cd,
          a.ben_plan_cd,
          a.acct_subty2,
          a.base_prodt_cd,
          a.midsu_base_nt_id,
          a.base_hmo_cd,

          coalesce(d.ami_membr_id, e.ami_membr_id),
          d.frst_nm,
          d.last_nm,

          a.member_month_ind,
          a.claim_ind,
          a.pharmacy_ind,
          a.capitation_ind,
          coalesce(d.membr_relshp_cd, e.membr_relshp_cd),
		  a.rptng_prodt_categ_cd,
          CASE when c.carve_in_ind = 'Y' and a.member_month_ind='Y' then 'Y'
               else 'N'
          END

  );
  DISCONNECT from db2;
 QUIT;

    /********************************************************************************************
   *                                                                                           *
   * Define Structure Remap Recursive SQL                                                      *
   *                                                                                           *
   ********************************************************************************************/
   PROC SQL;
      create table WORK.cp_e_struc_mbr_agg as
	  select a.*,
	  	  b.rptng_chnl_cd,
          b.mbr_age,
          b.age_band_cd,
          b.sex_cd,
          b.pharm_elgbl_ind,
          b.mmm_ben_pln_cd,
          b.rpt_subscrbr_num
           
		from WORK.cp_e_struc_mbr_agg a

   LEFT JOIN
   (
    select mbr_num,
           svc_yr_mth,
		   rptng_prodt_categ_cd,
           max(sex_cd) as sex_cd,
           max(age_band_cd) as age_band_cd,
           max(mbr_age) as mbr_age,
           max(pharm_elgbl_ind) as pharm_elgbl_ind,
           max(mmm_ben_pln_cd) as mmm_ben_pln_cd,
           max(rpt_subscrbr_num) as rpt_subscrbr_num,
           max(rptng_chnl_cd) as rptng_chnl_cd

     from  work.&table_prefix.cp_struc_mp_raw 
     where rptng_prodt_categ_cd in ('MED', 'EXT', 'PHM')
	 group by mbr_num,
           svc_yr_mth,
		   rptng_prodt_categ_cd
   )      b

   on     a.mbr_num=b.mbr_num and
          a.svc_yr_mth=b.svc_yr_mth and
          a.rptng_prodt_categ_cd = b.rptng_prodt_categ_cd
   ;
   quit;
 /*************************************************************************************
 *                                                                                    *
 * Create Member Eligibility Agg Table for use with CP_E_Member_Agg                   *
 * This step gets a single set of attributes per member number                        *
 * Note that we create our own subscrbr_num using 1st 9 digits of mbr_num due to      *
 * differences in way subscrbr_num is populated                                       *
 *                                                                                    *
 *************************************************************************************/

  PROC SQL;
  create table WORK.cp_member as

  select mbr_num,
         ami_membr_id,
         rptng_chnl_cd,
         rptng_prodt_categ_cd,
         last_membr_relshp_cd,
         last_age_amt,
         last_sex_cd,
         last_svc_date      format=yymmdd10.,
         
         mmos                     format=comma12.,
         submos                   format=comma12.,
         claim_pay_amt            format=dollar15.2,
         pharmacy_rpt_tot_pd_amt  format=dollar15.2,

         base_med_ccf_pay_amt     format=dollar15.2,
         curr_med_ccf_pay_amt     format=dollar15.2,
         base_rx_pay_amt          format=dollar15.2,
         curr_rx_pay_amt          format=dollar15.2,
         base_med_rx_pay_amt      format=dollar15.2,
         curr_med_rx_pay_amt      format=dollar15.2


  from   (

          select mbr_num,
                 ami_membr_id,
                 max(rptng_chnl_cd)                                                       as rptng_chnl_cd,
                 max(rptng_prodt_categ_cd)                                                as rptng_prodt_categ_cd,

                 max(last_svc_date)                                                       as last_svc_date,
                 max(last_membr_relshp_cd)                                                as last_membr_relshp_cd,
                 max(last_age_amt)                                                        as last_age_amt,
                 max(last_sex_cd)                                                         as last_sex_cd,

                 sum(mmos)                                                                as mmos,
                 sum(submos)                                                              as submos,

                 sum(claim_pay_amt)                                                       as claim_pay_amt,
                 sum(pharmacy_rpt_tot_pd_amt)                                             as pharmacy_rpt_tot_pd_amt,

                 sum(base_med_ccf_pay_amt)                                                as base_med_ccf_pay_amt,
                 sum(curr_med_ccf_pay_amt)                                                as curr_med_ccf_pay_amt,
                 sum(base_rx_pay_amt)                                                     as base_rx_pay_amt,
                 sum(curr_rx_pay_amt)                                                     as curr_rx_pay_amt,
                 coalesce(sum(base_med_ccf_pay_amt) + sum(base_rx_pay_amt), 0)            as base_med_rx_pay_amt format=dollar15.2,
                 coalesce(sum(curr_med_ccf_pay_amt) + sum(curr_rx_pay_amt), 0)            as curr_med_rx_pay_amt format=dollar15.2
          from
                (
                  select mbr_num,
                         ami_membr_id,
                         rptng_chnl_cd,
                         rptng_prodt_categ_cd,
                         
                         max(svc_date)                                                           as last_svc_date,
                         max(membr_relshp_cd)                                                    as last_membr_relshp_cd,
                         max(mbr_age)                                                            as last_age_amt,
                         max(sex_cd)                                                             as last_sex_cd,

                         sum(mmos)                                                               as mmos,
                         sum(submos)                                                             as submos,
                         sum(claim_pay_amt)                                                      as claim_pay_amt,
                         sum(pharmacy_rpt_tot_pd_amt)                                            as pharmacy_rpt_tot_pd_amt,
                         0                                                                       as base_med_ccf_pay_amt,
                         sum(claim_ccf_pay_amt)                                                  as curr_med_ccf_pay_amt,
                         0                                                                      as base_rx_pay_amt,
                         sum(pharmacy_rpt_tot_pd_amt)                                            as curr_rx_pay_amt

                  from   WORK.cp_e_struc_mbr_agg

                  group  by
                         mbr_num,
                         ami_membr_id,
                         rptng_chnl_cd,
                         rptng_prodt_categ_cd

                 ) A

           group  by
                  mbr_num, ami_membr_id

         )

  ;
 QUIT;
 *****************************************************************************************************************
 /*******************************************************************************

NAME:        cp_pro_detail.sas
LAN PATH:    k:\cr\svn\apps\cap\trunk\extract_library\programs\data_source
UNIX PATH:   /apps/cap/extract_library/programs/data_source

DESCRIPTION:

NOTES:

*******************************************************************************/

 /************************************************************************
 *                                                                       *
 * Create CP_Pro_Detail Data Source for Professional Data                *
 *                                                                       *
 ************************************************************************/
 PROC SQL;
  create table work.cp_pro_detail as
  select a.svc_yr_mth,
         a.mbr_num,
         a.membr_relshp_cd,
         a.sex_cd,
         a.mbr_age,
         a.age_band_cd,
         a.pro_exclude_ind           as exclude_ind ,
         a.confmt_ind,
           
         CASE when a.nt_clm_cd = 'O' then 'N'
              else 'Y'
         END as in_network_ind,
         
         c.pro_spec_grp_cd,
         a.svc_prov_spec_cd,
         a.src_sys_prov_id,
         a.msc_subminor_categ,
		a.Testing_IND,
		a.Diagnosis_IND,
         trim(mbr_num) || trim(left(put(svc_dt, mmddyy8.))) || trim(src_sys_prov_id) as visit_key,

         sum(consdr_chrg_amt)      as consdr_chrg_amt       format=dollar14.2,
         sum(ccf_pay_amt)          as ccf_pay_amt           format=dollar14.2,
         sum(ccf_cost_shr_amt)     as ccf_cost_shr_amt      format=dollar14.2,
         sum(plan_amt)             as plan_amt              format=dollar14.2,
         sum(svc_unit_cnt)         as svc_unit_cnt          format=dollar14.2,
         sum(pay_amt)              as pay_amt               format=dollar14.2,
         sum(fund_amt)             as fund_amt              format=dollar14.2

    from (
          select a.mbr_num,
                 a.svc_dt_yr_mth                                               as svc_yr_mth,
                 a.membr_relshp_cd,
                 a.sex_cd,
                 a.mbr_age,
                 a.age_band_cd,
                 a.nt_clm_cd, 
                 a.clm_num,
                 a.ln_num,
                 a.src_sys_prov_id,
                 a.svc_dt,
                 a.proc_cd,
                 a.proc_ty,

                 CASE when a.pro_exclude_ind = 'Y'     then 'Y'
                      when a.proc_ty not in ('CP','1') then 'Y'
                      else 'N'
                 END as pro_exclude_ind,

                 a.confmt_ind,
                 a.svc_prov_spec_cd,
                 a.msc_subminor_categ,
				 a.Testing_IND,
                 a.Diagnosis_IND,
                 consdr_chrg_amt, 
                 ccf_pay_amt,
                 ccf_cost_shr_amt,
                 ccf_pay_amt + ccf_cost_shr_amt as plan_amt,
                 svc_unit_cnt,
                 pay_amt,
                 fund_amt

           from  work.cp_e_claim  a
           where msc_major_categ='04'
         ) a

         LEFT JOIN

         cr_ref.proc_mp              c
         on a.proc_cd = c.proc_cd

   group by a.svc_yr_mth,
         a.mbr_num,
         a.membr_relshp_cd,
         a.sex_cd,
         a.mbr_age,
         a.age_band_cd,
         a.pro_exclude_ind,
         a.confmt_ind,
         calculated in_network_ind,
         c.pro_spec_grp_cd,
         a.svc_prov_spec_cd,
         a.src_sys_prov_id,
         a.msc_subminor_categ,
		a.Testing_IND,
		a.Diagnosis_IND,
         calculated visit_key
   order by calculated visit_key,
         msc_subminor_categ,
         calculated pay_amt desc
   ;
  QUIT;

 /************************************************************************
 *                                                                       *
 * Create visit counts                                                   *
 *                                                                       *
 ************************************************************************/
  DATA work.cp_pro_visits;
   set work.cp_pro_detail;
   by visit_key msc_subminor_categ;

   if first.msc_subminor_categ then do;
      msc_visit_cnt = 1;
   end;
   else do;
      msc_visit_cnt = 0;
   end;

   if first.visit_key then do;
            visit_cnt = 1;
    end;
    else do;
            visit_cnt = 0;
    end;

   /************************************************************************
   *                                                                       *
   * Initialize Completion Factor Columns                                  *
   *                                                                       *
   ************************************************************************/
     adjust_factor    = 1;
   
   /************************************************************************
   *                                                                       *
   * Create Matured Financials and Summarize                               *
   *                                                                       *
   ************************************************************************/

   ccf_mat_paid_amt     = ccf_pay_amt/adjust_factor;
   ccf_mat_cost_shr_amt = ccf_cost_shr_amt/adjust_factor;
   mat_fund_amt         = fund_amt/adjust_factor;
   mat_plan_amt         = ccf_mat_paid_amt + ccf_mat_cost_shr_amt;
   mat_svc_cnt          = svc_unit_cnt/adjust_factor;
   mat_msc_visit_cnt    = msc_visit_cnt/adjust_factor;
   mat_visit_cnt        = visit_cnt/adjust_factor;

  RUN;

 /************************************************************************
 *                                                                       *
 * Create Final table with only columns we need                          *
 *                                                                       *
 ************************************************************************/
  PROC SQL;
   create table work.cp_pro_detail as
   select a.rptng_chnl_cd,
          a.rptng_prodt_categ_cd,
          a.mbr_num,
          a.membr_relshp_cd,
          a.sex_cd,
          a.mbr_age,
          a.age_band_cd,
          a.exclude_ind ,
          a.confmt_ind,
          a.in_network_ind,
          a.pro_spec_grp_cd,
          a.svc_prov_spec_cd,
          c.pcp_typ as pcp_type,
          
          a.src_sys_prov_id,
          a.msc_subminor_categ,
		a.Testing_IND,
		a.Diagnosis_IND,
          coalesce(a.consdr_chrg_amt, 0)      as consdr_chrg_amt, 
          coalesce(a.ccf_mat_paid_amt, 0)     as ccf_mat_paid_amt,
          coalesce(a.ccf_mat_cost_shr_amt, 0) as ccf_mat_cost_shr_amt,
          coalesce(a.mat_fund_amt, 0)         as mat_fund_amt,
          coalesce(a.mat_plan_amt, 0)         as mat_plan_amt,
          coalesce(a.mat_svc_cnt, 0)          as mat_svc_cnt,
          coalesce(a.mat_msc_visit_cnt, 0)    as mat_msc_visit_cnt,
          coalesce(a.mat_visit_cnt, 0)        as mat_visit_cnt,
          coalesce(a.pay_amt, 0)              as pay_amt,
          coalesce(a.fund_amt, 0)             as fund_amt

   from (
          select 'I'   as rptng_chnl_cd,
                 'MED' as rptng_prodt_categ_cd,
                 mbr_num,
                 membr_relshp_cd,
                 sex_cd,
                 mbr_age,
                 age_band_cd,
                 exclude_ind ,
                 confmt_ind,
                 in_network_ind,
                 pro_spec_grp_cd,
                 svc_prov_spec_cd,
                 src_sys_prov_id,
                 msc_subminor_categ,
				 Testing_IND,
                 Diagnosis_IND,
                 sum(consdr_chrg_amt)      as consdr_chrg_amt,
                 sum(ccf_mat_paid_amt)     as ccf_mat_paid_amt,
                 sum(ccf_mat_cost_shr_amt) as ccf_mat_cost_shr_amt,
                 sum(mat_fund_amt)         as mat_fund_amt,
                 sum(mat_plan_amt)         as mat_plan_amt,
                 sum(mat_svc_cnt)          as mat_svc_cnt,
                 sum(mat_msc_visit_cnt)    as mat_msc_visit_cnt,
                 sum(mat_visit_cnt)        as mat_visit_cnt,
                 sum(pay_amt)              as pay_amt,
                 sum(fund_amt)             as fund_amt

          from   work.cp_pro_visits
          group  by rptng_chnl_cd,
                 rptng_prodt_categ_cd,
                 mbr_num,
                 membr_relshp_cd,
                 sex_cd,
                 mbr_age,
                 age_band_cd,
                 exclude_ind ,
                 confmt_ind,
                 in_network_ind,
                 pro_spec_grp_cd,
                 svc_prov_spec_cd,
                 src_sys_prov_id,
                 msc_subminor_categ,
				 Testing_IND,
				 Diagnosis_IND
        ) a

        LEFT JOIN

        work.cp_member    b
        on a.mbr_num = b.mbr_num
        
        LEFT JOIN                                                                                                                       
                                                                                                                                        
        cr_ref.provider_spec_cd c                                                                                                       
        on a.svc_prov_spec_cd = c.cpf_specialty_cd 
     
        
   ;
  QUIT;
*****************************************************************************************************************************************************


/*******************************************************************************

NAME:        cp_ov.sas
LAN PATH:    k:\hda_sys\apps\cap\extract_library\programs\data_source
UNIX PATH:   /apps/cap/extract_library/programs/data_source

DESCRIPTION:


DOCUMENTS:


NOTES:

 -
TASKS TO COMPLETE(remove as completed):

 - ...
UPDATED(Reason-Date):                                           DEVELOPER:

*******************************************************************************/

/**********************************************************
*                                                         *
* Define Routine                                          *
*                                                         *
**********************************************************/

 /************************************************************************
 *                                                                       *
 * Create cp_ov Data Source                                             *
 *                                                                       *
 *                                                                       *
 ************************************************************************/
/************************************************************************
*                                                                       *
* Macro Variables                                                       *
*                                                                       *
************************************************************************/
%let lablo    = %STR('80000');
%let labhi    = %STR('89999');
%let vaclo    = %STR('90465');
%let vachi    = %STR('90749');
%let entlo    = %STR('92950');
%let enthi    = %STR('94010');
%let carlo    = %STR('94010');
%let carhi    = %STR('94799');
%let allimmlo = %STR('95004');
%let allimmhi = %STR('95199');
%let ptlo     = %STR('97001');
%let pthi     = %STR('98943');
%let pullo    = %STR('94010');
%let pulhi    = %STR('94799');
%let chemolo  = %STR('96401');
%let chemohi  = %STR('96549');
%let ovcds    = %STR('195','122');
%let ovpvcds  = %STR('207');
%let ovelcds  = %STR('127');
%let pcpcds   = %STR('AI', 'AM','CC', 'CE', 'FA','FP', 'GE','GN', 'GP', 'IM', 'MO',
                              'NF', 'NS', 'PD', 'PH','PR', 'SO', 'XI', 'XM', 'XU');


%let xray =
   %STR("27093",       "27095",      "70030", "70100",       "70110",       "70120",
       "70130",       "70134",       "70140", "70150",       "70160",       "70190",
       "70200",       "70210",       "70220", "70240",       "70250",       "70260",
       "70300",       "70310",       "70320", "70328",       "70330",       "70360",
       "70370",       "70380",       "71010", "71015",       "71020",       "71023",
       "71030",       "71035",       "71100", "71101",       "71110",       "71111",
       "71120",       "71130",       "72010", "72020",       "72040",       "72050",
       "72052",       "72069",       "72070", "72072",       "72074",       "72080",
       "72090",       "72100",       "72110", "72114",       "72120",       "72170",
       "72190",       "72200",       "72202", "72220",       "73000",       "73010",
       "73020",       "73030",       "73050", "73060",       "73070",       "73080",
       "73090",       "73092",       "73100", "73110",       "73115",       "73120",
       "73130",       "73140",       "73500", "73510",       "73520",       "73525",
       "73530",       "73540",       "73542", "73550",       "73560",       "73562",
       "73564",       "73565",       "73590", "73592",       "73600",       "73610",
       "73620",       "73630",       "73650", "73660",       "74000",       "74010",
       "74020",       "74210",       "74220", "74240",       "74241",       "74245",
       "74246",       "74247",       "74249", "74250",       "74251",       "74280",
       "74320",       "74328",       "74350", "75658",       "75810",       "75970",
       "75978",       "75989",       "76005", "76006",       "76010",       "76080",
       "76095",       "76096",       "76098", "76100",       "76101",       "76102",
       "76140",       "76499",       "82370", "75956",       "75957",       "75958",
       "75959",       "77421");

%let rxinj =  %STR('J1790' ,'J1710' ,'J1840' ,'J1835' ,'J1817' ,'J1815' ,'J1890' ,'J1800',
                   'J1931' ,'J1785' ,'J1756' ,'J1750' ,'J1742' ,'J1730' ,'J2185' ,'J1810',
                   'J1990' ,'J2950' ,'J2175' ,'J2150' ,'J2060' ,'J2020' ,'J1885' ,'J2001',
                   'J1700' ,'J1980' ,'J1960' ,'J1956' ,'J1955' ,'J1950' ,'J1940' ,'J2010',
                   'J1450' ,'J1720' ,'J1480' ,'J1470' ,'J1460' ,'J1457' ,'J1500' ,'J1452',
                   'J1510' ,'J1436' ,'J1435' ,'J1410' ,'J1390' ,'J1380' ,'J1364' ,'J1455',
                   'J1590' ,'J1670' ,'J1644' ,'J1642' ,'J1631' ,'J1630' ,'J1490' ,'J1600',
                   'J2210' ,'J1580' ,'J1560' ,'J1550' ,'J1540' ,'J1530' ,'J1520' ,'J1610',
                   'J2690' ,'J2560' ,'J2760' ,'J2730' ,'J2725' ,'J2720' ,'J2770' ,'J2700',
                   'J2780' ,'J2680' ,'J2675' ,'J2670' ,'J2650' ,'J2597' ,'J2180' ,'J2710',
                   'J2800' ,'J2930' ,'J2920' ,'J2916' ,'J2912' ,'J2910' ,'J2765' ,'J2810',
                   'J2550' ,'J2795' ,'J2794' ,'S0198' ,'J2790' ,'90378' ,'J2783' ,'J2820',
                   'J2300' ,'J2590' ,'J2353' ,'J2324' ,'J2322' ,'J2321' ,'J2355' ,'J2310',
                   'J2357' ,'J2280' ,'J2275' ,'J2271' ,'J2270' ,'J2260' ,'J2250' ,'J2320',
                   'J2460' ,'J2543' ,'J2540' ,'J2515' ,'J2510' ,'J2505' ,'J2354' ,'J2469',
                   'J1327' ,'J2440' ,'J2430' ,'J2410' ,'J2400' ,'J2370' ,'J2360' ,'J2501',
                   'J0360' ,'J0288' ,'J0470' ,'J0460' ,'J0456' ,'J0395' ,'J0476' ,'J0380',
                   'J0500' ,'J0350' ,'J0330' ,'J0300' ,'J0295' ,'J0290' ,'J1335' ,'J0390',
                   'J0570' ,'J0600' ,'J0595' ,'J0592' ,'J0587' ,'J0585' ,'J0475' ,'J0580',
                   'J0287' ,'J0560' ,'J0550' ,'J0540' ,'J0530' ,'J0520' ,'J0515' ,'J0583',
                   'C9212' ,'J0289' ,'C9439' ,'C9437' ,'C9436' ,'C9435' ,'J0128' ,'C9218',
                   'J0130' ,'C9211' ,'C9205' ,'C9203' ,'C9202' ,'C9121' ,'90379' ,'C9220',
                   'J0205' ,'J0285' ,'J0282' ,'J0280' ,'J0275' ,'J0256' ,'J0120' ,'J0207',
                   'J0630' ,'J0200' ,'J0190' ,'J0180' ,'J0170' ,'J0152' ,'J0150' ,'J0210',
                   'J1055' ,'J0610' ,'J1100' ,'J1094' ,'J1080' ,'J1070' ,'J1120' ,'J1056',
                   'J1160' ,'J1051' ,'J1040' ,'J1030' ,'J1020' ,'J1000' ,'J0970' ,'J1060',
                   'J1212' ,'J2792' ,'J1320' ,'J1270' ,'J1250' ,'J1245' ,'J1110' ,'J1230',
                   'J0895' ,'J1205' ,'J1200' ,'J1190' ,'J1180' ,'J1170' ,'J1165' ,'J1240',
                   'J0692' ,'J0706' ,'J0704' ,'J0702' ,'J0698' ,'J0697' ,'J0945' ,'J0694',
                   'J0715' ,'J0690' ,'J0670' ,'J0640' ,'J0637' ,'J0636' ,'J1330' ,'J0696',
                   'J0745' ,'J0620' ,'J0878' ,'J0850' ,'J0835' ,'J0800' ,'J0780' ,'J0710',
                   'J0760' ,'J0713' ,'J0744' ,'J0743' ,'J0740' ,'J0735' ,'J0720' ,'J0900',
                   'J0770' ,'S0161' ,'J8999' ,'S0171' ,'S0168' ,'S0167' ,'S0166' ,'S0164',
                   'S0162' ,'J2788' ,'J9035' ,'J7525' ,'J9041' ,'S0160' ,'S0159' ,'J9055',
                   'S0158' ,'S0146' ,'S0145' ,'J7330' ,'J9031' ,'J7507' ,'J7340' ,'J7342',
                   'J7343' ,'J7344' ,'J7350' ,'J7500' ,'J7501' ,'J7502' ,'J8499' ,'J7506',
                   'J7599' ,'J7509' ,'S0195' ,'J7510' ,'J7513' ,'J7516' ,'J7518' ,'J7520',
                   'S0118' ,'J7505' ,'Q2005' ,'Q2017' ,'Q2014' ,'Q2013' ,'Q2012' ,'Q2011',
                   'Q2009' ,'Q2008' ,'J2993' ,'Q2006' ,'Q2021' ,'Q2004' ,'Q2003' ,'Q2002',
                   'P9047' ,'P9046' ,'P9045' ,'P9041' ,'J9305' ,'Q2007' ,'Q9943' ,'S0116',
                   'S0093' ,'S0092' ,'S0080' ,'S0072' ,'S0016' ,'Q9957' ,'Q9956' ,'Q2019',
                   'Q9944' ,'Q2020' ,'Q9942' ,'Q9941' ,'Q4079' ,'Q4077' ,'Q4076' ,'Q4075',
                   'Q4054' ,'J7515' ,'Q9955' ,'J3465' ,'J3364' ,'J3365' ,'J3370' ,'J3396',
                   'J3400' ,'J3410' ,'J3411' ,'J3415' ,'J3420' ,'J3570' ,'S0196' ,'J3320',
                   'J3470' ,'J3475' ,'J3105' ,'J3480' ,'J3430' ,'J3486' ,'J3487' ,'J3490',
                   'J3520' ,'J7517' ,'J3260' ,'J3110' ,'J3120' ,'J3130' ,'J3100' ,'J3140',
                   'J3150' ,'J3230' ,'J3240' ,'J3246' ,'J3360' ,'J3250' ,'J3350' ,'J3265',
                   'J3010' ,'J3280' ,'J3301' ,'J3302' ,'J3303' ,'J3305' ,'J3310' ,'J3315',
                   'J3485' ,'J3070' ,'J2997' ,'J7300' ,'J7302' ,'J2995' ,'J7303' ,'J3590',
                   'J7304' ,'J7130' ,'J7120' ,'J7110' ,'J7100' ,'J7070' ,'J7308' ,'J7060',
                   'J3000' ,'J7030' ,'J7040' ,'J7042' ,'J7317' ,'J7051' ,'J7050' ,'J7310',
                   'J1645' ,'J1652' ,'J1650' ,'J1655' ,'J1626' ,'J2405' ,'J3030' ,'J1260',
                   'J1570' ,'Q0137' ,'Q4055' ,'J0880' ,'Q0136' ,'J1441' ,'J1440' ,'J2941',
                   'J2940' ,'J7195' ,'J7197' ,'J7193' ,'J7198' ,'Q0187' ,'J7199' ,'J7192',
                   'J7191' ,'J7194' ,'J7190' ,'J9212' ,'J9213' ,'J9214' ,'J7511' ,'J1850',
                   'J7504' ,'J1565' ,'J1564' ,'J1563' ,'J0270' ,'J0725' ,'Q2018' ,'S0126',
                   'S0128' ,'S0132' ,'J1620' ,'J9218' ,'S0122' ,'J1825' ,'Q3025' ,'Q3026',
                   'J1595' ,'J1830' ,'J7320' ,'J0215' ,'J1325' ,'S0114' ,'J0135' ,'J1438',
                   'J1745' ,'S0107' ,'C9003' ,'J9375' ,'J9380' ,'J9390' ,'J9395' ,'J9600',
                   'J9999' ,'J9370' ,'J9080' ,'J9130' ,'J9181' ,'J9095' ,'J9096' ,'J9097',
                   'J9098' ,'J9100' ,'J9093' ,'J9120' ,'J9092' ,'J9140' ,'J9150' ,'J9160',
                   'J9360' ,'J9170' ,'J9178' ,'J9110' ,'J9050' ,'J9000' ,'J9001' ,'J9010',
                   'J9015' ,'J9017' ,'J9020' ,'J9094' ,'J9045' ,'J9165' ,'J9060' ,'J9062',
                   'J9065' ,'J9070' ,'J9090' ,'J9091' ,'J9040' ,'J9293' ,'J9260' ,'J9151',
                   'J9265' ,'J9266' ,'J9268' ,'J9270' ,'J9280' ,'J9182' ,'J9291' ,'J9250',
                   'J9300' ,'J9310' ,'J9320' ,'J9340' ,'J9350' ,'J9355' ,'J9357' ,'J9290',
                   'J9211' ,'J9185' ,'J9190' ,'J9200' ,'J9201' ,'J9202' ,'J9206' ,'J9263',
                   'J9209' ,'J9215' ,'J9216' ,'J9217' ,'J9219' ,'J9230' ,'J9245' ,'J9208',
                   'J0881','J1567','J1566','J9264','J0885');

%put lablo   =&lablo;
%put labhi   =&labhi;

%put vaclo   =&vaclo;
%put vachi   =&vachi;
%put entlo   =&entlo;
%put enthi   =&enthi;
%put carlo   =&carlo;
%put carhi   =&carhi;
%put allimmlo=&allimmlo;
%put allimmhi=&allimmhi;
%put ptlo    =&ptlo;
%put pthi    =&pthi;
%put pullo  =&pullo;
%put pulhi  =&pulhi;
%put chemolo=&chemolo;
%put chemohi=&chemohi;
%put ovcds  =&ovcds;
%put ovpvcds=&ovpvcds;
%put ovelcds=&ovelcds;
%put pcpcds=&pcpcds;
%put xray =&xray;
%put rxinj =&rxinj;


/************************************************************************
*                                                                       *
* Step 1 - Create visit key for Office Visits                           *
*                                                                       *
************************************************************************/
PROC SQL;
  create table work.ov_key as
  select mbr_num,
         svc_dt,
         src_sys_prov_id,
         trim(mbr_num) || trim(left(put(svc_dt, mmddyy8.))) || trim(src_sys_prov_id) as visit_key

    from work.cp_e_claim

   where (
		 msc_major_categ in ('04')                  and
         confmt_ind ne 'Y'                          and
         /*msc_subminor_categ in ('122', '127','195','207') and*/
         hcfa_svc_loc_cd in ('11')
		 ) OR Virtual_IND = 'Y'
      ;
QUIT;

proc sort data=work.ov_key nodupkey;
   by mbr_num svc_dt src_sys_prov_id visit_key;
run;


/************************************************************************
*                                                                       *
* STEP 2A.Select OV Claim data -- have to break                         *
* into steps to avoid cartesian product error                           *
************************************************************************/
PROC SQL;
   create table work.ov_detail as
   select a.svc_date,
          a.svc_dt_yr_mth as svc_yr_mth,
          a.mbr_num,
          a.src_sys_prov_id,
          a.msc_major_categ,
          a.msc_minor_categ,
          a.msc_subminor_categ,
          a.confmt_ind,
		a.Testing_IND,
		a.Diagnosis_IND,
          
          CASE when a.nt_clm_cd = 'O' then 'N'
               else 'Y'
          END as in_network_ind,
                     
          a.nt_clm_cd,
          a.proc_cd,
		  a.diag_cd1,a.Diagnosis_IND,
          a.proc_ty,
          a.svc_prov_ty,
          a.svc_prov_spec_cd,
          d.pcp_typ,
             
          case   when msc_subminor_categ in (&ovcds)   then  1
                 when msc_subminor_categ in (&ovpvcds) then  1
                 when msc_subminor_categ in (&ovelcds) then  1

                 else 2
          end as order4pcp,

          case   when msc_subminor_categ in (&ovcds)   then  "STND"
                 when msc_subminor_categ in (&ovpvcds) then  "PREV"
                 when msc_subminor_categ in (&ovelcds) then  "ELEC"

                 else "NA"
          end as ov_type_categ_detail length=4,

          case when a.msc_subminor_categ in (&ovcds)      then 'OVEM_STND'
               when a.msc_subminor_categ in (&ovpvcds)    then 'OVEM_PREV'
               when a.msc_subminor_categ in (&ovelcds)    then 'OVEM_ELEC'
               when  (&lablo <= a.proc_cd <= &labhi) or
                      a.proc_cd in ('36415')              then 'LAB'
               when a.proc_cd not in ('36415') and
                    a.msc_subminor_categ in ('520','208') then 'SURG'
               when a.proc_cd in (&xray)                  then 'XRAY'
               when a.proc_cd in (&rxinj)                 then 'RXINJ'
               when a.proc_ty in ('CP','1') and
                    (&vaclo <= a.proc_cd <= &vachi)       then 'VACCINE'
               when a.proc_ty in ('CP','1') and
                    (&carlo <= a.proc_cd <= &carhi)       then 'CARDIO'
               when a.proc_ty in ('CP','1') and
                    (&ptlo <= a.proc_cd <= &pthi)          then 'PT'
               when a.proc_ty in ('CP','1') and
                    (&pullo <= a.proc_cd <= &pulhi)       then 'PULMONARY'
               when a.proc_ty in ('CP','1') and
                    (&allimmlo <= a.proc_cd <= &allimmhi) then 'ALLGY-IMM'
               when a.proc_ty in ('CP','1') and
                    (&entlo <= a.proc_cd <= &enthi)       then 'ENT'
               when a.proc_ty in ('CP','1') and
                    (&chemolo <= a.proc_cd <= &chemohi)   then 'CHEMO'

              else  'NA'
          end as ov_line_categ length=12,

          a.Virtual_IND,

          case when b.ov_complxty_cd = ' ' then 'Z'
               else b.ov_complxty_cd
          end as ov_complxty_cd length=2,

          b.patient_type_cd,

          c.visit_key,

          case when b.patient_type_cd = ' ' then 'Z'
               else b.patient_type_cd
          end as patient_type_detail length=1,

          sum(a.svc_unit_cnt)     as svc_unit_cnt,
          sum(a.consdr_chrg_amt)  as consdr_chrg_amt, 
          sum(a.ccf_pay_amt)      as ccf_pay_amt,
          sum(a.ccf_cost_shr_amt) as ccf_cost_shr_amt,
          sum(a.elgbl_chrg_amt)   as elgbl_chrg_amt

    from  work.cp_e_claim      a
          left join               
          cr_ref.ov_proc_cd_mp    b
                                  
    on    a.proc_cd = b.proc_cd   
          inner join              
          work.ov_key             c

    on    a.mbr_num = c.mbr_num and a.svc_dt = c.svc_dt and
          a.src_sys_prov_id = c.src_sys_prov_id
          
          left join
          cr_ref.provider_spec_cd d      

    on    a.svc_prov_spec_cd = d.cpf_specialty_cd

 group by a.svc_date,
          svc_yr_mth,
          a.mbr_num,
          a.src_sys_prov_id,
          a.msc_major_categ,
          a.msc_minor_categ,
          a.msc_subminor_categ,
          a.confmt_ind,
		a.Testing_IND,
		a.Diagnosis_IND,
          calculated in_network_ind,
          a.nt_clm_cd,
          a.proc_cd,
		  a.diag_cd1,a.Diagnosis_IND,
          a.proc_ty,
          a.svc_prov_ty,
          a.svc_prov_spec_cd,
          pcp_typ,
          order4pcp,
          ov_type_categ_detail,
          ov_line_categ,
          a.Virtual_IND,
          calculated ov_complxty_cd,
          b.patient_type_cd,
          c.visit_key,
          patient_type_detail

 having   svc_unit_cnt   ^= 0  and
          elgbl_chrg_amt ^= 0

 order by c.visit_key,
          order4pcp,
          svc_unit_cnt descending,
          elgbl_chrg_amt descending,
          a.proc_cd
;
QUIT;


/************************************************************************
*                                                                       *
* Step 3a.                                                              *
* Since the data has been ordered appropriately, select the first.      *
* visit_cnt and output patient_typ_detail,pcp_type and ov_type_categ    *
*                                                                       *
************************************************************************/
data work.cp_first_visit(keep=visit_key diag_cd1 proc_cd patient_type fst_pcp_type ov_type_categ);

  length patient_type $1 ov_type_categ $4 fst_pcp_type $3;

  set work.ov_detail;

  by visit_key;

  if first.visit_key then do;
     patient_type    = patient_type_detail;
     fst_pcp_type    = pcp_typ;
     ov_type_categ   = ov_type_categ_detail;

     output;
  end;

run;

/************************************************************************
*                                                                       *
* Step 3b.                                                              *
* Use mbr_key to join the fields back to the work dataset so that       *
* the detail records by member key will have the same values as the     *
* first.mbr_key                                                         *
*                                                                       *
************************************************************************/
PROC SQL;
   create table work.ov_detail_visit as
   select a.*,
          b.patient_type,
          b.fst_pcp_type,
          b.ov_type_categ

   from   work.ov_detail    a
          left join
          work.cp_first_visit  b

   on     a.visit_key=b.visit_key
  ;
QUIT;

/************************************************************************
*                                                                       *
* Step 3c.                                                              *
* Use mbr_num join to datasrc.cp_member to pick up cat_ind              *
*                                                                       *
************************************************************************/


/************************************************************************
*                                                                       *
* Step 4                                                                *
* apply calculations -- set adjustment factor -- apply visit_cnt        *
*                                                                       *
************************************************************************/
data work.ov_detail_matcalc;

  ATTRIB
     mbr_num                          length=$15   label='MBR_NUM'                format=$15.
     svc_date                         length=8     label='svc_date'               format=yymmdd10.
     svc_yr_mth                       length=$6    label='svc_yr_mth'
     ov_type_categ                    length=$6    label='ov_type_categ'
     fst_pcp_type                     length=$3    label='fst_pcp_type'
     patient_type                     length=$1    label='patient_type'
     msc_subminor_categ               length=$3    label='msc_subminor_categ'
     confmt_ind                       length=$1    label='confmt_ind' 
     svc_prov_spec_cd                 length=$2    label='SVC_PROV_SPEC_CD'        format=$2.
     ov_line_categ                    length=$12   label='ov_line_categ'
     ov_complxty_cd                   length=$2    label='ov_complxty_cd'
     in_network_ind                   length=$1    label='in_network_ind'          format=$1.
     mat_plan_amt                     length=8     label='mat_plan_amt'
     consdr_chrg_amt                  length=8     label='consdr_chrg_amt'         format=10.
     ccf_mat_paid_amt                 length=8     label='ccf_mat_paid_amt'
     ccf_mat_cost_shr_amt             length=8     label='ccf_mat_cost_shr_amt'
     mat_svc_cnt                      length=8     label='mat_svc_cnt'             format=10.
     mat_visit_cnt                    length=8     label='mat_visit_cnt'           format=10.
     mat_pcp_off_visit_cnt            length=8     label='mat_pcp_off_visit_cnt'   format=10.
     mat_spc_off_visit_cnt            length=8     label='mat_spc_off_visit_cnt'   format=10.
     ;

    set work.ov_detail_visit;

    by visit_key;

    if first.visit_key then do;
            visit_cnt = 1;
    end;

    else do;
            visit_cnt = 0;
    end;

   /************************************************************************
   *                                                                       *
   * Initialize Columns                                                    *
   *                                                                       *
   ************************************************************************/

     adjust_factor    = 1;

   /************************************************************************
   *                                                                       *
   * Create Financials and Summarize                                       *
   *                                                                       *
   ************************************************************************/

   ccf_mat_paid_amt     = ccf_pay_amt/adjust_factor;
   ccf_mat_cost_shr_amt = ccf_cost_shr_amt/adjust_factor;
   mat_plan_amt         = ccf_mat_paid_amt + ccf_mat_cost_shr_amt;
   mat_svc_cnt          = svc_unit_cnt/adjust_factor;
   mat_visit_cnt        = visit_cnt/adjust_factor;

   if fst_pcp_type = 'PCP' and visit_cnt=1 then do;
       mat_pcp_off_visit_cnt=mat_visit_cnt;
   end;

   else do;
       mat_pcp_off_visit_cnt=0;
   end;

   if fst_pcp_type = 'SPC' and visit_cnt=1 then do;
        mat_spc_off_visit_cnt=mat_visit_cnt;
   end;

   else do;
       mat_spc_off_visit_cnt=0;
   end;

   if mat_plan_amt          = . then mat_plan_amt          =0;
   if ccf_mat_paid_amt      = . then ccf_mat_paid_amt      =0;
   if ccf_mat_cost_shr_amt  = . then ccf_mat_cost_shr_amt  =0;
   if mat_svc_cnt           = . then mat_svc_cnt           =0;
   if mat_pcp_off_visit_cnt = . then mat_pcp_off_visit_cnt =0;
   if mat_spc_off_visit_cnt = . then mat_spc_off_visit_cnt =0;
   if mat_visit_cnt         = . then mat_visit_cnt         =0;

   if ov_type_categ in ("STND","ELEC","PREV") then output;
run;

/************************************************************************
*                                                                       *
* Step 5  PROC SQL step (keep only required variables)                  *
*         summarize output                                              *
************************************************************************/
PROC SQL;
   create table work.cp_ov as
   select 'I'   as rptng_chnl_cd,
          'MED' as rptng_prodt_categ_cd,
          mbr_num,
          svc_date,
          svc_yr_mth,
          ov_type_categ,
          fst_pcp_type,
          patient_type,
          msc_subminor_categ,Virtual_IND,
          confmt_ind,
          svc_prov_spec_cd,
          ov_line_categ,
          ov_complxty_cd,
          in_network_ind,
          proc_cd,
          diag_cd1,
		Testing_IND,Diagnosis_IND,
          
          sum(consdr_chrg_amt)       as consdr_chrg_amt,          
          sum(mat_plan_amt)          as mat_plan_amt,
          sum(ccf_mat_paid_amt)      as ccf_mat_paid_amt,
          sum(ccf_mat_cost_shr_amt)  as ccf_mat_cost_shr_amt,
          sum(mat_svc_cnt)           as mat_svc_cnt,
          sum(mat_pcp_off_visit_cnt) as mat_pcp_off_visit_cnt,
          sum(mat_spc_off_visit_cnt) as mat_spc_off_visit_cnt,
          sum(mat_visit_cnt)         as mat_visit_cnt

     from work.ov_detail_matcalc

 group by rptng_chnl_cd,
          rptng_prodt_categ_cd,
          mbr_num,
          svc_date,
          svc_yr_mth,
          ov_type_categ,
          fst_pcp_type,
          patient_type,
          msc_subminor_categ,Virtual_IND,
          confmt_ind,
          svc_prov_spec_cd,
          ov_line_categ,
          ov_complxty_cd,
          in_network_ind,
          proc_cd,
          diag_cd1,
		  Testing_IND,Diagnosis_IND
;
QUIT;


/*************************************************************************************
 *                                                                                    *
 * Create cp_ov_dim_agg                                                               *
 *                                                                                    *
 *************************************************************************************/

 PROC SQL;
   create table work.cp_ov_dim_agg as
   select rptng_chnl_cd,
          rptng_prodt_categ_cd,
          mbr_num,
          svc_date,
          ov_type_categ,
          fst_pcp_type,
          patient_type,
          svc_prov_spec_cd,
          ov_line_categ,
          ov_complxty_cd,
          in_network_ind,
		  proc_cd,
          diag_cd1,
		Testing_IND,
		Diagnosis_IND,
          
          sum(consdr_chrg_amt)       as consdr_chrg_amt,          
          sum(mat_plan_amt)          as mat_plan_amt,
          sum(ccf_mat_paid_amt)      as ccf_mat_paid_amt,
          sum(ccf_mat_cost_shr_amt)  as ccf_mat_cost_shr_amt,
          sum(mat_svc_cnt)           as mat_svc_cnt,
          sum(mat_pcp_off_visit_cnt) as mat_pcp_off_visit_cnt,
          sum(mat_spc_off_visit_cnt) as mat_spc_off_visit_cnt,
          sum(mat_visit_cnt)         as mat_visit_cnt

     from work.cp_ov

 group by rptng_chnl_cd,
          rptng_prodt_categ_cd,
          mbr_num,
          svc_date,
          ov_type_categ,
          fst_pcp_type,
          patient_type,
          svc_prov_spec_cd,
          ov_line_categ,
          ov_complxty_cd,
          in_network_ind,
		  proc_cd,
          diag_cd1,
		Testing_IND,
		Diagnosis_IND
;
QUIT;
**************************************************************************************************************************************************


/*******************************************************************************

NAME:        cp_op.sas
LAN PATH:    k:\hda_sys\apps\cap\extract_library\programs\data_source
UNIX PATH:   /apps/cap/extract_library/programs/data_source

DESCRIPTION:


DOCUMENTS:


NOTES:

 -
TASKS TO COMPLETE(remove as completed):

 - ...
UPDATED(Reason-Date):                                           DEVELOPER:

*******************************************************************************/

 /************************************************************************
 *                                                                       *
 * Create cp_op Data Source                                              *
 *                                                                       *
 *                                                                       *
 ************************************************************************/

/*************************************************************************
* Get required columns from extract to determine uc_steerable_ind
*************************************************************************/

proc sql;
   create table work.claim as

   select distinct
          mbr_num,
          claim_id,
          svc_date,
		  Virtual_IND,
          b.icd_diag_cd,
          b.uc_steerable_ind as diag_uc_steerable_ind length=1 format=$1.,

          CASE when (a.msc_major_categ = '02' and a.msc_minor_categ not in ('10','11')) and a.hcfa_svc_loc_cd = '20'            then 'Y'
               when (a.msc_major_categ = '02' and a.msc_minor_categ not in ('10','11')) and
                    ( a.proc_ty in ('4', '5', 'RV') and a.proc_cd in ('0456', '0516', '0526', '456', '516', '526') )            then 'Y'
               when (a.msc_major_categ = '02' and a.msc_minor_categ not in ('10','11')) and a.msc_subminor2_cat in('051','502') then 'Y'
               when (a.msc_major_categ = '02' and a.msc_minor_categ not in ('10','11')) and a.svc_prov_def_subty = 'UC'         then 'Y'
               else 'N'
          END  as uc_ind,

                  CASE when (calculated uc_ind = 'N' and a.msc_major_categ = '02' and a.msc_minor_categ = '07') then 'Y'
               else 'N'
          END  as er_ind,
        /*   
          coalesce(a.er_severity_lvl,-1) as er_severity_lvl,
        */   
        
          a.er_severity_lvl,
          
          CASE when (calculated er_ind = 'Y' and b.uc_steerable_ind = 'Y' and
                        (a.er_severity_lvl >=1 and a.er_severity_lvl <= 3)) then 'Y'
               when (calculated er_ind = 'Y')                               then 'N'
               else ''
          END  as derived_uc_steerable_ind,
			
          sum(plan_amt) as plan_amt

       from   work.cp_e_claim a

          LEFT JOIN

          cr_ref.icd_diagnosis b

   on     a.diag_cd1 = b.icd_diag_cd and
          a.icd_revsn_num = b.icd_revsn_num

   group by
          mbr_num,
          claim_id,
          svc_date,
		  Virtual_IND,
          b.icd_diag_cd,
          calculated uc_ind,
          calculated er_ind,
          a.er_severity_lvl,
          b.uc_steerable_ind,
          calculated derived_uc_steerable_ind
   ;
quit;

/*************************************************************************
* Detemine if Claim has any non-steerable rows and set entire claim to N
*************************************************************************/
proc sql;
   create table work.claim_fix_steerable_ind as

   select a.mbr_num,
          a.claim_id,
          a.svc_date,
		  a.Virtual_IND,
          a.icd_diag_cd,

          ifn(b.er_severity_lvl= -1,6,b.er_severity_lvl) as er_severity_lvl,

          sum(a.plan_amt)              as plan_amt

   from   work.claim a

          LEFT JOIN

         (
          select mbr_num,
                 claim_id,
                 icd_diag_cd,

                 max(er_severity_lvl) as  er_severity_lvl,

                 sum(plan_amt)   as plan_amt

          from   work.claim


          group by
                 mbr_num,
                 claim_id,
                 icd_diag_cd
       ) b

  on   (a.mbr_num = b.mbr_num and a.claim_id = b.claim_id and a.icd_diag_cd = b.icd_diag_cd)
  group by
        a.mbr_num,
        a.claim_id,
        a.icd_diag_cd,
        a.svc_date,
		a.Virtual_IND,
        b.er_severity_lvl
  ;
 quit;


 /************************************************************************
 *                                                                       *
 * Add mbr_elig_type to Claim data and derive svc_date                   *
 *                                                                       *
 ************************************************************************/
 PROC SQL;
   create view work.cp_op_mbrelig_vw as

   select a.rptng_chnl_cd,
          a.rptng_prodt_categ_cd,
          a.svc_date,
		  a.Virtual_IND,
          b.icd_diag_cd,
          a.svc_dt_yr_mth as svc_yr_mth,
          a.nt_clm_cd,
          a.msc_minor_categ,
          a.msc_major_categ,
          a.msc_subminor_categ,
          a.maj_diag_categ,
          a.icd_maj_grp_cd,
          a.icd_minr_grp_cd,
          a.mbr_num,
          a.membr_relshp_cd,
          a.age_band_cd,
          a.src_sys_prov_id,
          x.provider_zip_cd,
          x.uc_prov_id,
          x.uc_zip_cd,
          x.prov_st_cd,
          x.uc_st_cd,
		a.Testing_IND,
		a.Diagnosis_IND,
          weekday(a.svc_dt) as svc_day_of_week,
          a.svc_ty,
          uc_outlier_amt,
          b.uc_steerable_ind as diag_uc_steerable_ind length=1 format=$1.,

          CASE when (a.msc_major_categ = '02' and a.msc_minor_categ not in ('10','11')) and a.hcfa_svc_loc_cd = '20'            then 'Y'
               when (a.msc_major_categ = '02' and a.msc_minor_categ not in ('10','11')) and
                    ( a.proc_ty in ('4', '5', 'RV') and a.proc_cd in ('0456', '0516', '0526', '456', '516', '526') )            then 'Y'
               when (a.msc_major_categ = '02' and a.msc_minor_categ not in ('10','11')) and a.msc_subminor2_cat in('051','502') then 'Y'
               when (a.msc_major_categ = '02' and a.msc_minor_categ not in ('10','11')) and a.svc_prov_def_subty = 'UC'         then 'Y'
               else 'N'
          END  as uc_ind,

          CASE when (calculated uc_ind = 'N' and a.msc_major_categ = '02' and a.msc_minor_categ = '07') then 'Y'
               else 'N'
          END  as er_ind,

          cs.er_severity_lvl,

          CASE when (calculated er_ind = 'Y' and b.uc_steerable_ind = 'Y' and
                        (cs.er_severity_lvl >=1 and cs.er_severity_lvl <= 3)) then 'Y'
               when (calculated er_ind = 'Y')                           then 'N'
               else ''
          END  as derived_uc_steerable_ind,

          CASE when x.uc_min_distance = . and calculated er_ind ='Y' then 9999
               when x.uc_min_distance = . and calculated er_ind ='N' then -1
               else x.uc_min_distance
          END  as uc_min_distance,

          CASE when calculated er_ind = 'N' then
                    (trim(a.mbr_num) || trim(left(put(a.svc_dt, mmddyy10.))) || trim(a.msc_minor_categ))

               else (trim(a.mbr_num) || trim(a.claim_id) || trim(a.msc_minor_categ))

          END  as visit_key,

          sum(a.svc_unit_cnt)     as svc_unit_cnt,
          sum(a.elgbl_chrg_amt)   as elgbl_chrg_amt,
          sum(a.ccf_pay_amt)      as ccf_pay_amt,
          sum(a.ccf_cost_shr_amt) as ccf_cost_shr_amt,
          sum(a.cob_sav_amt)      as cob_sav_amt,
          sum(a.fund_amt)         as fund_amt,
          sum(a.pay_amt)          as pay_amt,
          sum(a.plan_amt)         as plan_amt

   from   work.cp_e_claim    a

          LEFT JOIN

          cr_ref.icd_diagnosis  b
   on     a.diag_cd1 = b.icd_diag_cd and
          a.icd_revsn_num = b.icd_revsn_num

          LEFT JOIN

          work.claim_fix_steerable_ind cs

   on     (a.mbr_num = cs.mbr_num and a.claim_id = cs.claim_id and a.svc_date = cs.svc_date and
           b.icd_diag_cd = cs.icd_diag_cd)

          LEFT JOIN

          crdm.&table_prefix.uc_min_distance x
   on     a.src_sys_prov_id = x.src_sys_prov_id

          CROSS JOIN

          cr_ref.uc_outlier d

   where  msc_major_categ = '02' and a.plan_amt ^= 0 

   group  by a.rptng_chnl_cd,
          a.rptng_prodt_categ_cd,
          a.mbr_num,
          a.svc_date,
		  a.Virtual_IND,
          b.icd_diag_cd,
          svc_yr_mth,
          a.nt_clm_cd,
          a.membr_relshp_cd,
          a.age_band_cd,
          a.msc_minor_categ,
          a.msc_major_categ,
          a.msc_subminor_categ,
          a.maj_diag_categ,
          a.icd_maj_grp_cd,
          a.icd_minr_grp_cd,
          a.src_sys_prov_id,
          x.provider_zip_cd,
          x.uc_prov_id,
          x.uc_zip_cd,
          x.prov_st_cd,
          x.uc_st_cd,
		a.Testing_IND,
		a.Diagnosis_IND,
          calculated uc_min_distance,
          svc_day_of_week,
          a.svc_ty,
          uc_outlier_amt,
          cs.er_severity_lvl,
          b.uc_steerable_ind,
          calculated uc_ind,
          calculated er_ind,
          calculated derived_uc_steerable_ind,
          calculated visit_key

   order  by calculated visit_key, svc_date, uc_ind descending, plan_amt descending

   ;
 QUIT;


 /************************************************************************
 *                                                                       *
 * Assign visit_cnt and Create Data Source                               *
 *                                                                       *
 ************************************************************************/

 DATA work.cp_op;

    ATTRIB
       membr_relshp_cd                  length=$1    label='membr_relshp_cd'
       fst_in_network_ind               length=$1    label='fst_in_network_ind'
       fst_maj_diag_cat                 length=$3    label='fst_maj_diag_cat'       format=$3.
       fst_icd_maj_grp_cd              length=$2     label='fst_icd_maj_grp_cd'
       fst_icd_minr_grp_cd             length=$3     label='fst_icd_minr_grp_cd'
       msc_subminor_categ               length=$3    label='MSC_SUBMINOR_CATEG'     format=$3.
       msc_minor_categ                  length=$2    label='MSC_MINOR_CATEG'        format=$2.
       msc_major_categ                  length=$2    label='MSC_MAJOR_CATEG'        format=$2.
       fst_msc_subminor_categ           length=$3    label='FST_MSC_SUBMINOR_CATEG' format=$3.
       fst_msc_minor_categ              length=$2    label='FST_MSC_MINOR_CATEG'    format=$2.
       maj_diag_categ                   length=$3    label='maj_diag_categ'         format=$3.
       icd_maj_grp_cd                   length=$2    label='icd_maj_grp_cd'
       icd_minr_grp_cd                  length=$3    label='icd_minr_grp_cd'
       svc_date                         length=8     label='svc_date'               format=yymmdd10.
	   
		  Virtual_IND length=$1
       icd_diag_cd                      length=$10                                  format=$10.
       mbr_num                          length=$15   label='MBR_NUM'                format=$15.
       svc_yr_mth                       length=$6    label='svc_yr_mth'
       ccf_mat_paid_amt                 length=8     label='ccf_mat_paid_amt'
       ccf_mat_cost_shr_amt             length=8     label='ccf_mat_cost_shr_amt'
       mat_plan_amt                     length=8     label='mat_plan_amt'
       mat_cob_sav_amt                  length=8     label='mat_cob_sav_amt'
       mat_fund_amt                     length=8     label='mat_fund_amt'
       mat_visit_cnt                    length=8     label='mat_visit_cnt'           format=10.
       mat_er_visit_cnt                 length=8     label='mat_er_visit_cnt'        format=10.
       pay_amt                          length=8     label='pay_amt'                 format=10.
       fund_amt                         length=8     label='fund_amt'                format=10.
       svc_day_of_week                  length=8     label='svc_day_of_week'      /* format=downame.  */

    ;

    set work.cp_op_mbrelig_vw;

    by visit_key;

    /************************************************************************
    *                                                                       *
    * RETAIN Variables                                                      *
    *                                                                       *
    ************************************************************************/

    RETAIN fst_in_network_ind
           fst_maj_diag_cat
           fst_icd_maj_grp_cd
           fst_icd_minr_grp_cd
           fst_msc_minor_categ
           fst_msc_subminor_categ
    ;

    /************************************************************************
    *                                                                       *
    * Initialize Columns                                                    *
    *                                                                       *
    ************************************************************************/


    adjust_factor    = 1;
    
    if first.visit_key = 1
      then do;
        fst_in_network_ind     = nt_clm_cd;
        fst_maj_diag_cat       = maj_diag_categ;
        fst_icd_maj_grp_cd     = icd_maj_grp_cd;
        fst_icd_minr_grp_cd    = icd_minr_grp_cd;
        fst_msc_subminor_categ = msc_subminor_categ;
        fst_msc_minor_categ    = msc_minor_categ;
        visit_cnt              = 1;

    end;

    else do;
        visit_cnt = 0;
    end;

    /************************************************************************
    *                                                                       *
    * set missing values to zero                                            *
    *                                                                       *
    ************************************************************************/

    if ccf_pay_amt      =. then ccf_pay_amt      = 0;
    if ccf_cost_shr_amt =. then ccf_cost_shr_amt = 0;

    /************************************************************************
    *                                                                       *
    * Create Financials and Summarize                                       *
    *                                                                       *
    ************************************************************************/

    
    mat_visit_cnt        = visit_cnt        / adjust_factor;
    ccf_mat_paid_amt     = ccf_pay_amt      / adjust_factor;
    ccf_mat_cost_shr_amt = ccf_cost_shr_amt / adjust_factor;
    mat_cob_sav_amt      = cob_sav_amt      / adjust_factor;
    mat_fund_amt         = fund_amt         / adjust_factor;

    mat_plan_amt         = ccf_mat_paid_amt + ccf_mat_cost_shr_amt;

    if er_ind = 'Y'  then mat_er_visit_cnt = mat_visit_cnt;
                     else mat_er_visit_cnt = 0;

    if uc_ind = 'Y' and (mat_plan_amt > uc_outlier_amt) then uc_outlier_ind = 'Y';
    else if uc_ind = 'Y' then uc_outlier_ind = 'N';
    else uc_outlier_ind = '';


RUN;

 /************************************************************************
 *                                                                       *
 * Create CP_OP Datasource                                               *
 *                                                                       *
 ************************************************************************/

 PROC SQL;
    create table work.cp_op as

    select rptng_chnl_cd,
           rptng_prodt_categ_cd,
           membr_relshp_cd,
           age_band_cd,
           fst_in_network_ind,
           fst_maj_diag_cat,
           fst_icd_maj_grp_cd        as icd_maj_grp_cd,
           fst_icd_minr_grp_cd       as icd_minr_grp_cd,
           fst_msc_subminor_categ    as msc_subminor_categ,
           fst_msc_minor_categ       as msc_minor_categ,
           svc_date,
           icd_diag_cd,
           mbr_num,
           svc_yr_mth,
           src_sys_prov_id,
           provider_zip_cd,
           uc_prov_id,
           uc_zip_cd,
           prov_st_cd,
           uc_st_cd,
           min(uc_min_distance) as uc_min_distance,
           svc_day_of_week,
           svc_ty,
           er_severity_lvl,
           er_ind,
           uc_ind,
		Testing_IND,
		Diagnosis_IND,
		   
		  Virtual_IND,
           diag_uc_steerable_ind,
           derived_uc_steerable_ind as uc_steerable_ind length=1 format=$1.,
           uc_outlier_ind,

           sum(ccf_mat_paid_amt)     as ccf_mat_paid_amt,
           sum(ccf_mat_cost_shr_amt) as ccf_mat_cost_shr_amt,
           sum(mat_plan_amt)         as mat_plan_amt,
           sum(mat_cob_sav_amt)      as mat_cob_sav_amt,
           sum(mat_fund_amt)         as mat_fund_amt,
           sum(mat_er_visit_cnt)     as mat_er_visit_cnt,
           sum(mat_visit_cnt)        as mat_visit_cnt,
           sum(pay_amt)              as pay_amt,
           sum(fund_amt)             as fund_amt

    from   work.cp_op

    group by rptng_chnl_cd,
             rptng_prodt_categ_cd,
             membr_relshp_cd,
             age_band_cd,
             fst_in_network_ind,
             fst_maj_diag_cat,
             fst_icd_maj_grp_cd,
             fst_icd_minr_grp_cd,
             fst_msc_subminor_categ,
             fst_msc_minor_categ,
             svc_date,
             icd_diag_cd,
             mbr_num,
             svc_yr_mth,
             src_sys_prov_id,
             provider_zip_cd,
             uc_prov_id,
             uc_zip_cd,
             prov_st_cd,
             uc_st_cd,
             svc_day_of_week,
             svc_ty,
             er_severity_lvl,
             er_ind,
             uc_ind,
		Testing_IND,
		Diagnosis_IND,
			 
		  Virtual_IND,
             diag_uc_steerable_ind,
             derived_uc_steerable_ind,
             uc_outlier_ind
    ;
 QUIT;


 /*************************************************************************************
 *                                                                                    *
 * Create OP Agg by Shared Dimensions                                                 *
 *                                                                                    *
 *************************************************************************************/

 PROC SQL;
  create table work.cp_op_dim_agg as
  select rptng_chnl_cd,
         rptng_prodt_categ_cd,
         membr_relshp_cd,
         fst_in_network_ind,
         fst_maj_diag_cat,
         icd_maj_grp_cd            as icd_maj_grp_cd,
         icd_minr_grp_cd           as icd_minr_grp_cd,
         msc_subminor_categ        as msc_subminor_categ,
         msc_minor_categ           as msc_minor_categ,
         svc_date,
         mbr_num,
         er_ind,
         uc_ind,
		Testing_IND,
		Diagnosis_IND,
		 
		  Virtual_IND,
         sum(ccf_mat_paid_amt)     as ccf_mat_paid_amt,
         sum(ccf_mat_cost_shr_amt) as ccf_mat_cost_shr_amt,
         sum(mat_plan_amt)         as mat_plan_amt,
         sum(mat_cob_sav_amt)      as mat_cob_sav_amt,
         sum(mat_fund_amt)         as mat_fund_amt,
         sum(mat_er_visit_cnt)     as mat_er_visit_cnt,
         sum(mat_visit_cnt)        as mat_visit_cnt

  from   work.cp_op
  group  by
         rptng_chnl_cd,
         rptng_prodt_categ_cd,
         membr_relshp_cd,
         fst_in_network_ind,
         fst_maj_diag_cat,
         icd_maj_grp_cd,
         icd_minr_grp_cd,
         msc_subminor_categ,
         msc_minor_categ,
         svc_date,
         mbr_num,
         er_ind,
		Testing_IND,
		Diagnosis_IND,
		 
		  Virtual_IND,
         uc_ind ;
 QUIT;

***************************************************************************************************************************************
/*******************************************************************************

NAME:        cp_ip.sas 
LAN PATH:    k:\hda_sys\apps\cap\extract_library\programs\data_source
UNIX PATH:   /apps/cap/extract_library/programs/data_source

DESCRIPTION:


DOCUMENTS:


NOTES:

 -
TASKS TO COMPLETE(remove as completed):

 - ...
UPDATED(Reason-Date):                                           DEVELOPER:

*******************************************************************************/

/**********************************************************
*                                                         *
* Define Routine                                          *
*                                                         *
**********************************************************/

%MACRO cp_ip;

/************************************************************************
*                                                                       *
* Create cp_ip Data Source                                              *
*                                                                       *
*                                                                       *
************************************************************************/

/************************************************************************
*                                                                       *
* COE Data                                                              *
*                                                                       *
************************************************************************/

PROC SQL;
 create table work.coe_condition_mp_vw as
 select coe_start_date,
        coe_end_date,
        drg_cd,
        category, 
        min(condition) as condition
 from   cr_ref.coe_condition_mp
 where  drg_cd ^in ('203','028','029','030') and
        drg_mthd_cd ='MS'
 group  by coe_start_date,
        coe_end_date,
        drg_cd,
        category;
QUIT;


/************************************************************************
*                                                                       *
* Admission Data                                                        *
* NOTE: We limit the data to just periods 1, -, 2                       *
*                                                                       *
************************************************************************/

PROC SQL;
 create table work.admission_coe as
 select a.svc_date,
        a.case_id,
        a.case_pd_dt,
        a.icd_maj_grp_cd,
        a.icd_minr_grp_cd,
        a.drg_cd,
        b.condition,
        c.cost_stars      as coe_cost_stars,
        c.quality_stars   as coe_quality_stars,
        c.value_index     as value_index,

        case when c.value_index >= 5 then 'Y'
             else 'N'
        end as coe_facility_ind,

        case when c.value_index = 0 then 'Y'
             else 'N'
        end as coe_exclude_from_dir_ind,

        d.prov_nm,
   %if %upcase("&table_prefix.") = "FA_" %then %do;
        substr(d.zip_cd,1,5) as prov_zip_cd,
   %end;
   %else %do;
        d.zip_cd as prov_zip_cd,
   %end;
        a.mbr_num,
        a.prncpl_diag_cd,
        a.sex_cd,
        a.src_sys_hosp_id,
        a.ms_drg_cd,
        a.icd_revsn_num,
		sum(a.ICU_DAYS_CNT) as ICU_DAYS_CNT,
        sum(a.hosp_days_cnt)     as hosp_days_cnt,
        sum(a.fa_elgbl_chrg_amt) as fa_elgbl_chrg_amt

 from  work.cp_e_admission     a
       left join
       work.coe_condition_mp_vw   b

 on    a.ms_drg_cd = b.drg_cd  and
       a.svc_date between b.coe_start_date and b.coe_end_date

       left join
       crdm.&table_prefix.coe_facility        c

 on    (
        a.src_sys_hosp_id = c.src_sys_hosp_id and 
        b.condition       = c.coe_condition   and
        a.svc_date between c.coe_start_date and c.coe_end_date
       )

       left join
       crdm.&table_prefix.provider_claim      d

 on    (a.src_sys_hosp_id=d.src_sys_prov_id)

 group by a.svc_date,
          a.case_id,
          a.case_pd_dt,
          a.icd_maj_grp_cd,
          a.icd_minr_grp_cd,
          a.drg_cd,
          b.condition,
          coe_cost_stars,
          coe_quality_stars,
          value_index,
          coe_facility_ind,
          coe_exclude_from_dir_ind,
          d.prov_nm,
          prov_zip_cd,
          a.mbr_num,
          a.prncpl_diag_cd,
          a.sex_cd,
          a.src_sys_hosp_id,
          a.ms_drg_cd,
          a.icd_revsn_num 

 order by a.case_id,
          a.case_pd_dt
;
QUIT;


DATA work.admission;
 set work.admission_coe;
 by case_id case_pd_dt;
 if last.case_id then output;
RUN;


proc sql;
   create table work.admission as
   select *,
          1 as mat_admit_cnt

   from work.admission
   ;
quit;

/************************************************************************
*                                                                       *
* IP Claim Data                                                         *
*                                                                       *
************************************************************************/

PROC SQL;
  create table work.ip_claim_ext as
  select  rptng_chnl_cd,
          rptng_prodt_categ_cd,
          svc_dt_yr_mth                     as svc_yr_mth,
          svc_date,
          mbr_num,
          midsu_base_nt_id,
          nt_clm_cd,
          case_id,
          icd_maj_grp_cd,
          icd_minr_grp_cd,
          icd_revsn_num,
		  mbr_age,
		  sex_cd,
		  Testing_IND,
		  Diagnosis_IND,
          sum(chrg_amt)                     as mat_chrg_amt,
          sum(cntrct_sav_amt)               as mat_cntrct_sav_amt,
          sum(non_covrd_amt)                as mat_non_covrd_amt,
          sum(cob_sav_amt)                  as mat_cob_sav_amt,
          round(sum(ccf_cost_shr_amt),0.01) as ccf_cost_shr_amt,
          sum(ccf_pay_amt)                  as ccf_pay_amt,
          sum(fund_amt)                     as mat_fund_amt,
          sum(pay_amt)                      as pay_amt,
          sum(fund_amt)                     as fund_amt

  from  work.cp_e_claim

  /************************************************************************
  *                                                                       *
  * IMPORTANT NOTE: For Inpatient Data we limit data to svc_periods       *
  * 1, Between, and 2.  This is to keep admissions that have money in     *
  * Period 1 from ending up in the PRE Period thereby not showing up in   *
  * in the BASE Period Reports. The IP Logic puts admission in earliest   *
  * Period it finds.                                                      *
  *                                                                       *
  ************************************************************************/

  where msc_major_categ = '01'

  group by rptng_chnl_cd,
           rptng_prodt_categ_cd,
           svc_yr_mth,
           svc_date,
           mbr_num,
           midsu_base_nt_id,
           nt_clm_cd,
           case_id,
           icd_maj_grp_cd,
           icd_minr_grp_cd,
           icd_revsn_num,
		   mbr_age,
		   sex_cd,
		  Testing_IND,
		  Diagnosis_IND

  order by svc_yr_mth,
           svc_date,
           mbr_num,
           midsu_base_nt_id,
           nt_clm_cd,
           case_id,
           ccf_pay_amt desc
 ;
 QUIT;

/************************************************************************
*                                                                       *
* Select the top icd major and minor for each admission                *
*                                                                       *
************************************************************************/
DATA work.ip_claim_top;
 set work.ip_claim_ext;
 by svc_yr_mth
    svc_date
    mbr_num
    midsu_base_nt_id
    nt_clm_cd
    case_id
    descending ccf_pay_amt;

 if first.case_id;
RUN;

PROC SQL;
 create table work.ip_claim as
 select a.rptng_chnl_cd,
        a.rptng_prodt_categ_cd,
        a.svc_yr_mth,
        a.svc_date,
        a.mbr_num,
        a.midsu_base_nt_id,
        a.nt_clm_cd,
        a.case_id,
		a.mbr_age,
		a.sex_cd,
        b.icd_maj_grp_cd,
        b.icd_minr_grp_cd,
        b.icd_revsn_num,
		a.Testing_IND,
		a.Diagnosis_IND,
        sum(a.mat_chrg_amt)       as mat_chrg_amt,
        sum(a.mat_cntrct_sav_amt) as mat_cntrct_sav_amt,
        sum(a.mat_non_covrd_amt)  as mat_non_covrd_amt,
        sum(a.mat_cob_sav_amt)    as mat_cob_sav_amt,
        sum(a.ccf_cost_shr_amt)   as ccf_cost_shr_amt,
        sum(a.ccf_pay_amt)        as ccf_pay_amt,
        sum(a.mat_fund_amt)       as mat_fund_amt,
        sum(a.pay_amt)            as pay_amt,
        sum(a.fund_amt)           as fund_amt

 from   work.ip_claim_ext a

        LEFT JOIN

        work.ip_claim_top b
        on a.svc_yr_mth       = b.svc_yr_mth and
           a.svc_date         = b.svc_date and
           a.mbr_num          = b.mbr_num and
           a.midsu_base_nt_id = b.midsu_base_nt_id and
           a.case_id          = b.case_id and
           a.icd_revsn_num    = b.icd_revsn_num and  
		   a.nt_clm_cd        = b.nt_clm_cd


 group  by a.rptng_chnl_cd,
        a.rptng_prodt_categ_cd,
        a.svc_yr_mth,
        a.svc_date,
        a.mbr_num,
        a.midsu_base_nt_id,
        a.nt_clm_cd,
        a.case_id,
		a.mbr_age,
		a.sex_cd,
        b.icd_maj_grp_cd,
        b.icd_minr_grp_cd,
        b.icd_revsn_num,
		a.Testing_IND,
		a.Diagnosis_IND 
 ;
QUIT;

/************************************************************************
*                                                                       *
* Join Admission to IP Claim Data                                       *
*                                                                       *
************************************************************************/
PROC SQL;
 create table work.cp_ip as
 select a.rptng_chnl_cd,
        a.rptng_prodt_categ_cd,
        a.svc_yr_mth,
        a.svc_date,
        a.mbr_num,
		a.mbr_age,
		a.sex_cd,
        coalesce(b.icd_maj_grp_cd, a.icd_maj_grp_cd)   as icd_maj_grp_cd,
        coalesce(b.icd_minr_grp_cd, a.icd_minr_grp_cd) as icd_minr_grp_cd,
        b.drg_cd,
        b.prncpl_diag_cd,
        b.coe_facility_ind,
        b.coe_exclude_from_dir_ind,
        b.condition                    as coe_condition,
        b.prov_nm,
        b.prov_zip_cd,
        b.ms_drg_cd,
        substr(a.midsu_base_nt_id,1,2) as prov_st_cd,
        a.nt_clm_cd,
        a.case_id,
        b.src_sys_hosp_id,
        b.mat_admit_cnt,
		b.ICU_DAYS_CNT                 as mat_icu_days_cnt,
        b.hosp_days_cnt                as mat_hosp_days_cnt,
        a.mat_chrg_amt,
        a.mat_cntrct_sav_amt,
        a.mat_non_covrd_amt,
        a.mat_cob_sav_amt,
        a.ccf_cost_shr_amt,
        a.ccf_pay_amt,
        a.mat_fund_amt,
        a.pay_amt,
        a.fund_amt,
		a.Testing_IND,
		a.Diagnosis_IND,
        coalesce(b.icd_revsn_num, a.icd_revsn_num) as icd_revsn_num 

 from  work.ip_claim  a left join
       work.admission b

 on    (a.case_id = b.case_id) and a.icd_revsn_num = b.icd_revsn_num 
;
QUIT;

/************************************************************************
*                                                                       *
* Sort data case_id/svc_date and Descending Charge Amounts              *
*                                                                       *
************************************************************************/

PROC SORT data=work.cp_ip;
 by case_id svc_date descending mat_chrg_amt;
RUN;

/************************************************************************
*                                                                       *
*                                                                       *
************************************************************************/
DATA work.cp_ip_util;
 set work.cp_ip;
 by case_id svc_date descending mat_chrg_amt;
  if mat_icu_days_cnt=.  then mat_icu_days_cnt =0;
  if mat_hosp_days_cnt=. then mat_hosp_days_cnt=0;
  if mat_admit_cnt    =. then mat_admit_cnt    =0;
  if first.case_id then do;
    fst_mat_icu_days_cnt =mat_icu_days_cnt;
    fst_mat_hosp_days_cnt=mat_hosp_days_cnt;
    fst_mat_admit_cnt    =mat_admit_cnt;
  end;
  else do;
    fst_mat_hosp_days_cnt=0;
    fst_mat_admit_cnt    =0;
  end;
  if mat_hosp_days_cnt    in(.,0) then do;
    mat_hosp_days_cnt     = 0;
    fst_mat_hosp_days_cnt = 0;
    drg_cd                = '';
    src_sys_hosp_id       = '';
    coe_facility_ind      = 'N';
    fst_mat_admit_cnt     = 0;
  end;
  if nt_clm_cd = 'O' then do;
     in_network_ind = 'N';
  end;
  else do;
     in_network_ind = 'Y';
  end;

  /************************************************************************
  *                                                                       *
  * Mature Financials                                                     *
  *                                                                       *
  ************************************************************************/
  
     adjust_factor = 1;

  mat_admit_cnt        = fst_mat_admit_cnt       / adjust_factor;
  mat_icu_days_cnt     = fst_mat_icu_days_cnt    / adjust_factor;
  mat_hosp_days_cnt    = fst_mat_hosp_days_cnt   / adjust_factor;
  mat_chrg_amt         = mat_chrg_amt            / adjust_factor;
  mat_cntrct_sav_amt   = mat_cntrct_sav_amt      / adjust_factor;
  mat_non_covrd_amt    = mat_non_covrd_amt       / adjust_factor;
  mat_cob_sav_amt      = mat_cob_sav_amt         / adjust_factor;
  ccf_mat_cost_shr_amt = ccf_cost_shr_amt        / adjust_factor;
  ccf_mat_paid_amt     = ccf_pay_amt             / adjust_factor;
  mat_fund_amt         = mat_fund_amt            / adjust_factor;

  mat_plan_amt         = ccf_mat_cost_shr_amt + ccf_mat_paid_amt;

RUN;

/**********************************************************************
*                                                                     *
* Set missing values to 0                                             *
*                                                                     *
**********************************************************************/

DATA work.cp_ip_util;
  SET work.cp_ip_util;
  if mat_chrg_amt          =. then mat_chrg_amt         = 0;
  if mat_cntrct_sav_amt    =. then mat_cntrct_sav_amt   = 0;
  if mat_non_covrd_amt     =. then mat_non_covrd_amt    = 0;
  if mat_cob_sav_amt       =. then mat_cob_sav_amt      = 0;
  if mat_plan_amt          =. then mat_plan_amt         = 0;
  if ccf_mat_cost_shr_amt  =. then ccf_mat_cost_shr_amt = 0;
  if ccf_mat_paid_amt      =. then ccf_mat_paid_amt     = 0;
  if mat_fund_amt          =. then mat_fund_amt         = 0;
  if pay_amt               =. then pay_amt              = 0;
  if fund_amt              =. then fund_amt             = 0;
RUN;

/**********************************************************************
*                                                                     *
* Create Data source                                                  *
*                                                                     *
**********************************************************************/
proc sql;
  create table work.cp_ip as
  select a.rptng_chnl_cd,
         a.rptng_prodt_categ_cd,
         a.mbr_num,
		 a.mbr_age,
		 a.sex_cd,
         a.svc_yr_mth,
         a.svc_date,
         a.icd_maj_grp_cd,
         a.icd_minr_grp_cd,
         a.drg_cd,
         a.prncpl_diag_cd,
         a.coe_facility_ind,
         a.in_network_ind,
         a.coe_condition,
         a.prov_nm,
         a.prov_st_cd,
         a.prov_zip_cd,
         a.src_sys_hosp_id,
         a.case_id,
         a.mat_admit_cnt,
         a.mat_hosp_days_cnt,
		 a.mat_icu_days_cnt,
         a.ms_drg_cd,
         a.icd_revsn_num,
		a.Testing_IND,
		a.Diagnosis_IND,
         sum(a.mat_chrg_amt)         as mat_chrg_amt,
         sum(a.mat_cntrct_sav_amt)   as mat_cntrct_sav_amt,
         sum(a.mat_non_covrd_amt)    as mat_non_covrd_amt,
         sum(a.mat_cob_sav_amt)      as mat_cob_sav_amt,
         sum(a.mat_plan_amt)         as mat_plan_amt,
         sum(a.ccf_mat_cost_shr_amt) as ccf_mat_cost_shr_amt,
         sum(a.ccf_mat_paid_amt)     as ccf_mat_paid_amt,
         sum(a.mat_fund_amt)         as mat_fund_amt,
         sum(a.pay_amt)              as pay_amt,
         sum(a.fund_amt)             as fund_amt

  from   work.cp_ip_util a
         left join
         work.cp_member b
  on     a.mbr_num=b.mbr_num
  group  by a.rptng_chnl_cd,
         a.rptng_prodt_categ_cd,
         a.mbr_num,
		 a.mbr_age,
		 a.sex_cd,
         a.svc_yr_mth,
         a.svc_date,
         a.icd_maj_grp_cd,
         a.icd_minr_grp_cd,
         a.drg_cd,
         a.prncpl_diag_cd,
         a.coe_facility_ind,
         a.in_network_ind,
         a.coe_condition,
         a.prov_nm,
         a.prov_st_cd,
         a.prov_zip_cd,
         a.src_sys_hosp_id,
         a.case_id,
         a.mat_admit_cnt,
         a.mat_hosp_days_cnt,
		 a.mat_icu_days_cnt,
         a.ms_drg_cd,
         a.icd_revsn_num ,
		a.Testing_IND,
		a.Diagnosis_IND
;
quit;

 /************************************************************************************
 *                                                                                   *
 * Create cp_ip_dim_agg                                                              *
 *                                                                                   *
 ************************************************************************************/

 proc sql;
  create table work.cp_ip_dim_agg as
  select rptng_chnl_cd,
         rptng_prodt_categ_cd,
         mbr_num,
		 mbr_age,
		 sex_cd,
         svc_date,
         drg_cd,
         prncpl_diag_cd,
         coe_facility_ind,
         in_network_ind,
         coe_condition,
         prov_nm,
         prov_st_cd,
         prov_zip_cd,
         src_sys_hosp_id,
         case_id,
         mat_admit_cnt,
         mat_hosp_days_cnt,
		 mat_icu_days_cnt,
         ms_drg_cd,
         icd_revsn_num,
		Testing_IND,
		Diagnosis_IND,
         sum(mat_chrg_amt)         as mat_chrg_amt,
         sum(mat_cntrct_sav_amt)   as mat_cntrct_sav_amt,
         sum(mat_non_covrd_amt)    as mat_non_covrd_amt,
         sum(mat_cob_sav_amt)      as mat_cob_sav_amt,
         sum(mat_plan_amt)         as mat_plan_amt,
         sum(ccf_mat_cost_shr_amt) as ccf_mat_cost_shr_amt,
         sum(ccf_mat_paid_amt)     as ccf_mat_paid_amt,
         sum(mat_fund_amt)         as mat_fund_amt

  from   work.cp_ip

  group  by rptng_chnl_cd,
         rptng_prodt_categ_cd,
         mbr_num,
		 mbr_age,
		 sex_cd,
         svc_date,
         drg_cd,
         prncpl_diag_cd,
         coe_facility_ind,
         in_network_ind,
         coe_condition,
         prov_nm,
         prov_st_cd,
         prov_zip_cd,
         src_sys_hosp_id,
         case_id,
         mat_admit_cnt,
         mat_hosp_days_cnt,
		 mat_icu_days_cnt,
         ms_drg_cd,
         icd_revsn_num ,
		Testing_IND,
		Diagnosis_IND
;
quit;


%MEND cp_ip;

/**********************************************************
*                                                         *
* CAll Routine                                            *
*                                                         *
**********************************************************/

%cp_ip;
***********************************************************************************************************************************
/*******************************************************************************

NAME:        cp_e_cap_pharmacy.sas
LAN PATH:    k:\hda_sys\apps\cp\extract_library\programs\extract
UNIX PATH:   /apps/cp/extract_library/programs/extract

DESCRIPTION:

DOCUMENTS:

NOTES:

UPDATED(Reason-Date):                                           DEVELOPER:
10/28/2010 14:23      Added 15 new fields for Cognos            KGates
11/04/2010 08:42      Added 7 new amt fields for Cognos         RLongman

*******************************************************************************/
%MACRO CP_E_CAP_PHARMACY;
	/********************************************************************************************
	 *                                                                                           *
	 * Extract Table                                                                             *
	 *                                                                                           *
 ********************************************************************************************/
	PROC SQL;
		CONNECT to db2 (db=&crdm_database uid=&user pwd=&pwd);
		create table work.cp_e_pharmacy as
			select *
				from   connection to db2
					(
				select
					P.mbr_num,
					P.incrd_yr_mth,
				CASE 
					when P.midsu_src_sys_cd = 'CS' then 'PHM'
					when P.midsu_src_sys_cd = 'RX' then
				CASE 
					when  P.acct_subty2 = 'PHARM' then 'PHM'
					else 'MED'
				END
					ELSE 'MED'
					END 
				as rptng_prodt_categ_cd,
					CASE 
						when P.incrd_yr_mth = '' then ''
						when P.incrd_yr_mth = '999912' then '12-31-9999'
						else date(      substr(P.incrd_yr_mth, 1,4) || '-' || substr(P.incrd_yr_mth, 5,2) || '-01' )  +1 month -
						day ( date(substr(P.incrd_yr_mth, 1,4) || '-' || substr(P.incrd_yr_mth, 5,2) || '-01' )) day
					END 
				as svc_date,
					P.midsu_client_id,
					P.midsu_src_sys_cd,
					P.midsu_acct_num,
					P.midsu_brnch_cd,
					P.ben_plan_cd,
					P.acct_subty2,
					P.base_prodt_cd,
					P.midsu_base_nt_id,
					P.base_hmo_cd,
					P.fill_dt,
					P.formulary_ind,
					P.mail_ordr_ind,
					P.msc_major_categ,
					P.msc_minor_categ,
					P.msc_subminor_categ,
					P.nt_clm_cd,
					P.nt_id,
					P.paid_dt,
					P.pd_yr_mth,
					P.prscb_prov_dea_num,
					P.argus_clnt_num,
					P.copay_ben_cd,
					P.ndc_genrc_mids_ind,
					P.nabp_pharmacy_num,
					P.drg_intract_cd,
					P.regn_cd,
				CASE 
					when P.nt_clm_cd = 'O' then 'N' 
					else 'Y'
				END 
			as in_network_ind,
				P.cust_num,
				P.ndc_num,
				P.rx_refll_num,
				SPFC.MINOR_GRP as spfc_thrpdc_clss,
				P.brand_cd,
				P.disp_ind,
				P.preauth_sfx,
				P.dup_thrpy_cd,
				P.dsge_rng_compl_ind,
				P.open_frmlry_ind,
				P.prefrd_ind,
				P.retail_mail,
				P.single_multi,
				P.episode_num,
				P.etg_num,
				sum(P.disp_fee_amt)                                         as disp_fee_amt       ,
				sum(P.act_mac_dif_amt)                                      as act_mac_dif_amt    ,
				sum(P.ingrd_cst_amt)                                        as ingrd_cst_amt      ,
				sum(P.fund_amt)                                             as fund_amt           ,
				sum(P.cost_shr_amt - P.fund_amt)                            as ccf_cost_shr_amt   ,
				sum(P.cost_shr_amt + P.rpt_tot_pd_amt)                      as rx_plan_amt        ,
				sum(P.awp_ingrd_cst_amt)                                    as awp_ingrd_cst_amt  ,
				sum(P.days_sup_qty)                                         as days_sup_qty       ,
				sum(P.presc_filld_cnt)                                      as presc_filld_cnt    ,
				sum(P.rtl_adj_presc_cnt)                                    as rtl_adj_presc_cnt  ,
				sum(P.rpt_ingrd_cst_amt)                                    as rpt_ingrd_cst_amt  ,
				sum(P.sales_tax_amt)                                        as sales_tax_amt      ,
				sum(P.metrc_qty)                                            as metrc_qty          ,
				sum(P.rpt_disp_fee_amt)                                     as rpt_disp_fee_amt   ,
				sum(P.dedct_appld_amt  )                                    as dedct_appld_amt    ,
				sum(P.copay_coins_amt  )                                    as copay_coins_amt    ,
				sum(P.rpt_tot_pd_amt + P.fund_amt)                            as ccf_rpt_tot_pd_amt ,
				sum(P.rpt_tot_pd_amt   )                                    as rpt_tot_pd_amt     ,
				sum(P.tot_pd_amt       )                                    as tot_pd_amt         ,
				sum(P.fsa_amt)                                              as fsa_amt            ,
				sum(P.hra_amt)                                              as hra_amt            ,
				sum(P.pharm_disp_fee_amt)                                   as pharm_disp_fee_amt ,
				sum(P.pharm_ingrd_cst_amt)                                  as pharm_ingrd_cst_amt,
				sum(P.pharm_pd_amt)                                         as pharm_pd_amt       ,
				sum(P.pharm_retl_sprd_amt)                                  as pharm_retl_sprd_amt,
				sum(P.pharm_sales_tax_amt)                                  as pharm_sales_tax_amt,
				%if "%upcase(&table_prefix.)" = "FA_"
				%then

			%do;
				sum(P.pnt_of_sale_rbt_amt)                           as pnt_of_sale_rbt_amt
			%end;
%else
	%do;
		0                                                  as pnt_of_sale_rbt_amt
	%end;

	from  appdm.&table_prefix.pharmacy P
		left join appdm.spfc SPFC
			on P.SPFC_THRPDC_CLSS = SPFC.SPFC_THRPDC_CLSS

		where P.pd_yr_mth between &Q_curr_pd_beg_yrmo. and &Q_curr_pd_end_yrmo.                    and
			P.msc_major_categ ^= '09'                                                            and
			&client_where


			/*           %if %length(&fa_account_in_list) > 0*/

	/*           %then %do;*/
	/*            and med_pharm_ind != 'Y'*/
	/*           %end;*/
	group by
		P.mbr_num,
		P.incrd_yr_mth,
	CASE 
		when P.midsu_src_sys_cd = 'CS' then 'PHM'
		when P.midsu_src_sys_cd = 'RX' then
	CASE 
		when  P.acct_subty2 = 'PHARM' then 'PHM'
		else 'MED'
	END
		ELSE 'MED'
		END,
	CASE 
		when P.incrd_yr_mth = '' then ''
		when P.incrd_yr_mth = '999912' then '12-31-9999'
		else date(      substr(P.incrd_yr_mth, 1,4) || '-' || substr(P.incrd_yr_mth, 5,2) || '-01' )  +1 month -
		day ( date(substr(P.incrd_yr_mth, 1,4) || '-' || substr(P.incrd_yr_mth, 5,2) || '-01' )) day
		END,
		P.midsu_client_id,
		P.midsu_src_sys_cd,
		P.midsu_acct_num,
		P.midsu_brnch_cd,
		P.ben_plan_cd,
		P.acct_subty2,
		P.base_prodt_cd,
		P.midsu_base_nt_id,
		P.base_hmo_cd,
		P.fill_dt,
		P.formulary_ind,
		P.mail_ordr_ind,
		P.msc_major_categ,
		P.msc_minor_categ,
		P.msc_subminor_categ,
		P.nt_clm_cd,
		P.nt_id,
		P.paid_dt,
		P.pd_yr_mth,
		P.prscb_prov_dea_num,
		P.argus_clnt_num,
		P.copay_ben_cd,
		P.ndc_genrc_mids_ind,
		P.nabp_pharmacy_num,
		P.drg_intract_cd,
		P.regn_cd,
	CASE 
		when P.nt_clm_cd = 'O' then 'N' 
		else 'Y' END,
		P.cust_num,
		P.ndc_num,
		P.rx_refll_num,
		SPFC.MINOR_GRP,
		P.brand_cd,
		P.disp_ind,
		P.preauth_sfx,
		P.dup_thrpy_cd,
		P.dsge_rng_compl_ind,
		P.open_frmlry_ind,
		P.prefrd_ind,
		P.retail_mail,
		P.single_multi,
		P.episode_num,
		P.etg_num
		);
	DISCONNECT from db2;
	QUIT;

	/************************************************************************
	 *                                                                       *
	 * Pull all diagnosed members from claim                                 *
	 *                                                                       *
 ************************************************************************/
	PROC SQL;
		create table work.covid_diag_claims as
			select mbr_num,
				min(svc_dt) as svc_dt,
				sum(plan_amt) as plan_amt

			from   work.cp_e_claim a
				where  diagnosis_ind = 'Y'
					group  by mbr_num

		;
	QUIT;

	/************************************************************************
	 *                                                                       *
	 * Pull all covid related drugs                                          *
	 *                                                                       *
 ************************************************************************/
	PROC SQL;
		create table work.covid_rx as
			select a.*, c.BRND_NM 

			from   work.cp_e_pharmacy a

			INNER JOIN

				crdm.covid_drug_list b
				on a.ndc_num = b.ndc
			LEFT JOIN
				crdm.ndc c
				on b.ndc = c.ndc_num
		;
	QUIT;

	/************************************************************************
	 *                                                                       *
	 * Join the two to limit the scripts to diagnosed customers              *
	 *                                                                       *
 ************************************************************************/
	PROC SQL;
		create table work.cp_covid_pharmacy as
			select  a.incrd_yr_mth                as svc_yr_mth         length=6     label='svc_yr_mth'                      ,
				a.svc_date                                          length=8     label='svc_date'        format=yymmdd10.,
				a.mbr_num                                           length=15    label='mbr_num'                         ,
				a.brnd_nm                                           length=50    label='brnd_nm'                         ,
				a.spfc_thrpdc_clss                                  length=40     label='spfc_thrpdc_clss'                ,

				sum(presc_filld_cnt)   as presc_filld_cnt         length=8     label='presc_filld_cnt'     format=13.  ,
				sum(rtl_adj_presc_cnt) as rtl_adj_presc_cnt       length=8     label='rtl_adj_presc_cnt'   format=13.  ,
				sum(ccf_rpt_tot_pd_amt)as ccf_tot_pd_amt          length=8     label='ccf_rpt_tot_pd_amt'              ,
				sum(ccf_cost_shr_amt)  as ccf_cost_shr_amt        length=8     label='ccf_cost_shr_amt'                ,
				sum(fund_amt)          as fund_amt                length=8     label='fund_amt'                        ,
				sum(rpt_disp_fee_amt)  as rpt_disp_fee_amt        length=8     label='rpt_disp_fee_amt'                ,
				sum(rpt_ingrd_cst_amt) as rpt_ingrd_cst_amt       length=8     label='rpt_ingrd_cst_amt'               ,
				sum(sales_tax_amt)     as sales_tax_amt           length=8     label='sales_tax_amt'                   ,
				sum(awp_ingrd_cst_amt) as awp_ingrd_cst_amt       length=8     label='awp_ingrd_cst_amt'               ,
				sum(rx_plan_amt)       as rx_plan_amt             length=8     label='rx_plan_amt'                     ,
				sum(rpt_tot_pd_amt)    as rpt_tot_pd_amt          length=8     label='rpt_tot_pd_amt'                  ,
				sum(ACT_MAC_DIF_AMT)   as ACT_MAC_DIF_AMT

			from   work.covid_rx a

			INNER JOIN

				work.covid_diag_claims b
				on a.mbr_num = b.mbr_num

			where  a.fill_dt >= b.svc_dt
				group  by a.incrd_yr_mth,
					a.svc_date,
					a.mbr_num,
					a.brnd_nm,
					a.spfc_thrpdc_clss
		;
	QUIT;

	/**********************************************************
	 *                                                         *
	 * End of Routine                                          *
	 *                                                         *
 **********************************************************/
ENDPROG:
%MEND CP_E_CAP_PHARMACY;

/**********************************************************
 *                                                         *
 * Call Routine                                            *
 *                                                         *
 **********************************************************/
%CP_E_CAP_PHARMACY;
*************************************************************************************************************************************************
/*******************************************************************************

NAME:        CP_financial.sas
LAN PATH:    k:\hda_sys\apps\cap\extract_library\programs\data_source
UNIX PATH:   /apps/cap/extract_library/programs/data_source

DESCRIPTION:


DOCUMENTS:


NOTES:

-
TASKS TO COMPLETE(remove as completed):

- ...
UPDATED(Reason-Date):                                           DEVELOPER:

*******************************************************************************/

/************************************************************************
 *                                                                       *
 * Create CP_Financial Data Source                                       *
 *                                                                       *
 * NOTES                                                                 *
 * The CASE for Completion Factors could use Performance Tuning          *
 * Do not need svc_unit_cnt in result make select discrete               *
 *                                                                       *
 ************************************************************************/
PROC SQL;
	create table work.cp_financial as

	select  rptng_chnl_cd,
		rptng_prodt_categ_cd,
		c.svc_yr_mth,
		c.svc_date ,
		c.paid_date                      length=8   label='PAID_DATE'          format=DATE9.,
		c.age_band_cd,
		c.sex_cd,
		c.membr_relshp_cd,
		c.source_cd,
		c.msc_major_categ,
		c.in_network_ind,
		c.risk_shr_logic_ind,
		c.partcptg_ind,
		c.sav_rsn_cd,
		c.rsn_not_covrd_cd,
		c.cat_claim_ind,
		c.Testing_IND,
		c.OTC_Testing_IND,
		c.Treatment_IND,
		c.Diagnosis_IND,
		c.Virtual_IND,
		c.Vaccinated_IND,
		c.msc_minor_categ,
		c.msc_subminor_categ,

		coalesce(c.fund_amt        ,0) as  fund_amt              format=dollar15.2,
		coalesce(c.pay_amt         ,0) as  pay_amt               format=dollar15.2,
		coalesce(c.ccf_pay_amt     ,0) as  ccf_pay_amt           format=dollar15.2,
		coalesce(c.copay_amt       ,0) as  copay_amt             format=dollar15.2,
		coalesce(c.deduct_amt      ,0) as  deduct_amt            format=dollar15.2,
		coalesce(c.coins_amt       ,0) as  coins_amt             format=dollar15.2,
		coalesce(c.cost_shr_amt    ,0) as  cost_shr_amt          format=dollar15.2,
		coalesce(c.ccf_cost_shr_amt,0) as  ccf_cost_shr_amt      format=dollar15.2,
		coalesce(c.plan_amt        ,0) as  plan_amt              format=dollar15.2,
		coalesce(c.cob_sav_amt     ,0) as  cob_sav_amt           format=dollar15.2,
		coalesce(c.elgbl_chrg_amt  ,0) as  elgbl_chrg_amt        format=dollar15.2,
		coalesce(c.non_covrd_amt   ,0) as  non_covrd_amt         format=dollar15.2,
		coalesce(c.chrg_amt        ,0) as  chrg_amt              format=dollar15.2,
		coalesce(c.cntrct_sav_amt  ,0) as  cntrct_sav_amt        format=dollar15.2,
		coalesce(c.consdr_chrg_amt ,0) as  consdr_chrg_amt       format=dollar15.2,
		coalesce(c.svc_unit_cnt    ,0) as  svc_unit_cnt          format=comma12.,

		coalesce(elgbl_chrg_amt,0)     as  mat_elgbl_chrg_amt format=dollar15.2,

		coalesce(non_covrd_amt,0) as mat_non_covrd_amt format=dollar15.2,

		coalesce(chrg_amt,0) as mat_chrg_amt format=dollar15.2,

		coalesce(cntrct_sav_amt,0) as mat_cntrct_sav_amt format=dollar15.2,

		coalesce(consdr_chrg_amt,0) as mat_consdr_chrg_amt format=dollar15.2,

		coalesce(ccf_pay_amt,0) as ccf_mat_paid_amt format=dollar15.2,

		coalesce(ccf_cost_shr_amt,0) as ccf_mat_cost_shr_amt format=dollar15.2,

		coalesce(cob_sav_amt,0) as mat_cob_sav_amt format=dollar15.2,

		coalesce(fund_amt,0) as mat_fund_amt format=dollar15.2,

		coalesce(svc_unit_cnt,0) as mat_svc_cnt format=comma12.,

		coalesce((calculated ccf_mat_paid_amt + calculated ccf_mat_cost_shr_amt),0) as mat_plan_amt format=dollar15.2,

		coalesce(deduct_amt + copay_amt - fund_amt,0)                               as ccf_deduct_copay_amt format=dollar15.2,
		coalesce(deduct_amt + copay_amt - fund_amt,0)                               as ccf_mat_deduct_copay_amt format=dollar15.2,

		coalesce(c.coins_amt       ,0) as  mat_coins_amt             format=dollar15.2

	from

		(

		/************************************************************************
		*                                                                       *
		* Get CLAIM Financials                                                  *
		*                                                                       *
		************************************************************************/

	select   a.svc_dt_yr_mth as svc_yr_mth,
		'I'   as rptng_chnl_cd,
		'MED' as rptng_prodt_categ_cd,
		a.svc_date,
		intnx('month',input(strip(a.gl_postg_pd_yr_mth),yymmn6.),0,'end')
	as paid_date,
		a.age_band_cd,
		a.sex_cd,
		a.membr_relshp_cd,
		'F' as source_cd,
		a.msc_major_categ,
		a.msc_minor_categ,
		a.msc_subminor_categ,
		a.in_network_ind,
		a.risk_shr_logic_ind,
		a.partcptg_ind,
		a.sav_rsn_cd,
		a.rsn_not_covrd_cd,
		a.cat_claim_ind ,
		a.Testing_IND,
		a.OTC_Testing_IND,
		a.Treatment_IND,
		a.Diagnosis_IND,
		a.Virtual_IND,
		a.Vaccinated_IND,
		sum(a.fund_amt)                  as fund_amt,
		sum(a.pay_amt)                   as pay_amt,
		sum(a.ccf_pay_amt)               as ccf_pay_amt,
		sum(a.copay_amt)                 as copay_amt,
		sum(a.deduct_amt)                as deduct_amt,
		sum(a.coins_amt)                 as coins_amt,
		sum(a.cost_shr_amt)              as cost_shr_amt,
		sum(a.ccf_cost_shr_amt)          as ccf_cost_shr_amt,
		sum(a.plan_amt)                  as plan_amt,
		sum(a.cob_sav_amt)               as cob_sav_amt,
		sum(a.elgbl_chrg_amt)            as elgbl_chrg_amt,
		sum(a.non_covrd_amt)             as non_covrd_amt,
		sum(a.chrg_amt)                  as chrg_amt,
		sum(cntrct_sav_amt)              as cntrct_sav_amt,
		sum(consdr_chrg_amt)             as consdr_chrg_amt,
		sum(a.svc_unit_cnt)              as svc_unit_cnt

	from     work.cp_e_claim  A
		LEFT JOIN
			work.cp_member  B

			on       A.mbr_num = B.mbr_num
		group by svc_yr_mth,
			svc_date,
			paid_date,
			age_band_cd,
			sex_cd,
			membr_relshp_cd,
			msc_major_categ,
			msc_minor_categ,
			msc_subminor_categ,
			in_network_ind,
			risk_shr_logic_ind,
			partcptg_ind,
			sav_rsn_cd,
			rsn_not_covrd_cd ,
			cat_claim_ind,
			Testing_IND,
			OTC_Testing_IND,
			Treatment_IND,
			Diagnosis_IND,
			Virtual_IND,
			Vaccinated_IND


			) C
	;
QUIT;

/************************************************************************************
 *                                                                                   *
 * Create Financial Agg by Shared Dimension                                          *
 *                                                                                   *
 ************************************************************************************/
PROC SQL;
	create table work.cp_financial_dim_agg as
		select rptng_chnl_cd,
			rptng_prodt_categ_cd,
			age_band_cd,
			sex_cd,
			membr_relshp_cd,
			msc_major_categ,
			msc_minor_categ,
			in_network_ind,
			source_cd,
			cat_claim_ind,
			risk_shr_logic_ind,
			partcptg_ind,
			Testing_IND,
			OTC_Testing_IND,
			Treatment_IND,
			Diagnosis_IND,
			Virtual_IND,
			Vaccinated_IND,
			sum(fund_amt)                        as  fund_amt                    format=dollar15.2,
			sum(pay_amt)                         as  pay_amt                     format=dollar15.2,
			sum(ccf_pay_amt)                     as  ccf_pay_amt                 format=dollar15.2,
			sum(copay_amt)                       as  copay_amt                   format=dollar15.2,
			sum(deduct_amt)                      as  deduct_amt                  format=dollar15.2,
			sum(coins_amt)                       as  coins_amt                   format=dollar15.2,
			sum(cost_shr_amt)                    as  cost_shr_amt                format=dollar15.2,
			sum(ccf_cost_shr_amt)                as  ccf_cost_shr_amt            format=dollar15.2,
			sum(plan_amt)                        as  plan_amt                    format=dollar15.2,
			sum(cob_sav_amt)                     as  cob_sav_amt                 format=dollar15.2,
			sum(elgbl_chrg_amt)                  as  elgbl_chrg_amt              format=dollar15.2,
			sum(non_covrd_amt)                   as  non_covrd_amt               format=dollar15.2,
			sum(chrg_amt)                        as  chrg_amt                    format=dollar15.2,
			sum(cntrct_sav_amt)                  as  cntrct_sav_amt              format=dollar15.2,
			sum(consdr_chrg_amt)                 as  consdr_chrg_amt             format=dollar15.2,
			sum(svc_unit_cnt)                    as  svc_unit_cnt                format=comma12.,
			sum(ccf_mat_paid_amt)                as  ccf_mat_paid_amt            format=dollar15.2,
			sum(ccf_mat_cost_shr_amt)            as  ccf_mat_cost_shr_amt        format=dollar15.2,
			sum(mat_cob_sav_amt)                 as  mat_cob_sav_amt             format=dollar15.2,
			sum(mat_fund_amt)                    as  mat_fund_amt                format=dollar15.2,
			sum(mat_svc_cnt)                     as  mat_svc_cnt                 format=comma12.,
			sum(mat_elgbl_chrg_amt)              as  mat_elgbl_chrg_amt          format=dollar15.2,
			sum(mat_non_covrd_amt)               as  mat_non_covrd_amt           format=dollar15.2,
			sum(mat_chrg_amt)                    as  mat_chrg_amt                format=dollar15.2,
			sum(mat_cntrct_sav_amt)              as  mat_cntrct_sav_amt          format=dollar15.2,
			sum(mat_consdr_chrg_amt)             as  mat_consdr_chrg_amt         format=dollar15.2,
			sum(mat_plan_amt)                    as  mat_plan_amt                format=dollar15.2,
			sum(ccf_mat_deduct_copay_amt)        as  ccf_mat_deduct_copay_amt    format=dollar15.2,
			sum(ccf_deduct_copay_amt)            as  ccf_deduct_copay_amt        format=dollar15.2,
			sum(mat_coins_amt)                   as  mat_coins_amt               format=dollar15.2

		from   work.cp_financial a
			group  by
				rptng_chnl_cd,
				rptng_prodt_categ_cd,
				age_band_cd,
				sex_cd,
				membr_relshp_cd,
				msc_major_categ,
				msc_minor_categ,
				in_network_ind,
				source_cd,
				risk_shr_logic_ind,
				partcptg_ind ,
				cat_claim_ind,
				Testing_IND,
				OTC_Testing_IND,
				Treatment_IND,
				Diagnosis_IND,
				Virtual_IND,
				Vaccinated_IND
	;
QUIT;
*******************************************************************************************************************************************
/*******************************************************************************

NAME:        cp_demographics.sas
LAN PATH:    k:\hda_sys\apps\cap\extract_library\programs\extract
UNIX PATH:   /apps/cap/extract_library/programs/extract

DESCRIPTION:

DOCUMENTS:

NOTES:

UPDATED(Reason-Date):                                                 DEVELOPER:

*******************************************************************************/

/************************************************************************
 *                                                                       *
 * Build CP_DEMOGRAPHICS Data Source                                     *
 *                                                                       *
 * Use CP_Member to Cat_Ind and Mbr_Eligibility Information              *
 *                                                                       *
 ************************************************************************/
PROC SQL;
	create table work.cp_demographics as

	select a.rptng_chnl_cd,
		a.rptng_prodt_categ_cd length=3 ,
		a.svc_yr_mth,
		a.svc_date,
		a.ami_membr_id      length=30  label='AMI_ID'  format=$30.,  /* New added - JW */
	a.mbr_num,
	coalesce(a.mbr_age,0) as mbr_age,
	a.age_band_cd,
	a.sex_cd,
	a.membr_relshp_cd,
	a.mmm_ben_pln_cd,

	c.Testing_IND,
	c.OTC_Testing_IND,
	c.Treatment_IND,
	c.Diagnosis_IND,
	c.Virtual_IND,
	c.Vaccinated_IND,
	coalesce(sum(a.mmos)           , 0)            as mmos                format=comma12.,
	coalesce(sum(a.submos)         , 0)            as submos              format=comma12.

	from  work.cp_e_struc_mbr_agg a
		LEFT JOIN
			work.cp_member          b

			on    a.mbr_num = b.mbr_num     

			LEFT JOIN
				work.member_ind          c

				on    a.mbr_num = c.mbr_num     

				group by
					a.rptng_chnl_cd,
					a.rptng_prodt_categ_cd,
					a.svc_yr_mth,
					a.svc_date,
					a.mbr_num,
					a.ami_membr_id, /* New added - JW */
	calculated mbr_age,
	a.age_band_cd,
	a.sex_cd,
	a.membr_relshp_cd,
	a.mmm_ben_pln_cd,
	c.Testing_IND,
	c.OTC_Testing_IND,
	c.Treatment_IND,
	c.Diagnosis_IND,
	c.Virtual_IND,
	c.Vaccinated_IND
	;
QUIT;

/*************************************************************************************
 *                                                                                    *
 * Create Demographics Agg by Shared Dimensions                                       *
 *                                                                                    *
 *************************************************************************************/
PROC SQL;
	create table work.cp_demographics_dim_agg as
		select rptng_chnl_cd,
			rptng_prodt_categ_cd length=3 ,
			age_band_cd,
			sex_cd,
			membr_relshp_cd,
			Testing_IND,
			OTC_Testing_IND,
			Treatment_IND,
			Diagnosis_IND,
			Virtual_IND,
			Vaccinated_IND,
			sum
		(case 
			when mmos ne 0 then mbr_age 
			else 0 
		end)
	as mbr_age_sum            format=comma12.,
		CASE 
			when membr_relshp_cd = 'E'
			then sum(mbr_age) 
		else 0
		END                       
	as subscrbr_age_sum       format=comma12.,
		sum(mmos)                 as mmos                   format=comma12.,
		sum(submos)               as submos                 format=comma12.
	from   work.cp_demographics
		group  by
			rptng_chnl_cd,
			rptng_prodt_categ_cd,
			age_band_cd,
			sex_cd,
			membr_relshp_cd,
			rptng_chnl_cd,
			rptng_prodt_categ_cd,
			Testing_IND,
			OTC_Testing_IND,
			Treatment_IND,
			Diagnosis_IND,
			Virtual_IND,
			Vaccinated_IND
	;
QUIT;
*****************************************************************************************************************************************
 /*******************************************************************************

 NAME:        cp_e_admission.sas
 LAN PATH:    k:\hda_sys\apps\cp\extract_library\programs\extract
 UNIX PATH:   /apps/cp/extract_library/programs/extract

 DESCRIPTION:

 DOCUMENTS:

 NOTES:

 UPDATED(Reason-Date):                                           DEVELOPER:
*******************************************************************************/


 /********************************************************************************************
 *                                                                                           *
 * Extract Table                                                                             *
 *                                                                                           *
 ********************************************************************************************/

 PROC SQL;

  CONNECT to db2 (db=&crdm_database uid=&user pwd=&pwd);

  create table work.cp_e_admission_1 as
  select *
  from   connection to db2

  (

	select
            CASE when admit_dt='12-31-9999' then '12-31-9999'
                 else (admit_dt +1 month -day(admit_dt + 1 month) day)
            END as svc_date,
            midsu_client_id,
            midsu_src_sys_cd,
            midsu_acct_num,
            midsu_brnch_cd,
            ben_plan_cd,
            acct_subty2,
            base_prodt_cd,
            midsu_base_nt_id,
            base_hmo_cd,

            admit_yr_mth,
            admit_dt,
            mbr_num,
            case_id,
            case_pd_dt,
            case_pd_yr_mth,
            dischrg_stat_cd,
            drg_cd,
            drg_wght_fact,
            encntr_ind,
            exper_cd,
            icd_maj_grp_cd,
            icd_minr_grp_cd,
            maj_diag_categ,
            midsu_clm_sys_cd,
            nt_clm_cd,
            pcp_prov_num,
            pol_num,
            prncpl_diag_cd,
            src_sys_hosp_id,
            st_cd,
            fa_chrg_amt,
            fa_elgbl_chrg_amt,
            fa_pay_amt,
            hosp_days_cnt,
            ms_drg_cd,
            icd_revsn_num,
			ICU_DAYS_CNT


     from   appdm.&table_prefix.admission
     where  case_pd_yr_mth   between &Q_curr_pd_beg_yrmo.  and &Q_curr_pd_end_yrmo.    and
            encntr_ind           ^= 'Y'                                                and
            &client_where

   );
  DISCONNECT from db2;
 QUIT;

   /********************************************************************************************
   *                                                                                           *
   * Define Structure Remap Recursive SQL                                                      *
   *                                                                                           *
   ********************************************************************************************/
   proc sql;
	create table work.cp_e_admission as
	select b.rptng_chnl_cd,
          b.rptng_prodt_categ_cd,
          a.mbr_num,
          a.admit_yr_mth,
          a.midsu_client_id,
          a.midsu_src_sys_cd,
          a.midsu_acct_num,
          a.midsu_brnch_cd,
          a.ben_plan_cd,
          a.acct_subty2,
          a.base_prodt_cd,
          a.midsu_base_nt_id,
          a.base_hmo_cd,
          b.mbr_age,
          b.age_band_cd,
          b.sex_cd,
          b.membr_relshp_cd,

          svc_date,
          admit_dt,
          case_id,
          case_pd_dt,
          case_pd_yr_mth,
          dischrg_stat_cd,
          drg_cd,
          drg_wght_fact,
          encntr_ind,
          exper_cd,
          icd_maj_grp_cd,
          icd_minr_grp_cd,
          maj_diag_categ,
          midsu_clm_sys_cd,
          nt_clm_cd,
          pcp_prov_num,
          pol_num,
          prncpl_diag_cd,
          src_sys_hosp_id,
          st_cd,
          fa_chrg_amt,
          fa_elgbl_chrg_amt,
          fa_pay_amt,
          hosp_days_cnt,
          ms_drg_cd,
          icd_revsn_num,
		  ICU_DAYS_CNT

   from   work.cp_e_admission_1  a

          LEFT JOIN

   (
    select b.mbr_num,
           b.svc_yr_mth,
           b.mbr_age,
           b.age_band_cd,
           b.sex_cd,
           b.membr_relshp_cd,
           b.rptng_chnl_cd,
           b.rptng_prodt_categ_cd
     from  work.&table_prefix.cp_struc_mp_raw b
     where rptng_prodt_categ_cd in ('MED', 'EXT')
   )  b

   on     a.mbr_num=b.mbr_num and a.admit_yr_mth=b.svc_yr_mth
	;
 QUIT;
 ********************************************************************************************************************************
 PROC SQL;
	create table work.demographics_dim_agg as
		select dem.Testing_IND,
			dem.OTC_Testing_IND,
			dem.Treatment_IND,
			dem.Diagnosis_IND,
			dem.Virtual_IND,
			dem.Vaccinated_IND,
			dem.membr_relshp_cd,
			ref.membr_relshp_grp_desc,
		CASE 
			when rptng_chnl_cd = 'F' and rptng_prodt_categ_cd ^= 'PHM' or rptng_chnl_cd ^= 'F' then dem.mmos 
			else 0 
		END 
	as mmos
		from   work.cp_demographics_dim_agg  dem
			LEFT JOIN
				cr_ref.membr_relshp_cd           ref
				on     dem.membr_relshp_cd = ref.membr_relshp_cd
	;
QUIT;

PROC SQL;
	create table work.demographics_mmos as
		select max(curr_mmos)       as curr_mmos

		from  (
			select sum(mmos)        as curr_mmos

			from   work.demographics_dim_agg
				)
	;
QUIT;

%let demographics_dim_agg_ind = Y;

PROC SQL;
	create table work.cp_financial_dim_agg as
		select Testing_IND,
			OTC_Testing_IND,
			Treatment_IND,
			Diagnosis_IND,
			Virtual_IND,
			Vaccinated_IND,
			source_cd,
			membr_relshp_cd,
			age_band_cd,
			sex_cd,
			risk_shr_logic_ind,
			partcptg_ind,
			msc_major_categ,

			sum(mat_plan_amt)         as mat_plan_amt,
			sum(ccf_mat_paid_amt)     as ccf_mat_paid_amt,
			sum(ccf_mat_cost_shr_amt) as ccf_mat_cost_shr_amt,
			sum(cntrct_sav_amt)       as cntrct_sav_amt,
			sum(consdr_chrg_amt)      as consdr_chrg_amt,
			sum(mat_fund_amt)         as mat_fund_amt

		from   work.cp_financial_dim_agg

		group by
			Testing_IND,
			OTC_Testing_IND,
			Treatment_IND,
			Diagnosis_IND,
			Virtual_IND,
			Vaccinated_IND,
			source_cd,
			membr_relshp_cd,
			age_band_cd,
			sex_cd,
			risk_shr_logic_ind,
			partcptg_ind,
			msc_major_categ
	;
QUIT;

/************************************************************************
 * Plan Spend - obj1
 ************************************************************************/
PROC SQL;
	create table work.cp_900_obj01_template
		(
		row_order   num,
		desc        char(40),
		current     char(40)
		);
	insert into  work.cp_900_obj01_template
		(row_order,desc,current)
	values(1,'Average Members','')
	values(2,'Number of Individuals Tested','')
	values(3,'Number of Individuals Diagnosed****','')
	values(4,'Percent of Total Membership Diagnosed','')
	values(5,'Number of Indivduals Vaccinated*****','')
	values(6,'Percent of Total Membership Vaccinated','')
	;
QUIT;

/************************************************************************
 * Avg EE/MEMBER - obj1
 ************************************************************************/
PROC SQL;
	create table work.cp_900_obj_01 as
		select 'Average Members' as desc,
			put(coalesce(current,0),comma12.) as current
		from (
			select sum(mmos) / &curr_months_in_period_cnt as current
				from   work.demographics_dim_agg
					)

				OUTER UNION CORR

				select  'Number of Individuals Tested' as desc,
					put(coalesce(current,0),smlnuma.) as current

				from (
					select count(distinct mbr_num) as current

					from   work.member_ind
						where  Testing_IND = 'Y'
							)

						OUTER UNION CORR

						select  'Number of Individuals Diagnosed****' as desc,
							put(coalesce(current,0),smlnuma.) as current

						from (
							select count(distinct mbr_num) as current

							from   work.member_ind
								where  Diagnosis_IND = 'Y'
									)

								OUTER UNION CORR

								select desc,
									put(coalesce(current,0),percent12.5) as current

								from (
									select  'Percent of Total Membership Diagnosed' as desc,
										divide(current_diag,current_TOT) as current

									from (
										select sum(mmos) / &curr_months_in_period_cnt as current_TOT

										from   work.demographics_dim_agg
											)

											CROSS JOIN

											(
										select count(distinct mbr_num) as current_diag

										from   work.member_ind
											where  Diagnosis_IND = 'Y'
												)
												)

												OUTER UNION CORR

													select  'Number of Indivduals Vaccinated*****' as desc,
														put(coalesce(current,0),smlnumd.) as current
													from (
														select count(distinct mbr_num) as current

														from work.member_ind
															where Vaccinated_IND = 'Y'
															)
															OUTER UNION CORR

																select desc,
																	put(coalesce(current,0),percent12.5) as current

																from (
																	select  'Percent of Total Membership Vaccinated' as desc,
																		divide(current_vacc,current_TOT) as current

																		from (
																			select sum(mmos) / &curr_months_in_period_cnt as current_TOT
			
																			from   work.demographics_dim_agg
																	    		)
																				CROSS JOIN
																				(
																					select count(distinct mbr_num) as current_vacc

																					from   work.member_ind
																					where  Vaccinated_IND = 'Y'
																				)
																			)
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_01 as
		select  tmpl.desc,

			coalesce(obj.current   ,tmpl.current   ) as current

		from   work.cp_900_obj01_template tmpl

		LEFT JOIN

			work.cp_900_obj_01         obj
			on     tmpl.desc = obj.desc

		order by tmpl.row_order
	;
QUIT;

/************************************************************************
 * Plan Spend - obj3
 ************************************************************************/
PROC SQL;
	create table work.cp_900_obj03_template
		(
		row_order            num,
		desc                 char(25),
		curr_mat_plan_amt    num,
		curr_pmbasis         num
		);
	insert into  work.cp_900_obj03_template
		(row_order, desc, curr_mat_plan_amt, curr_pmbasis)
	values(1, 'Plan Spend - Testing'  ,0,0)
	values(2, 'Plan Spend - OTC Test Kits', 0,0)
	values(3, 'Plan Spend - Treatment*',0,0)
	values(4, 'Plan Spend - Vaccinations',0,0)
	values(5, 'Total Combined Spend'  ,0,0)
	;
QUIT;

PROC SQL;
	create table work.plan_spend as
		select row_order,
			desc,
			curr_mat_plan_amt,
			curr_mat_plan_num

		from (
			select 1                      as row_order,
				desc,
				max(curr_mat_plan_amt) as curr_mat_plan_amt,
				max(divide(curr_mat_plan_amt,curr_mmos)) as curr_mat_plan_num

			from (
				select 'Plan Spend - Testing'                             as desc,
					sum(mat_plan_amt)                                  as curr_mat_plan_amt

				from   work.cp_financial_dim_agg
					where  Testing_IND = 'Y'
						)

						CROSS JOIN

						(
					select *
						from   work.demographics_mmos
							)

								)
							OUTER UNION CORR
	
          				 (
             				select 2                      as row_order,
                    		desc,
                    		max(curr_mat_plan_amt) as curr_mat_plan_amt,
                    		max(divide(curr_mat_plan_amt,curr_mmos)) as curr_mat_plan_num

             				from (
                    			select 'Plan Spend - OTC Test Kits'                             as desc,
                           		sum(mat_plan_amt)                                  as curr_mat_plan_amt

                    			from   work.cp_financial_dim_agg
                    			where  OTC_Testing_IND = 'Y'
                 			 )

                  			CROSS JOIN

                  			(
                    			select *
                    			from   work.demographics_mmos
                  			)

           					)
						OUTER UNION CORR
							select 3                      as row_order,
								desc,
								max(curr_mat_plan_amt) as curr_mat_plan_amt,
								max(divide(curr_mat_plan_amt,curr_mmos)) as curr_mat_plan_num

							from (
								select 'Plan Spend - Treatment*'                            as desc,
									sum(mat_plan_amt)                                   as curr_mat_plan_amt

								from   work.cp_financial_dim_agg
									where  Treatment_IND = 'Y'
										)

										CROSS JOIN

									( select *
										from work.demographics_mmos
											)

										OUTER UNION CORR
											select 4                      as row_order,
												desc,
												max(curr_mat_plan_amt) as curr_mat_plan_amt,
												max(divide(curr_mat_plan_amt,curr_mmos)) as curr_mat_plan_num

											from (
												select 'Plan Spend - Vaccinations'                            as desc,
													sum(plan_amt)                                   as curr_mat_plan_amt

												from   work.VACCINE_FINANCIALS
													where  Vaccinated_IND = 'Y'
														)

														CROSS JOIN

													( select *
														from work.demographics_mmos
													)
	;
QUIT;

PROC SQL;
	create table work.plan_spend1 as
		select row_order,
			desc,
			curr_mat_plan_amt,
			curr_mat_plan_num

		from   work.plan_spend

		OUTER UNION CORR

		select 5 as row_order,
			'Total Combined Spend'   as desc,
			sum(curr_mat_plan_amt)   as curr_mat_plan_amt,
			sum(curr_mat_plan_num)   as curr_mat_plan_num

		from   work.plan_spend
			group  by calculated row_order,
				calculated desc
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_03 as
		select tmpl.row_order,
			tmpl.desc,
			ifn(obj.curr_mat_plan_amt=.,tmpl.curr_mat_plan_amt,obj.curr_mat_plan_amt) as curr_mat_plan_amt,
			ifn(obj.curr_pmbasis=.,tmpl.curr_pmbasis,obj.curr_pmbasis)                as curr_pmbasis

		from   work.cp_900_obj03_template tmpl

		LEFT JOIN

			(
		select row_order,
			desc,
			curr_mat_plan_amt,
			curr_mat_plan_num                                                               as curr_pmbasis

		from   work.plan_spend1
				) obj
					on  tmpl.row_order = obj.row_order
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_03 as
		select  tmpl.row_order,
			tmpl.desc,

			coalesce(obj.curr_mat_plan_amt,tmpl.curr_mat_plan_amt)   as curr_mat_plan_amt,
			coalesce(obj.curr_pmbasis,tmpl.curr_pmbasis)             as curr_pmbasis

		from   work.cp_900_obj03_template tmpl

		LEFT JOIN

			work.cp_900_obj_03         obj
			on     tmpl.row_order = obj.row_order
		order by tmpl.row_order
	;
QUIT;

/************************************************************************
 * Employer Paid - obj4
 ************************************************************************/
PROC SQL;
	create table work.cp_900_obj04_template
		(
		row_order            num,
		desc                 char(30),
		curr_mat_paid_amt    num,
		curr_pmbasis         num
		);
	insert into  work.cp_900_obj04_template
		(row_order, desc, curr_mat_paid_amt, curr_pmbasis)
	values(1, 'Employer Spend - Testing'  ,0,0)
	values(2, 'Employer Spend - OTC Test Kits', 0,0)
	values(3, 'Employer Spend - Treatment*',0,0)
	values(4, 'Employer Spend - Vaccinations',0,0)
	values(5, 'Total Combined Employer Spend'  ,0,0)
	;
QUIT;

/**************************************************************************
 * Update: 9/28/2013   KCG
 * Remove source_cd 'C' from criteria-  and source_cd ^in('P','C')
 **************************************************************************/
PROC SQL;
	create table work.employer_paid as
		select row_order,
			desc,
			curr_mat_paid_amt,
			curr_mat_paid_num

		from (
			select 1                      as row_order,
				desc,
				max(curr_mat_paid_amt) as curr_mat_paid_amt,
				max(divide(curr_mat_paid_amt,curr_mmos)) as curr_mat_paid_num

			from (
				select 'Employer Spend - Testing'                             as desc,
					sum(ccf_mat_paid_amt)                                  as curr_mat_paid_amt

				from   work.cp_financial_dim_agg
					where  Testing_IND = 'Y'
						)

						CROSS JOIN

						(
					select *
						from   work.demographics_mmos
							)

								)
							OUTER UNION CORR

							(
             				select 2                      as row_order,
                    		desc,
                    		max(curr_mat_paid_amt) as curr_mat_paid_amt,
                   		 	max(divide(curr_mat_paid_amt,curr_mmos)) as curr_mat_paid_num

             				from (
                    			select 'Employer Spend - OTC Test Kits'                             as desc,
                           		sum(ccf_mat_paid_amt)                                  as curr_mat_paid_amt

                    			from   work.cp_financial_dim_agg
                    			where  OTC_Testing_IND = 'Y'
                  				)

                  			CROSS JOIN

                  			(
                    		select *
                    		from   work.demographics_mmos
                  			)

           					)

      						OUTER UNION CORR

							select 3                      as row_order,
								desc,
								max(curr_mat_paid_amt) as curr_mat_paid_amt,
								max(divide(curr_mat_paid_amt,curr_mmos)) as curr_mat_paid_num

							from (
								select 'Employer Spend - Treatment*'                            as desc,
									sum(ccf_mat_paid_amt)                                   as curr_mat_paid_amt

								from   work.cp_financial_dim_agg
									where  Treatment_IND = 'Y'
										)

										CROSS JOIN

									( select *
										from work.demographics_mmos
											)

										OUTER UNION CORR

										select 4                      as row_order,
											desc,
											max(curr_mat_paid_amt) as curr_mat_paid_amt,
											max(divide(curr_mat_paid_amt,curr_mmos)) as curr_mat_paid_num

										from (
											select 'Employer Spend - Vaccinations'                            as desc,
												sum(pay_amt)                                   as curr_mat_paid_amt

											from   work.VACCINE_FINANCIALS
												where  Vaccinated_IND = 'Y'
													)

													CROSS JOIN

												( select *
													from work.demographics_mmos
													)
	;
QUIT;

PROC SQL;
	create table work.employer_paid1 as
		select row_order,
			desc,
			curr_mat_paid_amt,
			curr_mat_paid_num

		from   work.employer_paid

		OUTER UNION CORR

		select 5 as row_order,
			'Total Combined Employer Spend'   as desc,
			sum(curr_mat_paid_amt)   as curr_mat_paid_amt,
			sum(curr_mat_paid_num)   as curr_mat_paid_num

		from   work.employer_paid
			group  by calculated row_order,
				calculated desc
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_04 as
		select tmpl.row_order,
			tmpl.desc,
			ifn(obj.curr_mat_paid_amt=.,tmpl.curr_mat_paid_amt,obj.curr_mat_paid_amt) as curr_mat_paid_amt,
			ifn(obj.curr_pmbasis=.,tmpl.curr_pmbasis,obj.curr_pmbasis)                as curr_pmbasis

		from   work.cp_900_obj04_template tmpl

		LEFT JOIN

			(
		select row_order,
			desc,
			curr_mat_paid_amt,
			curr_mat_paid_num                                                              as curr_pmbasis

		from   work.employer_paid1
				) obj
					on  tmpl.row_order = obj.row_order
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_04 as
		select  tmpl.row_order,
			tmpl.desc,

			coalesce(obj.curr_mat_paid_amt,tmpl.curr_mat_paid_amt)   as curr_mat_paid_amt,
			coalesce(obj.curr_pmbasis,tmpl.curr_pmbasis)             as curr_pmbasis

		from   work.cp_900_obj04_template tmpl

		LEFT JOIN

			work.cp_900_obj_04         obj
			on     tmpl.row_order = obj.row_order
		order by tmpl.row_order
	;
QUIT;

/************************************************************************
 * Member Cost share - obj5
 ************************************************************************/
PROC SQL;
	create table work.cp_900_obj05_template
		(
		row_order            num,
		desc                 char(30),
		curr_mat_cost_shr_amt    num,
		curr_pmbasis         num
		);
	insert into  work.cp_900_obj05_template
		(row_order, desc, curr_mat_cost_shr_amt, curr_pmbasis)
	values(1, 'Member Spend - Testing'  ,0,0)
	values(2, 'Member Spend - OTC Test Kits'  ,0,0)
	values(3, 'Member Spend - Treatment*',0,0)
	values(4, 'Member Spend - Vaccinations',0,0)
	values(5, 'Total Combined Member Spend'  ,0,0)
	;
QUIT;

PROC SQL;
	create table work.member_paid as
		select row_order,
			desc,
			curr_mat_cost_shr_amt,
			curr_mat_cost_shr_num

		from (
			select 1                      as row_order,
				desc,
				max(curr_mat_cost_shr_amt) as curr_mat_cost_shr_amt,
				max(divide(curr_mat_cost_shr_amt,curr_mmos)) as curr_mat_cost_shr_num

			from (
				select 'Member Spend - Testing'                             as desc,
					sum(ccf_mat_cost_shr_amt)                            as curr_mat_cost_shr_amt

				from   work.cp_financial_dim_agg
					where  Testing_IND = 'Y'
						)

						CROSS JOIN

						(
					select *
						from   work.demographics_mmos
							)

								)
							OUTER UNION CORR
							(
             				select 2                      as row_order,
                    		desc,
                    		max(curr_mat_cost_shr_amt) as curr_mat_cost_shr_amt,
                    		max(divide(curr_mat_cost_shr_amt,curr_mmos)) as curr_mat_cost_shr_num

             				from (
                    			select 'Member Spend - OTC Test Kits'                             as desc,
                           		sum(ccf_mat_cost_shr_amt)                            as curr_mat_cost_shr_amt

                    			from   work.cp_financial_dim_agg
                    			where  OTC_Testing_IND = 'Y'
                  				)

                  			CROSS JOIN

                  			(
                    		select *
                    		from   work.demographics_mmos
                  			)

           					)

      						OUTER UNION CORR

							select 3                      as row_order,
								desc,
								max(curr_mat_cost_shr_amt) as curr_mat_cost_shr_amt,
								max(divide(curr_mat_cost_shr_amt,curr_mmos)) as curr_mat_cost_shr_num

							from (
								select 'Member Spend - Treatment*'                            as desc,
									sum(ccf_mat_cost_shr_amt)                             as curr_mat_cost_shr_amt

								from   work.cp_financial_dim_agg
									where  Treatment_IND = 'Y'
										)

										CROSS JOIN

									( select *
										from work.demographics_mmos
											)

										OUTER UNION CORR

										select 4                      as row_order,
											desc,
											max(curr_mat_cost_shr_amt) as curr_mat_cost_shr_amt,
											max(divide(curr_mat_cost_shr_amt,curr_mmos)) as curr_mat_cost_shr_num

										from (
											select 'Member Spend - Vaccinations*'                            as desc,
												sum(cost_shr_amt)                             as curr_mat_cost_shr_amt

											from   work.VACCINE_FINANCIALS
												where  Vaccinated_IND = 'Y'
													)

													CROSS JOIN

												( select *
													from work.demographics_mmos
														)
	;
QUIT;

PROC SQL;
	create table work.member_paid1 as
		select row_order,
			desc,
			curr_mat_cost_shr_amt,
			curr_mat_cost_shr_num

		from   work.member_paid

		OUTER UNION CORR

		select 5 as row_order,
			'Total Combined Member Spend'   as desc,
			sum(curr_mat_cost_shr_amt)   as curr_mat_cost_shr_amt,
			sum(curr_mat_cost_shr_num)   as curr_mat_cost_shr_num

		from   work.member_paid
			group  by calculated row_order,
				calculated desc
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_05 as
		select tmpl.row_order,
			tmpl.desc,
			ifn(obj.curr_mat_cost_shr_amt=.,tmpl.curr_mat_cost_shr_amt,obj.curr_mat_cost_shr_amt) as curr_mat_cost_shr_amt,
			ifn(obj.curr_pmbasis=.,tmpl.curr_pmbasis,obj.curr_pmbasis)                as curr_pmbasis

		from   work.cp_900_obj05_template tmpl

		LEFT JOIN

			(
		select row_order,
			desc,
			curr_mat_cost_shr_amt,
			curr_mat_cost_shr_num                                                              as curr_pmbasis

		from   work.member_paid1
				) obj
					on  tmpl.row_order = obj.row_order
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_05 as
		select  tmpl.row_order,
			tmpl.desc,

			coalesce(obj.curr_mat_cost_shr_amt,tmpl.curr_mat_cost_shr_amt)   as curr_mat_cost_shr_amt,
			coalesce(obj.curr_pmbasis,tmpl.curr_pmbasis)             as curr_pmbasis

		from   work.cp_900_obj05_template tmpl

		LEFT JOIN

			work.cp_900_obj_05         obj
			on     tmpl.row_order = obj.row_order
		order by tmpl.row_order
	;
QUIT;

/************************************************************************
 * Plan Spend by MSC - obj7
 ************************************************************************/
PROC SQL;
	create table work.cp_900_obj07_template
		(
		row_order            num,
		msc_major_desc       char(22),
		curr_mat_plan_amt    num,
		curr_pmbasis         num
		);
	insert into  work.cp_900_obj07_template
		(row_order, msc_major_desc, curr_mat_plan_amt, curr_pmbasis)

	values(1, 'Inpatient' ,0,0)
	values(2, 'Outpatient',0,0)
	values(3, 'Professional',0,0)
	values(4, 'OMS',0,0)
	values(5, 'Pharmacy ***',0,0)
	values(7, 'Total Combined Spend',0,0)
	;
QUIT;

/******************************JIRA-757 WORK******************************/
PROC SQL;
	create table work.msc_major_categ_spend as 
		select row_order, 
			msc_major_desc,
			curr_mat_plan_amt,
			curr_mat_plan_num
		from  (  select                       
			row_order,
			msc_major_desc,
			max(curr_mat_plan_amt)                   as curr_mat_plan_amt,
			max(divide(curr_mat_plan_amt,curr_mmos)) as curr_mat_plan_num
		from    (
			select msc_major_categ, 
				CASE 
					when msc_major_categ='01' then 'Inpatient' 
					when msc_major_categ='02' then 'Outpatient'
					when msc_major_categ='04' then 'Professional' 
				END 
			as msc_major_desc, 
				CASE 
					when msc_major_categ='01' then 1 
					when msc_major_categ='02' then 2 
					when msc_major_categ='04' then 3 
				END 
			as row_order,
				sum(mat_plan_amt)       as curr_mat_plan_amt
			from     work.cp_financial_dim_agg
				where    msc_major_categ in('01','02','04') 
					group by msc_major_categ
						) 
						CROSS JOIN
						(
					select *
						from   work.demographics_mmos
							)
								group row_order,
									msc_major_desc,
									msc_major_categ
									)
								OUTER UNION CORR 
									(  select    4                                 as                   row_order,
										'OMS'                                    as msc_major_desc,
										max(curr_mat_plan_amt)                   as curr_mat_plan_amt,
										max(divide(curr_mat_plan_amt,curr_mmos)) as curr_mat_plan_num
									from               (
										select sum(mat_plan_amt) as curr_mat_plan_amt
											from work.cp_financial_dim_agg
												where msc_major_categ ^in('01','02','04')
									)
										CROSS JOIN
										(
									select *
										from   work.demographics_mmos
											)
												)
											OUTER UNION CORR 
												(  select    5                                 as                   row_order,
													'Pharmacy ***'                                    as msc_major_desc,
													max(curr_mat_plan_amt)                   as curr_mat_plan_amt,
													max(divide(curr_mat_plan_amt,curr_mmos)) as curr_mat_plan_num
												from               (
													select sum(rx_plan_amt) as curr_mat_plan_amt
														from work.cp_covid_pharmacy               
												)
													CROSS JOIN
													(
												select *
													from   work.demographics_mmos
														)
															)
															/*      OUTER UNION CORR 
														(    select    5                                        as row_order, 
															'Capitation'                              as msc_major_desc,
															max(base_mat_plan_amt)                   as base_mat_plan_amt,
															max(curr_mat_plan_amt)                   as curr_mat_plan_amt,
															max(norm_mat_plan_amt)                   as norm_mat_plan_amt,
															max(divide(base_mat_plan_amt,base_mmos)) as base_mat_plan_num,
															max(divide(curr_mat_plan_amt,curr_mmos)) as curr_mat_plan_num,
															max(divide(norm_mat_plan_amt,norm_mmos)) as norm_mat_plan_num
														from            ( select svc_period,
															ifn(svc_period = '1', sum(mat_plan_amt), 0) as base_mat_plan_amt,
															ifn(svc_period = '2', sum(mat_plan_amt), 0) as curr_mat_plan_amt,
															ifn(svc_period = 'N', sum(mat_plan_amt), 0) as norm_mat_plan_amt
														from work.cp_financial_dim_agg
															where  svc_period in('1','2','N') and source_cd = 'C' and cap_ty ^= 'MH'
																group by svc_period
																)
																	CROSS JOIN
																	(
																select *
																	from   work.demographics_mmos
																		)
																			)
																		OUTER UNION CORR 
																			(   select  6                                              as row_order, 
																				'Pharmacy'                                     as msc_major_desc, 
																				max(base_mat_plan_amt)                         as base_mat_plan_amt,
																				max(curr_mat_plan_amt)                         as curr_mat_plan_amt,
																				max(norm_mat_plan_amt)                         as norm_mat_plan_amt,
																				max(divide(base_mat_plan_amt,base_pharm_mmos)) as base_mat_plan_num,
																				max(divide(curr_mat_plan_amt,curr_pharm_mmos)) as curr_mat_plan_num,
																				max(divide(norm_mat_plan_amt,norm_pharm_mmos)) as norm_mat_plan_num
																			from 
																				( select svc_period,
																					ifn(svc_period = '1', sum(mat_plan_amt), 0) as base_mat_plan_amt,
																					ifn(svc_period = '2', sum(mat_plan_amt), 0) as curr_mat_plan_amt,
																					ifn(svc_period = 'N', sum(mat_plan_amt), 0) as norm_mat_plan_amt
																				from   work.cp_financial_dim_agg
																					where  svc_period in('1','2','N') and source_cd = 'P'
																						group by svc_period
																			)
																				CROSS JOIN
																				(
																			select *
																				from   work.demographics_mmos
																					)
																						)*/
	;
QUIT;

PROC SQL;
	create table Total_Spend as 
		select   row_order,
			msc_major_desc,
			curr_mat_plan_amt,
			curr_mat_plan_num 

		from work.msc_major_categ_spend


		OUTER UNION CORR

		select       7                        as row_order,
			'Total Combined Spend'    as msc_major_desc,
			sum(curr_mat_plan_amt)   as curr_mat_plan_amt,
			sum(curr_mat_plan_num)   as curr_mat_plan_num

		from   work.msc_major_categ_spend

	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_07 as
		select tmpl.row_order,
			tmpl.msc_major_desc,
			ifn(obj.curr_mat_plan_amt=.,tmpl.curr_mat_plan_amt,obj.curr_mat_plan_amt) as curr_mat_plan_amt,
			ifn(obj.curr_pmbasis=.,tmpl.curr_pmbasis,obj.curr_pmbasis)                as curr_pmbasis

		from   work.cp_900_obj07_template tmpl

		LEFT JOIN

			(
		select row_order,
			msc_major_desc,
			curr_mat_plan_amt,
			curr_mat_plan_num                                                               as curr_pmbasis

		from   Total_spend
				) obj
					on  tmpl.row_order = obj.row_order order by tmpl.row_order
	;
QUIT;

/************************************************************************
 * Network Discounts - obj06
 ************************************************************************/
PROC SQL;
	create table work.cp_900_obj06_template
		(
		desc                   char(15),
		current    num
		);
	insert into  work.cp_900_obj06_template
		(desc, current)
	values('In network %' ,0)
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_06 as
		select 'In network %'  as desc,
			divide(sum(current_INN),sum(current_tot)) as current

		from  (
			select
				sum(ifn(partcptg_ind ='Y', mat_plan_amt, 0)) as current_INN,
				sum(mat_plan_amt) as current_tot
			from   work.cp_financial_dim_agg
				)
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_06 as
		select  tmpl.desc,

			coalesce(obj.current,tmpl.current) as current

		from   work.cp_900_obj06_template tmpl

		LEFT JOIN

			work.cp_900_obj_06         obj
			on     tmpl.desc = obj.desc
	;
QUIT;

/****************************************************************************/
/****************************************************************************/
/****************************************************************************/
/*********** Age/Gender/Relationship                            *************/
/****************************************************************************/
/****************************************************************************/

/************************************************************************
 * Plan Spend - obj10
 ************************************************************************/
PROC SQL;
	create table work.cp_90X_obj09_template
		(
		row_order            num,
		desc                 char(25),
		current              char(25)
		);
	insert into  work.cp_90X_obj09_template
		(row_order, desc, current )
	values(1,'Average Age','')
	values(2,'Percent Male','')
	values(3,'Percent Female','')
	values(4,'Number of Employees','')
	values(5,'Number of Spouses','')
	values(6,'Number of Dependents','')
	;
QUIT;

PROC SQL;
	create table work.demographics_dim_agg as
		select 
			sex_cd,
			membr_relshp_cd,
			sum(mbr_age_sum)          as mbr_age_sum            format=comma12.,
			sum(mmos)                 as mmos                   format=comma12.
		from   work.cp_demographics_dim_agg
			where  Diagnosis_IND = 'Y'
				group by
					sex_cd,
					membr_relshp_cd
	;
QUIT;

/************************************************************************
 * Avg EE/MEMBER - obj1
 ************************************************************************/
PROC SQL;
	create table work.cp_90X_obj_09 as
		select 'Average Age' as desc,
			put(coalesce(current,0),comma12.2) as current
		from (
			select sum(mbr_age_sum) / sum(mmos) as current
				from   work.demographics_dim_agg
					)
				OUTER UNION CORR
					select  'Percent Male' as desc,
						put(coalesce(divide(current_Male,current_TOT),0),percent12.2) as current
					from (
						select count(distinct 
							case 
								when sex_cd = 'M' then mbr_num 
								else '' 
							END)
						as current_Male,
							count(distinct mbr_num) as current_TOT
						from   work.cp_demographics
							where  Diagnosis_IND = 'Y'
								)
							OUTER UNION CORR
								select  'Percent Female' as desc,
									put(coalesce(divide(current_Female,current_TOT),0),percent12.2) as current
								from (
									select count(distinct 
										case 
											when sex_cd = 'F' then mbr_num 
											else '' 
										END)
									as current_Female,
										count(distinct mbr_num) as current_TOT
									from   work.cp_demographics	  
										where  Diagnosis_IND = 'Y'
											)		   
										OUTER UNION CORR
											select  'Number of Employees' as desc,
												put(coalesce(current,0),smlnumc.) as current
											from (
												select count(distinct mbr_num) as current
													from   work.cp_e_claim
														where  membr_relshp_cd = 'E' and Diagnosis_IND = 'Y'
															)
														OUTER UNION CORR
															select  'Number of Spouses' as desc,
																put(coalesce(current,0),smlnumc.) as current
															from (
																select count(distinct mbr_num) as current
																	from   work.cp_e_claim
																		where  membr_relshp_cd = 'S' and Diagnosis_IND = 'Y'
																			)
																		OUTER UNION CORR
																			select  'Number of Dependents' as desc,
																				put(coalesce(current,0),smlnumc.) as current
																			from (
																				select count(distinct mbr_num) as current
																					from   work.cp_e_claim
																						where  membr_relshp_cd not in ('E','S') and Diagnosis_IND = 'Y'
																							)
	;
QUIT;

PROC SQL;
	create table work.cp_90X_obj_09 as
		select  tmpl.desc,

			coalesce(obj.current   ,tmpl.current   ) as current

		from   work.cp_90X_obj09_template tmpl

		LEFT JOIN

			work.cp_90X_obj_09         obj
			on     tmpl.desc = obj.desc

		order by tmpl.row_order
	;
QUIT;

/************************************************************************
 * Plan Spend - obj10
 ************************************************************************/
PROC SQL;
	create table work.cp_900_obj10_template
		(
		row_order            num,
		age_band_cd          char(1),
		age_band_desc        char(6),
		curr_female_pct      num,
		curr_male_pct        num
		);
	insert into  work.cp_900_obj10_template
		(row_order, age_band_cd, age_band_desc, curr_female_pct, curr_male_pct )
	values(1,'A','<1',0,0)
	values(2,'B','1-17',0,0)
	values(3,'C','18-29',0,0)
	values(4,'D','30-39',0,0)
	values(5,'E','40-49',0,0)
	values(6,'F','50-59',0,0)
	values(7,'G','60-64',0,0)
	values(8,'H','65+',0,0)
	values(9,'I','TOTAL',0,0)
	;
QUIT;

PROC SQL;
	create table work.demographics_ageband_dim_agg as
		select age_band_cd,
			sex_cd,

			count(distinct mbr_num)           as mem_count

		from   (
			Select
				mbr_num,
				max(age_band_cd) as age_band_cd,
				max(sex_cd) as sex_cd
			from work.cp_demographics
				where  Diagnosis_IND = 'Y'
					group by 
						mbr_num
						)

					group by
						age_band_cd,
						sex_cd
	;
QUIT;

PROC SQL;
	create table work.demographics_mmos_diag as
		select mem_count_all

		from  ( select
			sum(mem_count)           as mem_count_all
		from   work.demographics_ageband_dim_agg
			)
	;
QUIT;

PROC SQL;
	create table work.demog_ageband_dim_agg as
		select age_band_cd,
			sex_cd,

			mem_count

		from   work.demographics_ageband_dim_agg

		OUTER UNION CORR

		select 'I' as age_band_cd,
			sex_cd,

			sum(mem_count) as mem_count

		from   work.demographics_ageband_dim_agg

		group by
			sex_cd

		order by age_band_cd, sex_cd
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_10 as
		select age_band_desc,
			coalesce(curr_female_count/mem_count_all,0) as curr_female_pct,
			coalesce(curr_male_count/mem_count_all,0) as curr_male_pct

		from (
			select tmpl.age_band_cd,
				tmpl.age_band_desc,
				p2f.mem_count as curr_female_count,
				p2m.mem_count as curr_male_count

			from   work.cp_900_obj10_template       tmpl

			LEFT JOIN

				(
			select age_band_cd,
				mem_count

			from   work.demog_ageband_dim_agg
				where  sex_cd = 'F'
					) p2f
						on tmpl.age_band_cd = p2f.age_band_cd

					LEFT JOIN

						(
					select age_band_cd,
						mem_count

					from   work.demog_ageband_dim_agg
						where  sex_cd = 'M'
							) p2m
								on tmpl.age_band_cd = p2m.age_band_cd
								)

								CROSS JOIN

								(
							select mem_count_all

							from   work.demographics_mmos_diag
									)
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_10 as
		select  tmpl.row_order,
			tmpl.age_band_desc,

			coalesce(obj.curr_female_pct,tmpl.curr_female_pct)     as curr_female_pct,
			coalesce(obj.curr_male_pct,tmpl.curr_male_pct)         as curr_male_pct

		from   work.cp_900_obj10_template tmpl

		LEFT JOIN

			work.cp_900_obj_10         obj
			on     tmpl.age_band_desc = obj.age_band_desc
		order  by tmpl.row_order
	;
QUIT;

/************************************************************************
 * IP Utilization - obj17
 * F69688 Changed group by clause to match drg_wght_fact with CP_811
 *************************************************************************/
PROC SQL;
	create table work.cp_ip_dim_agg_ as
		select Testing_IND,
			Diagnosis_IND,
			sum(mat_admit_cnt) 				as mat_admit_cnt,
			sum(mat_icu_days_cnt) 			as mat_icu_days_cnt,
			sum(mat_hosp_days_cnt) 			as mat_hosp_days_cnt,
			sum(mat_plan_amt) 				as mat_plan_amt

		from 	work.cp_ip_dim_agg dim

		LEFT JOIN

			cr_ref.drg ref
			on dim.ms_drg_cd = ref.drg_cd

		where  ref.drg_mthd_cd = 'MS'

		group  by 	Testing_IND,
			Diagnosis_IND
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj17_template
		(
		row_order              num,
		desc                   char(30),
		curr_metric_d            char(30),
		curr_metric_t            char(30)
		);
	insert into  work.cp_900_obj17_template
		(row_order,desc, curr_metric_d,curr_metric_t)
	values(1,'Admissions','0','0')
	values(2,'Bed Days','0','0')
	values(3,'ALOS' ,'0','0')
	values(6,'Average Payment per Day' ,'0','0')
	values(7,'Acute Care Bed Days' ,'0','0')
	values(8,'ICU Bed Days' ,'0','0')
	;
QUIT;

/*PROC transpose DATA=work.cp_ip_dim_agg_ out=work.cp_ip_obj17_dim_agg_trans
(rename=(col1=curr_metric _name_=desc));
RUN;
*/
PROC SQL;
	create table work.cp_900_obj_17 as
		select 1 as row_order,
			'Admissions' as desc,
		    	put(sum 
		    	    (case 
			            when Diagnosis_IND = 'Y' then mat_admit_cnt 
			            else 0 
		            end) ,smlnumb.) as curr_metric_d,
		            
	        	put(sum
                	(case 
	                	when Testing_IND   = 'Y' then mat_admit_cnt 
	                	else 0 
                	end) ,smlnumb.) as curr_metric_t
                	
        from work.cp_ip_dim_agg_
        
        OUTER UNION CORR
        	select 2 as row_order,
		    'Bed Days' as desc,
		        put(sum
	                (case 
		                when Diagnosis_IND = 'Y' then mat_hosp_days_cnt 
		                else 0 
	                end) ,comma12.) as curr_metric_d,
	
	            put(sum
                    (case 
	                    when Testing_IND   = 'Y' then mat_hosp_days_cnt 
	                    else 0 
                    end) ,comma12.) as curr_metric_t

        from work.cp_ip_dim_agg_

        OUTER UNION CORR
        
            select 3 as row_order,
	        'ALOS'   as desc,
	            put(sum
                    (case 
	                    when Diagnosis_IND = 'Y' then mat_hosp_days_cnt 
	                    else 0 
                    end)/sum

                    (case 
                        when Diagnosis_IND = 'Y' then mat_admit_cnt 
                        else 0 
                    end) ,comma12.) as curr_metric_d,

                put(sum
                    (case 
                        when Testing_IND   = 'Y' then mat_hosp_days_cnt 
                        else 0 
                    end)/sum
                    
                    (case 
                        when Testing_IND   = 'Y' then mat_admit_cnt 
                        else 0 
                    end),comma12.) as curr_metric_t

        from work.cp_ip_dim_agg_

        OUTER UNION CORR

            select 6 as row_order,
            'Average Payment per Day'   as desc,
                put(sum
                    (case 
                        when Diagnosis_IND = 'Y' then mat_plan_amt 
                        else 0 
                    end)/sum
                    
                    (case 
                        when Diagnosis_IND = 'Y' then mat_hosp_days_cnt 
                        else 0 
                    end),comma12.) as curr_metric_d,

                put(sum
                    (case 
                        when Testing_IND   = 'Y' then mat_plan_amt 
                        else 0 
                    end)/sum
                    
                    (case 
                        when Testing_IND   = 'Y' then mat_hosp_days_cnt 
                        else 0  
                    end),comma12.) as curr_metric_t

        from work.cp_ip_dim_agg_

        OUTER UNION CORR

            select 7 as row_order,
            'Acute Care Bed Days'   as desc,
                put(max(sum
                    (case 
                        when Diagnosis_IND = 'Y' then mat_hosp_days_cnt 
                        else 0 
                    end)- sum

                    (case 
                        when Diagnosis_IND = 'Y' then mat_icu_days_cnt 
                        else 0 
                    end),0),comma12.) as curr_metric_d,

                put(max(sum
                    (case 
                        when Testing_IND   = 'Y' then mat_hosp_days_cnt 
                        else 0 
                    end)- sum

                    (case 
                        when Testing_IND   = 'Y' then mat_icu_days_cnt 
                        else 0 
                    end),0),comma12.) as curr_metric_t

        from work.cp_ip_dim_agg_

        OUTER UNION CORR

            select 8 as row_order,
            'ICU Bed Days' as desc,
                put(sum
                    (case 
                        when Diagnosis_IND = 'Y' then mat_icu_days_cnt 
                        else 0 
                    end),smlnumb.) as curr_metric_d,

                put(sum
                    (case 
                        when Testing_IND   = 'Y' then mat_icu_days_cnt 
                        else 0 
                    end),smlnumb.) as curr_metric_t

        from work.cp_ip_dim_agg_
;
QUIT;

PROC SQL;
	create table work.cp_900_obj_17 as
		select  tmpl.desc,

			coalesce(obj.curr_metric_d,tmpl.curr_metric_d,) as curr_metric_d,
			coalesce(obj.curr_metric_t,tmpl.curr_metric_t,) as curr_metric_t

		from   work.cp_900_obj17_template tmpl

		LEFT JOIN

			work.cp_900_obj_17         obj
			on     tmpl.row_order = obj.row_order
		order by tmpl.row_order
	;
QUIT;

/************************************************************************
 * OP Utilization - obj23
 ************************************************************************/
PROC SQL;
	create table work.cp_op_dim_agg as
		select msc_minor_categ,
			uc_ind,
			er_ind,
			Testing_IND,
			Diagnosis_IND,


			sum(mat_visit_cnt)      as mat_visit_cnt,
			sum(mat_plan_amt)       as mat_plan_amt

		from   work.cp_op_dim_agg
			group by
				msc_minor_categ,
				uc_ind,
				er_ind,
				Testing_IND,
				Diagnosis_IND
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj23_template
		(
		row_order         num,
		desc              char(40),
		curr_metric_d       num,
		curr_metric_t       num
		);
	insert into  work.cp_900_obj23_template
		(row_order, desc, curr_metric_d, curr_metric_t)
	values(1,'Surgeries',0,0)
	values(2,'Diagnostics',0,0)
	values(3,'ER Visits' ,0,0)
	values(4,'UC Visits' ,0,0)
	values(6,'Other',0,0)
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj23_dim_agg as
		select 1                  as row_order,
			sum
		(case 
			when Diagnosis_IND = 'Y' then mat_visit_cnt 
			else 0 
		end)
	as curr_metric_d,
		sum
	(case 
		when Testing_IND   = 'Y' then mat_visit_cnt 
		else 0 
	end)
as curr_metric_t
	from   work.cp_op_dim_agg
		where  msc_minor_categ = '11'
			OUTER UNION CORR
				select 2                as row_order,
					sum
				(case 
					when Diagnosis_IND = 'Y' then mat_visit_cnt 
					else 0 
				end)
			as curr_metric_d,
				sum
			(case 
				when Testing_IND   = 'Y' then mat_visit_cnt 
				else 0 
			end)
		as curr_metric_t
			from   work.cp_op_dim_agg
				where  msc_minor_categ = '10'
					OUTER UNION CORR
						select 3                as row_order,
							sum
						(case 
							when Diagnosis_IND = 'Y' then mat_visit_cnt 
							else 0 
						end)
					as curr_metric_d,
						sum
					(case 
						when Testing_IND   = 'Y' then mat_visit_cnt 
						else 0 
					end)
				as curr_metric_t
					from   work.cp_op_dim_agg
						where  er_ind = 'Y'
							OUTER UNION CORR
								select 4                as row_order,
									sum
								(case 
									when Diagnosis_IND = 'Y' then mat_visit_cnt 
									else 0 
								end)
							as curr_metric_d,
								sum
							(case 
								when Testing_IND   = 'Y' then mat_visit_cnt 
								else 0 
							end)
						as curr_metric_t
							from   work.cp_op_dim_agg
								where  uc_ind = 'Y'
									OUTER UNION CORR
										select 6                as row_order,
											sum
										(case 
											when Diagnosis_IND = 'Y' then mat_visit_cnt 
											else 0 
										end)
									as curr_metric_d,
										sum
									(case 
										when Testing_IND   = 'Y' then mat_visit_cnt 
										else 0 
									end)
								as curr_metric_t
									from   work.cp_op_dim_agg
										where  msc_minor_categ ^in('10','11') and er_ind ^= 'Y' and uc_ind ^= 'Y'
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_23 as
		select  tmpl.desc,

			coalesce(obj.curr_metric_d,tmpl.curr_metric_d) as curr_metric_d,
			coalesce(obj.curr_metric_t,tmpl.curr_metric_t) as curr_metric_t

		from   work.cp_900_obj23_template tmpl

		LEFT JOIN

			work.cp_900_obj23_dim_agg         obj
			on     tmpl.row_order = obj.row_order
		order  by tmpl.row_order
	;
QUIT;

/************************************************************************
 * Professional Spend - obj26
 ************************************************************************/
PROC SQL;
	create table work.cp_pro_obj26_dim_agg as
		select pro.msc_subminor_categ,
			Testing_IND,
			Diagnosis_IND,
			sum(mat_visit_cnt)          as mat_visit_cnt,
			sum(mat_svc_cnt)            as mat_svc_cnt,
			sum(mat_plan_amt)           as mat_plan_amt,
			msc_subm_abbr_shrt_desc

		from   work.cp_pro_detail      pro

		LEFT JOIN

			cr_ref.msc_subminor_categ  ref
			on     pro.msc_subminor_categ = ref.msc_subminor_categ

		where  confmt_ind = 'Y' /*and Diagnosis_IND = 'Y'*/
	group  by
		msc_subm_abbr_shrt_desc,
		Testing_IND,
		Diagnosis_IND,
		pro.msc_subminor_categ
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj26_template
		(
		row_order         num,
		desc              char(40),
		curr_metric_d       num,
		curr_metric_t       num
		);
	insert into  work.cp_900_obj26_template
		(row_order, desc, curr_metric_d, curr_metric_t)
	values(1,'IP Visit',0,0)
	values(2,'Diagnostic',0,0)
	values(3,'Lab',0,0)
	values(4,'Consult',0,0)
	values(5,'Radiology',0,0)
	values(6,'Other',0,0)
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj26_dim_agg as
		select 1                  as row_order,
			sum
		(case 
			when Diagnosis_IND = 'Y' then mat_visit_cnt 
			else 0 
		end)
	as curr_metric_d,
		sum
	(case 
		when Testing_IND   = 'Y' then mat_visit_cnt 
		else 0 
	end)
as curr_metric_t
	from   work.cp_pro_obj26_dim_agg
		where  msc_subminor_categ = '203'
			OUTER UNION CORR
				select 2                as row_order,
					sum
				(case 
					when Diagnosis_IND = 'Y' then mat_visit_cnt 
					else 0 
				end)
			as curr_metric_d,
				sum
			(case 
				when Testing_IND   = 'Y' then mat_visit_cnt 
				else 0 
			end)
		as curr_metric_t
			from   work.cp_pro_obj26_dim_agg
				where  msc_subminor_categ = '037'
					OUTER UNION CORR
						select 3                as row_order,
							sum
						(case 
							when Diagnosis_IND = 'Y' then mat_visit_cnt 
							else 0 
						end)
					as curr_metric_d,
						sum
					(case 
						when Testing_IND   = 'Y' then mat_visit_cnt 
						else 0 
					end)
				as curr_metric_t
					from   work.cp_pro_obj26_dim_agg
						where  msc_subminor_categ = '093'
							OUTER UNION CORR
								select 4                as row_order,
									sum
								(case 
									when Diagnosis_IND = 'Y' then mat_visit_cnt 
									else 0 
								end)
							as curr_metric_d,
								sum
							(case 
								when Testing_IND   = 'Y' then mat_visit_cnt 
								else 0 
							end)
						as curr_metric_t
							from   work.cp_pro_obj26_dim_agg
								where  msc_subminor_categ = '201'
									OUTER UNION CORR
										select 5                as row_order,
											sum
										(case 
											when Diagnosis_IND = 'Y' then mat_visit_cnt 
											else 0 
										end)
									as curr_metric_d,
										sum
									(case 
										when Testing_IND   = 'Y' then mat_visit_cnt 
										else 0 
									end)
								as curr_metric_t
									from   work.cp_pro_obj26_dim_agg
										where  msc_subminor_categ = '155'
											OUTER UNION CORR
												select 6                as row_order,
													sum
												(case 
													when Diagnosis_IND = 'Y' then mat_visit_cnt 
													else 0 
												end)
											as curr_metric_d,
												sum
											(case 
												when Testing_IND   = 'Y' then mat_visit_cnt 
												else 0 
											end)
										as curr_metric_t
											from   work.cp_pro_obj26_dim_agg
												where  msc_subminor_categ ^in('203','037','093','201','155')
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_26 as
		select  tmpl.desc,

			coalesce(obj.curr_metric_d,tmpl.curr_metric_d) as curr_metric_d,
			coalesce(obj.curr_metric_t,tmpl.curr_metric_t) as curr_metric_t

		from   work.cp_900_obj26_template tmpl

		LEFT JOIN

			work.cp_900_obj26_dim_agg         obj
			on     tmpl.row_order = obj.row_order
		order  by tmpl.row_order
	;
QUIT;

/************************************************************************
 * Professional Spend - obj28
 ************************************************************************/
PROC SQL;
	create table work.cp_pro_obj28_dim_agg as
		select pro.msc_subminor_categ,
			Testing_IND,
			Diagnosis_IND,
			sum(mat_visit_cnt)          as mat_visit_cnt,
			sum(mat_svc_cnt)            as mat_svc_cnt,
			sum(mat_plan_amt)           as mat_plan_amt,
			msc_subm_abbr_shrt_desc

		from   work.cp_pro_detail      pro

		LEFT JOIN

			cr_ref.msc_subminor_categ  ref
			on     pro.msc_subminor_categ = ref.msc_subminor_categ

		where  confmt_ind ^= 'Y' /* and Diagnosis_IND = 'Y'*/
	group  by
		msc_subm_abbr_shrt_desc,
		Testing_IND,
		Diagnosis_IND,
		pro.msc_subminor_categ
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj28_template
		(
		row_order         num,
		desc              char(40),
		curr_metric_d       num,
		curr_metric_t       num
		);
	insert into  work.cp_900_obj28_template
		(row_order, desc, curr_metric_d, curr_metric_t)
	values(1,'ER',0,0)
	values(2,'Surgery',0,0)
	values(3,'Diagnostic',0,0)
	values(4,'Radiology',0,0)
	values(5,'MH/SA',0,0)
	values(6,'Rehab/Therapy',0,0)
	values(7,'Lab',0,0)
	values(8,'Other',0,0)
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj28_dim_agg as
		select 1                  as row_order,
			sum
		(case 
			when Diagnosis_IND = 'Y' then mat_visit_cnt 
			else 0 
		end)
	as curr_metric_d,
		sum
	(case 
		when Testing_IND   = 'Y' then mat_visit_cnt 
		else 0 
	end)
as curr_metric_t
	from   work.cp_pro_obj28_dim_agg
		where  msc_subminor_categ = '049'
			OUTER UNION CORR
				select 2                as row_order,
					sum
				(case 
					when Diagnosis_IND = 'Y' then mat_visit_cnt 
					else 0 
				end)
			as curr_metric_d,
				sum
			(case 
				when Testing_IND   = 'Y' then mat_visit_cnt 
				else 0 
			end)
		as curr_metric_t
			from   work.cp_pro_obj28_dim_agg
				where  msc_subminor_categ = '208'
					OUTER UNION CORR
						select 3                as row_order,
							sum
						(case 
							when Diagnosis_IND = 'Y' then mat_visit_cnt 
							else 0 
						end)
					as curr_metric_d,
						sum
					(case 
						when Testing_IND   = 'Y' then mat_visit_cnt 
						else 0 
					end)
				as curr_metric_t
					from   work.cp_pro_obj28_dim_agg
						where  msc_subminor_categ = '037'
							OUTER UNION CORR
								select 4                as row_order,
									sum
								(case 
									when Diagnosis_IND = 'Y' then mat_visit_cnt 
									else 0 
								end)
							as curr_metric_d,
								sum
							(case 
								when Testing_IND   = 'Y' then mat_visit_cnt 
								else 0 
							end)
						as curr_metric_t
							from   work.cp_pro_obj28_dim_agg
								where  msc_subminor_categ = '155'
									OUTER UNION CORR
										select 5                as row_order,
											sum
										(case 
											when Diagnosis_IND = 'Y' then mat_visit_cnt 
											else 0 
										end)
									as curr_metric_d,
										sum
									(case 
										when Testing_IND   = 'Y' then mat_visit_cnt 
										else 0 
									end)
								as curr_metric_t
									from   work.cp_pro_obj28_dim_agg
										where  msc_subminor_categ = '195'
											OUTER UNION CORR
												select 6                as row_order,
													sum
												(case 
													when Diagnosis_IND = 'Y' then mat_visit_cnt 
													else 0 
												end)
											as curr_metric_d,
												sum
											(case 
												when Testing_IND   = 'Y' then mat_visit_cnt 
												else 0 
											end)
										as curr_metric_t
											from   work.cp_pro_obj28_dim_agg
												where  msc_subminor_categ = '143'
													OUTER UNION CORR
														select 7                as row_order,
															sum
														(case 
															when Diagnosis_IND = 'Y' then mat_visit_cnt 
															else 0 
														end)
													as curr_metric_d,
														sum
													(case 
														when Testing_IND   = 'Y' then mat_visit_cnt 
														else 0 
													end)
												as curr_metric_t
													from   work.cp_pro_obj28_dim_agg
														where  msc_subminor_categ = '093'
															OUTER UNION CORR
																select 8                as row_order,
																	sum
																(case 
																	when Diagnosis_IND = 'Y' then mat_visit_cnt 
																	else 0 
																end)
															as curr_metric_d,
																sum
															(case 
																when Testing_IND   = 'Y' then mat_visit_cnt 
																else 0 
															end)
														as curr_metric_t
															from   work.cp_pro_obj28_dim_agg
																where  msc_subminor_categ ^in('049','208','037','155','195','143','093')
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_28 as
		select  tmpl.desc,

			coalesce(obj.curr_metric_d,tmpl.curr_metric_d) as curr_metric_d,
			coalesce(obj.curr_metric_t,tmpl.curr_metric_t) as curr_metric_t

		from   work.cp_900_obj28_template tmpl

		LEFT JOIN

			work.cp_900_obj28_dim_agg         obj
			on     tmpl.row_order = obj.row_order
		order  by tmpl.row_order
	;
QUIT;

/************************************************************************
 * Professional Spend - obj30
 ************************************************************************/
PROC SQL;
	create table work.cp_ov_obj30_dim_agg as
		select pro.msc_subminor_categ,virtual_ind,
			Testing_IND,
			Diagnosis_IND,
			sum(mat_visit_cnt)            as mat_visit_cnt,
			sum(mat_plan_amt)           as mat_plan_amt,
			msc_subm_abbr_shrt_desc

		from   work.cp_ov              pro

		LEFT JOIN

			cr_ref.msc_subminor_categ  ref
			on     pro.msc_subminor_categ = ref.msc_subminor_categ

		where  confmt_ind ^= 'Y' /* and Diagnosis_IND = 'Y' */
	group by
		msc_subm_abbr_shrt_desc,virtual_ind,
		Testing_IND,
		Diagnosis_IND,
		pro.msc_subminor_categ
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj30_template
		(
		row_order         num,
		desc              char(40),
		curr_metric_d       num,
		curr_metric_t       num
		);
	insert into  work.cp_900_obj30_template
		(row_order, desc, curr_metric_d, curr_metric_t)
	values(1,'E&M',0,0)
	values(2,'OMS Drugs',0,0)
	values(3,'MH/SA',0,0)
	values(4,'Surgery',0,0)
	values(5,'Radiology',0,0)
	values(6,'Lab',0,0)
	values(7,'Diagnostic',0,0)
	values(8,'Rehab/Therapy',0,0)
	values(9,'Virtual Care/Teleheath',0,0)
	values(10,'Other',0,0)
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj30_dim_agg as
		select 1                  as row_order,
			sum
		(case 
			when Diagnosis_IND = 'Y' then mat_visit_cnt 
			else 0 
		end)
	as curr_metric_d,
		sum
	(case 
		when Testing_IND   = 'Y' then mat_visit_cnt 
		else 0 
	end)
as curr_metric_t
	from   work.cp_ov_obj30_dim_agg
		where  msc_subminor_categ = '122' and virtual_ind ne 'Y'
			OUTER UNION CORR
				select 2                as row_order,
					sum
				(case 
					when Diagnosis_IND = 'Y' then mat_visit_cnt 
					else 0 
				end)
			as curr_metric_d,
				sum
			(case 
				when Testing_IND   = 'Y' then mat_visit_cnt 
				else 0 
			end)
		as curr_metric_t
			from   work.cp_ov_obj30_dim_agg
				where  msc_subminor_categ = '310' and virtual_ind ne 'Y'
					OUTER UNION CORR
						select 3                as row_order,
							sum
						(case 
							when Diagnosis_IND = 'Y' then mat_visit_cnt 
							else 0 
						end)
					as curr_metric_d,
						sum
					(case 
						when Testing_IND   = 'Y' then mat_visit_cnt 
						else 0 
					end)
				as curr_metric_t
					from   work.cp_ov_obj30_dim_agg
						where  msc_subminor_categ = '195' and virtual_ind ne 'Y'
							OUTER UNION CORR
								select 4                as row_order,
									sum
								(case 
									when Diagnosis_IND = 'Y' then mat_visit_cnt 
									else 0 
								end)
							as curr_metric_d,
								sum
							(case 
								when Testing_IND   = 'Y' then mat_visit_cnt 
								else 0 
							end)
						as curr_metric_t
							from   work.cp_ov_obj30_dim_agg
								where  msc_subminor_categ = '208' and virtual_ind ne 'Y'
									OUTER UNION CORR
										select 5                as row_order,
											sum
										(case 
											when Diagnosis_IND = 'Y' then mat_visit_cnt 
											else 0 
										end)
									as curr_metric_d,
										sum
									(case 
										when Testing_IND   = 'Y' then mat_visit_cnt 
										else 0 
									end)
								as curr_metric_t
									from   work.cp_ov_obj30_dim_agg
										where  msc_subminor_categ = '155' and virtual_ind ne 'Y'
											OUTER UNION CORR
												select 6                as row_order,
													sum
												(case 
													when Diagnosis_IND = 'Y' then mat_visit_cnt 
													else 0 
												end)
											as curr_metric_d,
												sum
											(case 
												when Testing_IND   = 'Y' then mat_visit_cnt 
												else 0 
											end)
										as curr_metric_t
											from   work.cp_ov_obj30_dim_agg
												where  msc_subminor_categ = '093' and virtual_ind ne 'Y'
													OUTER UNION CORR
														select 7                as row_order,
															sum
														(case 
															when Diagnosis_IND = 'Y' then mat_visit_cnt 
															else 0 
														end)
													as curr_metric_d,
														sum
													(case 
														when Testing_IND   = 'Y' then mat_visit_cnt 
														else 0 
													end)
												as curr_metric_t
													from   work.cp_ov_obj30_dim_agg
														where  msc_subminor_categ = '037' and virtual_ind ne 'Y'
															OUTER UNION CORR
																select 8                as row_order,
																	sum
																(case 
																	when Diagnosis_IND = 'Y' then mat_visit_cnt 
																	else 0 
																end)
															as curr_metric_d,
																sum
															(case 
																when Testing_IND   = 'Y' then mat_visit_cnt 
																else 0 
															end)
														as curr_metric_t
															from   work.cp_ov_obj30_dim_agg
																where  msc_subminor_categ = '143' and virtual_ind ne 'Y'
																	OUTER UNION CORR
																		select 9                as row_order,
																			sum
																		(case 
																			when Diagnosis_IND = 'Y' then mat_visit_cnt 
																			else 0 
																		end)
																	as curr_metric_d,
																		sum
																	(case 
																		when Testing_IND   = 'Y' then mat_visit_cnt 
																		else 0 
																	end)
																as curr_metric_t
																	from   work.cp_ov_obj30_dim_agg
																		where  virtual_ind eq 'Y'
																			OUTER UNION CORR
																				select 10                as row_order,
																					sum
																				(case 
																					when Diagnosis_IND = 'Y' then mat_visit_cnt 
																					else 0 
																				end)
																			as curr_metric_d,
																				sum
																			(case 
																				when Testing_IND   = 'Y' then mat_visit_cnt 
																				else 0 
																			end)
																		as curr_metric_t
																			from   work.cp_ov_obj30_dim_agg
																				where  (
																					virtual_ind ne 'Y' and msc_subminor_categ ^in('122','310','195','208','155','093','037','143')
				)
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_30 as
		select  tmpl.desc,

			coalesce(obj.curr_metric_d,tmpl.curr_metric_d) as curr_metric_d,
			coalesce(obj.curr_metric_t,tmpl.curr_metric_t) as curr_metric_t

		from   work.cp_900_obj30_template tmpl

		LEFT JOIN

			work.cp_900_obj30_dim_agg         obj
			on     tmpl.row_order = obj.row_order
		order  by tmpl.row_order
	;
QUIT;

/************************************************************************
 * Other Medical Services - obj31
 ************************************************************************/
PROC SQL;
	create table work.cp_oms_obj31_dim_agg as
		select
			desc,
			sum
		(case 
			when Diagnosis_IND = 'Y' then svc_unit_cnt 
			else 0 
		end)
	as curr_metric_d,
		sum
	(case 
		when Testing_IND   = 'Y' then svc_unit_cnt 
		else 0 
	end)
as curr_metric_t
	from (
		select 
			case 
				when msc_minor_categ = '32' then 'Transportation'
				when msc_minor_categ = '5' then 'DME'
				when proc_cd in ('94002','94003','33946','33947','33948','33949','33950','33951','33952','33953','33954','33955',
				'33956','33957','33958','33959','33960','33961','33962','33963','33964','33965',
				'33966','33967','33968','33969','33970','33971','33972','33973','33974','33975',
				'33976','33977','33978','33979','33980','33981','33982','33983','33984','33985',
				'33986','33987','33988','33989',
				/*'5A0920Z','5A09357','5A09358','5A09359','5A0935B','5A0935Z','5A09457','5A09458',
				'5A09459','5A0945B','5A0945Z','5A09557','5A09558','5A09559','5A0955B','5A0955Z'*/) then 'Ventilators/Respiratory Supplies'
				else 'Other' 
			end 
		as desc,
			Testing_IND,
			Diagnosis_IND,
			svc_unit_cnt
		from   work.cp_e_claim
			where  msc_major_categ in ('03')
				)
					group by
						desc
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj31_template
		(
		row_order         num,
		desc              char(40),
		curr_metric_d       num,
		curr_metric_t       num
		);
	insert into  work.cp_900_obj31_template
		(row_order, desc, curr_metric_d,curr_metric_t)
	values(1,'Transportation',0,0)
	values(2,'DME',0,0)
	values(3,'Ventilators/Respiratory Supplies',0,0)
	values(10,'Other',0,0)
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_31 as
		select  tmpl.desc,

			coalesce(obj.curr_metric_d,tmpl.curr_metric_d) as curr_metric_d,
			coalesce(obj.curr_metric_t,tmpl.curr_metric_t) as curr_metric_t

		from   work.cp_900_obj31_template tmpl

		LEFT JOIN

			work.cp_oms_obj31_dim_agg         obj
			on     tmpl.desc = obj.desc
		order  by tmpl.row_order
	;
QUIT;

/************************************************************************
 * Pharmacy - obj32
 ************************************************************************/
PROC SQL;
	create table work.cp_rx_obj32_dim_agg as
		select
			spfc_thrpdc_clss        as desc,
			sum(rtl_adj_presc_cnt)    as curr_presc_cnt ,
			count(distinct brnd_nm) as curr_drug_cnt,
			sum(rx_plan_amt)          as curr_metric       

		from   work.cp_covid_pharmacy
			group by
				desc
			order by 
				curr_metric desc
	;
QUIT;

DATA work.cp_rx_obj32_dim_agg;
	SET work.cp_rx_obj32_dim_agg;
	row_order = _N_;
run;

PROC SQL;
	create table work.cp_900_obj32_template
		(
		row_order         num,
		desc              char(40),
		curr_presc_cnt    num,
		curr_drug_cnt     num,
		curr_metric       num
		);
	insert into  work.cp_900_obj32_template
		(row_order, desc, curr_presc_cnt, curr_drug_cnt, curr_metric)
	values(1,'Class 1',0,0,0)
	values(2,'Class 2',0,0,0)
	values(3,'Class 3',0,0,0)
	values(4,'Class 4',0,0,0)
	values(5,'All Other',0,0,0)
	values(6,'Total',0,0,0)
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj32_dim_agg as
		select  
			row_order,
			desc,
			curr_presc_cnt ,
			curr_drug_cnt,
			curr_metric  	
		from 
			work.cp_rx_obj32_dim_agg
		where
			row_order in (1,2,3,4)

			union all

		select  
			5 as row_order,
			'All Other' as desc,
			sum(curr_presc_cnt),
			sum(curr_drug_cnt),
			sum(curr_metric)  	
		from 
			work.cp_rx_obj32_dim_agg
		where
			row_order not in (1,2,3,4)

			union all

		select  
			6 as row_order,
			'Total' as desc,
			sum(curr_presc_cnt),
			sum(curr_drug_cnt),
			sum(curr_metric)  	
		from 
			work.cp_rx_obj32_dim_agg
	;
QUIT;

PROC SQL;
	create table work.cp_900_obj_32 as
		select  coalesce(obj.desc,tmpl.desc) as desc,
			coalesce(obj.curr_presc_cnt,tmpl.curr_presc_cnt) as curr_presc_cnt,
			coalesce(obj.curr_drug_cnt,tmpl.curr_drug_cnt) as curr_drug_cnt,
			coalesce(obj.curr_metric,tmpl.curr_metric) as curr_metric

		from   work.cp_900_obj32_template tmpl

		LEFT JOIN

			work.cp_900_obj32_dim_agg         obj
			on     tmpl.row_order = obj.row_order
		order  by tmpl.row_order
	;
QUIT;

/************************************************************************
 * Pharmacy Detail - obj33
 ************************************************************************/
PROC SQL;
	create table work.cp_900_obj_33 as
		select
			brnd_nm,
			spfc_thrpdc_clss,
			sum(rtl_adj_presc_cnt)    as curr_presc_cnt,
			sum(rx_plan_amt)          as curr_metric       

		from   work.cp_covid_pharmacy
			group by
				brnd_nm,
				spfc_thrpdc_clss
			order by 
				curr_metric desc
	;
QUIT;
;
*****************************************************************************************************************************************
%MACRO REPORT_ACCT_LVL;
	ODS LISTING CLOSE;

	data _null_;
		date1=substr(strip(put(input("&Q_curr_pd_beg_yrmo.01",yymmdd8.),worddatx.)),3);
		date2=substr(strip(put(input("&Q_curr_pd_end_yrmo.01",yymmdd8.),worddatx.)),3);
		call symputx("title_date1",date1);
		call symputx("title_date2",date2);
	run;

	%let workpath = %sysfunc(pathname(work));
	ods tagsets.ExcelXP file = "/user/hce/&sysuserid./&proj_id._&client_nm._&acct_num._&title_date1. - &title_date2._TC160.xls" style=htmlblue
		options(	
		sheet_interval='none'
		sheet_name='TC 160'
		embedded_titles='Yes'
		embedded_footnotes='Yes'
		center_horizontal='yes'
		center_vertical='yes'
		absolute_column_width='30,17,17,17'
		row_heights='15,15,15,15,15,15' 
		autofit_heights='no'
		);
	title  bcolor=white JUSTIFY=CENTER c = 	white "_";
	title2 bcolor=white color=black  BOLD JUSTIFY=CENTER "TC 160 Covid-19 Detail";
	title3 bcolor=white color=black  BOLD JUSTIFY=CENTER "&CLIENT_NM.";
	title4 bcolor=white color=black  BOLD JUSTIFY=CENTER "Account Numbers: &acct_num";
	title5 bcolor=white color=black  BOLD wrap JUSTIFY=CENTER "Paid Dates: &title_date1 - &title_date2";
	title6 bcolor=white color=black  BOLD JUSTIFY=CENTER "&proj_id";

	%IF %UPCASE (&intended_use) = Internal %THEN
		%DO;
			title7 bcolor=white color=black  BOLD JUSTIFY=CENTER "INTERNAL USE ONLY";
		%END;
	%ELSE
		%DO;
			title7 bcolor=white color=black  BOLD JUSTIFY=CENTER "INTENDED FOR &external_recipient. ONLY";
		%END;

	%IF %UPCASE (&ASO) = N AND (&intended_use) = Internal %THEN
		%DO;
			title8 bcolor=white color=black  BOLD JUSTIFY=CENTER "THIS IS SENSITIVE DATA - THIS MAY NOT BE SHARED EXTERNALLY";
		%END;

	/*	footnote1 height=8pt italic justify=left color=black "Request Id: &cp_request_id. Report View Id: &report_view_id.";
	footnote2  height=8pt italic justify=left color=black "'% of Total' is calculated using the average number of members as the denominator and the unique count of members for each program line metric as the numerator";
	footnote3  height=8pt italic justify=left color=black "'Trend' is calculated as the unique member count change between the Base and Current Period";
	*/
	footnote;
	%let title_style=justify=center bold bcolor=ltgray color=black;
	title9  &title_style "Financial Overview";

	Proc Report data=work.cp_900_obj_01
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		columns desc current;
		define desc    / display style={tagattr='format:text'} "Population";
		define current / display style(column)={just=right} "#";

		compute current;

			if desc = 'Average Members' then
				do;
					call define(_col_,'style','style={tagattr="#,###,##0"}');
				end;
			else if desc = 'Percent of Total Membership Diagnosed' then
				do;
					call define(_col_,'style','style={tagattr="#,##0.0000%"}');
				end;
		endcomp;
	run;

	title;

	Proc Report data=work.cp_900_obj_03
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		format curr_mat_plan_amt curr_pmbasis dollar15.2;
		columns desc curr_mat_plan_amt curr_pmbasis;
		define desc    / display style={tagattr='format:text'} "Plan Spend";
		define curr_mat_plan_amt / display  "Total Plan Spend";
		define curr_pmbasis / display  "PMPM";
	run;

	Proc Report data=work.cp_900_obj_04
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		format curr_mat_paid_amt curr_pmbasis dollar15.2;
		columns desc curr_mat_paid_amt curr_pmbasis;
		define desc    / display style={tagattr='format:text'} "Employer Spend";
		define curr_mat_paid_amt / display "Total Employer Spend";
		define curr_pmbasis / display "PMPM";
	run;

	Proc Report data=work.cp_900_obj_05
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		format curr_mat_cost_shr_amt curr_pmbasis dollar15.2;
		columns desc curr_mat_cost_shr_amt curr_pmbasis;
		define desc    / display style={tagattr='format:text'} "Member Spend";
		define curr_mat_cost_shr_amt / display  "Total Member Spend";
		define curr_pmbasis / display  "PMPM";
	run;

	Proc Report data=work.cp_900_obj_07 split="~"
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		format curr_mat_plan_amt curr_pmbasis dollar15.2;
		columns msc_major_desc curr_mat_plan_amt curr_pmbasis;
		define msc_major_desc    / display style={tagattr='format:text'} "Spend for Testing and Claims with a Covid Diagnosis by MSC**";
		define curr_mat_plan_amt / display  "Spend";
		define curr_pmbasis / display  "PMPM";
	run;

	Proc Report data=work.cp_900_obj_06 split="~"
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		format current PERCENTN10.2;
		define desc    / display style={tagattr='format:text'} "Network Provider Utilization";
		define current / display  "Percent of Utilized Providers";
	run;

	title &title_style  "Demographics - Diagnosed";

	Proc Report data=work.cp_90X_obj_09 SPLIT="~"
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		define desc    / display style={tagattr='format:text'} "Age/Gender/Relationship";
		define current / display style(column)={just=right} "#";
	run;

	title;

	Proc Report data=work.cp_900_obj_10
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		columns age_band_desc curr_female_pct curr_male_pct;
		define age_band_desc    / display style={tagattr='format:text'} "Age Band";
		define curr_female_pct / display style={tagattr='format:#,##0.00%'} "% Female";
		define curr_male_pct / display style={tagattr='format:#,##0.00%'} "% Male";
	run;

	title &title_style  "Inpatient";

	Proc Report data=work.cp_900_obj_17
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		define desc    / display style={tagattr='format:text'} "Facility Inpatient";

		/*define curr_metric / display style={tagattr='format:###,##0'} "#";*/
		define curr_metric_d / display style(column)={just=right} "# Diagnosed";
		define curr_metric_t / display style(column)={just=right} "# Tested";
	run;

	title &title_style  "Outpatient";

	Proc Report data=work.cp_900_obj_23
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		define desc    / display style={tagattr='format:text'} "Facility Outpatient";
		define curr_metric_d / display style={tagattr='format:text'} "Visits - Diagnosed";
		define curr_metric_t / display style={tagattr='format:text'} "Visits - Tested";
	run;

	title &title_style  "Professional";

	Proc Report data=work.cp_900_obj_26
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		define desc    / display style={tagattr='format:text'} "Professional Inpatient";
		define curr_metric_d / display style={tagattr='format:text'} "Visits - Diagnosed";
		define curr_metric_t / display style={tagattr='format:text'} "Visits - Tested";
	run;

	title;

	Proc Report data=work.cp_900_obj_28
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		define desc    / display style={tagattr='format:text'} "Professional Outpatient";
		define curr_metric_d / display style={tagattr='format:text'} "Visits - Diagnosed";
		define curr_metric_t / display style={tagattr='format:text'} "Visits - Tested";
	run;

	Proc Report data=work.cp_900_obj_30
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		define desc    / display style={tagattr='format:text'} "Professional Office";
		define curr_metric_d / display style={tagattr='format:text'} "Visits - Diagnosed";
		define curr_metric_t / display style={tagattr='format:text'} "Visits - Tested";
	run;

	title &title_style "Other Medical Services";

	Proc Report data=work.cp_900_obj_31
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		define desc    / display style={tagattr='format:text'} "Other Medical Services";
		define curr_metric_d / display style={tagattr='format:text'} "Services - Diagnosed";
		define curr_metric_t / display style={tagattr='format:text'} "Services - Tested";
	run;

	title &title_style "Pharmacy";
	footnote;
	footnote1  height=8pt /*italic*/
	justify=left bcolor=white color=black "*Treatment = Confirmed COVID-19 Diagnosis (ICD B9729 or U071) with any CPT between 99201- 99499";
	footnote2  height=8pt /*italic*/
	justify=left bcolor=white color=black "**Spend for Testing and Claims with a COVID-19 Diagnosis by MSC = all spend for testing of any individual";
	footnote3  height=8pt /*italic*/
	justify=left bcolor=white color=black "and treatment for individuals with a confirmed diagnosis as well as any other claim that includes a COVID-19 diagnosis";
	footnote4  height=8pt /*italic*/
	justify=left bcolor=white color=black "***Filtered to individuals with a positive COVID-19 Diagnosis and includes utilization of an extensive list of drugs that";
	footnote5  height=8pt /*italic*/
	justify=left bcolor=white color=black "are associated with the treatment of COVID-19";
	footnote6  height=8pt /*italic*/
	justify=left bcolor=white color=black "****Note that billing B9729 will no longer waive cost-share. Effective August 1, 2020, U071 must be billed to waive";
	footnote7  height=8pt /*italic*/
	justify=left bcolor=white color=black "cost-share for treatment of a confirmed COVID-19 diagnoses";
	footnote8  height=8pt /*italic*/
	justify=left bcolor=white color=black "*****Vaccination codes include 91300, 91301, 91302, 91303, 0001A, 0002A, 0011A, 0012A, 0021A, 0022A, 0031A, 0071A, 0072A and NDC codes 59676058015, 00310122210, 0310122210, 59267100001, 59267100002,
						59267100003, 5926710001, 59676058005, 5967658005, 80777027310, 80777027399, 8077727310";

	Proc Report data=work.cp_900_obj_32
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		format curr_metric dollar15.2;
		define desc    / display style={tagattr='format:text'} "Therapeutic Class";
		define curr_presc_cnt / display style={tagattr='format:text'} "Scripts";
		define curr_drug_cnt / display style={tagattr='format:text'} "Unique Drugs";
		define curr_metric / display "Plan Spend";
	run;

	title;
	footnote;
	ods tagsets.ExcelXP style=htmlblue
		options(	
		sheet_interval='proc'
		sheet_name='TC 160 Pharmacy Detail'
		embedded_titles='Yes'
		embedded_footnotes='Yes'
		center_horizontal='yes'
		center_vertical='yes'
		absolute_column_width='30,17,17,17'
		row_heights='15,15,15,15,15,15' 
		autofit_heights='no'
		);
	title  bcolor=white JUSTIFY=CENTER c = 	white "_";
	title2 bcolor=white color=black  BOLD JUSTIFY=CENTER "TC 160 Covid-19 Detail";
	title3 bcolor=white color=black  BOLD JUSTIFY=CENTER "&CLIENT_NM.";
	title4 bcolor=white color=black  BOLD JUSTIFY=CENTER "Account Numbers: &acct_num";
	title5 bcolor=white color=black  BOLD wrap JUSTIFY=CENTER "Paid Dates: &title_date1 - &title_date2";
	footnote;
	title7  &title_style "Pharmacy Detail";

	Proc Report data=work.cp_900_obj_33
		style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
		format curr_metric dollar15.2;
		define brnd_nm    / display style={tagattr='format:text'} "Drug Name";
		define spfc_thrpdc_clss    / display style={tagattr='format:text'} "Therapeutic Class";
		define curr_presc_cnt / display style={tagattr='format:text'} "Scripts";
		define curr_metric / display "Plan Spend";
	run;

	title;
	footnote;

	data Glossary;
		Length Metric $100 Definition $700;
		Metric="Membership";
		Definition="Total Member Months / Number of Months in the Report";
		output;
		Metric="Individuals Tested";
		Definition="Unique individuals with claims for CPT codes U0001, U0002, U0003, U0004, U0005, 87635, 86328, 86769, G2023, G2024, 87426, 0202U, 0223U, 0225U, 86408, 86409 ,C9803, 0240U, 0241U, 86413, 87428, 87636, 87637, 87811 and 0224U";
		output;
		Metric="Individuals Diagnosed";
		Definition="Unique individuals with claims for confirmed COVID-19 Diagnosis ICD codes B9729 or U071";
		output;
		Metric="Individuals Vaccinated";
		Definition="Unique individuals with claims for COVID-19 Vaccinations CPT codes 91300, 91301, 91302, 91303, 0001A, 0002A, 0011A, 0012A, 0021A, 0022A, 0031A, 0071A, 0072A and NDC codes 59676058015, 00310122210, 0310122210, 59267100001, 59267100002,
						59267100003, 5926710001, 59676058005, 5967658005, 80777027310, 80777027399, 8077727310";
		output;
		Metric="Plan Spend";
		Definition="Total cost of testing (CPT codes U0001, U0002, U0003, U0004, U0005, 87635, 86328, 86769, G2023, G2024, 87426, 0202U, 0223U, 0225U, 86408, 86409, C9803, 0240U, 0241U, 86413, 87428, 87636, 87637, 87811 and 0224U), vaccinations (CPT codes 91300, 91301, 91302, 91303, 0001A, 0002A, 0011A, 0012A, 0021A, 0022A, 0031A, 0071A, 0072A and NDC codes 59676058015, 00310122210, 0310122210, 59267100001, 59267100002,
						59267100003, 5926710001, 59676058005, 5967658005, 80777027310, 80777027399, 8077727310), and treatment (CPT codes between 99201- 99499) of those individuals that have a confirmed COVID-19 diagnosis (ICD codes B9729 or U071).";
		output;
		Metric="Employer Spend";
		Definition="Employer cost of testing (CPT codes U0001, U0002, U0003, U0004, U0005, 87635, 86328, 86769, G2023, G2024, 87426, 0202U, 0223U, 0225U, 86408, 86409, C9803, 0240U, 0241U, 86413, 87428, 87636, 87637, 87811 and 0224U), vaccinations (CPT codes 91300, 91301, 91302, 91303, 0001A, 0002A, 0011A, 0012A, 0021A, 0022A, 0031A, 0071A, 0072A and NDC codes 59676058015, 00310122210, 0310122210, 59267100001, 59267100002,
						59267100003, 5926710001, 59676058005, 5967658005, 80777027310, 80777027399, 8077727310), and treatment (CPT codes between 99201- 99499) of those individuals have a confirmed COVID-19 diagnosis (ICD codes B9729 or U071).";
		output;
		Metric="Member Spend";
		Definition="Member cost share for testing (CPT codes U0001, U0002, U0003, U0004, U0005, 87635, 86328, 86769, G2023, G2024, 87426, 0202U, 0223U, 0225U, 86408, 86409, C9803, 0240U, 0241U, 86413, 87428, 87636, 87637, 87811 and 0224U), vaccinations (CPT codes 91300, 91301, 91302, 91303, 0001A, 0002A, 0011A, 0012A, 0021A, 0022A, 0031A, 0071A, 0072A and NDC codes 59676058015, 00310122210, 0310122210, 59267100001, 59267100002,
						59267100003, 5926710001, 59676058005, 5967658005, 80777027310, 80777027399, 8077727310), and treatment (CPT codes between 99201- 99499) of those individuals have a confirmed COVID-19 diagnosis (ICD codes B9729 or U071).";
		output;
		Metric="Spend for Testing and Claims with a COVID-19 Diagnosis by MSC";
		Definition="Includes testing costs as well as treatment costs in any setting in addtion to any other claim that has a COVID-19 diagnosis in diagnosis fields 1-3";
		output;
		Metric="Network Provider Utilization";
		Definition="Indicates In-network provider utilization as a percent of total provider utilization for those that have utlized testing or treatment services";
		output;
		Metric="MSC";
		Definition="Medical Service Category - Inpatient, Outpatient, Professional , Pharmacy and Other Medical Services";
		output;
		Metric="Other Medical Services";
		Definition="Included durable medical equipment, Medical Specialty RX, Transportation etc.";
		output;
		Metric="Pharmacy Spend and Utilization";
		Definition="Filtered to individuals with a positive COVID-19 Diagnosis and includes utilization of an extensive list of drugs that are associated with the treatment of COVID-19";
		output;
		Metric="Facility Inpatient";
		Definition="Added 11/2020 - With changes in the presentation to enhance the available detail it is important to note that over time the metrics in the tested column for Inpatient will grow substantially as individuals will be tested for COVID upon admission. The tested column may grow larger than the diagnosed statistics.";
		output;
	Run;

	ods tagsets.ExcelXP style=htmlblue
		options(	
		sheet_interval='proc'
		sheet_name='Glossary'
		embedded_titles='Yes'
		center_horizontal='yes'
		center_vertical='yes'
		absolute_column_width='30,50'
		row_heights='15,15,15,15,15,15' 
		autofit_heights='no'
		);

	Proc Report data=work.Glossary style (header)={background=white vjust=m font_weight=bold color=black just=left};
		define metric    / display style(column)={just=left font_weight=bold vjust=m };
		define definition / display style(column)={just=left vjust=m };
	run;

	%IF %upcase(&include_detail) = Y %THEN
		%DO;
			/*title &title_style "COVID-19 DETAIL BREAKDOWN";*/
			ods tagsets.ExcelXP options
				(
				orientation='landscape'
				center_horizontal='yes'
				sheet_interval='table'
				sheet_name='Detail'
				sheet_label='COVID19 Report'
				embedded_titles='yes'
				embedded_footnotes='yes'
				suppress_bylines='yes'
				DEFAULT_COLUMN_WIDTH='8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
				8,8,8,8,8,8,8,8,8,8,8,8'
					);
			title  bcolor=white JUSTIFY=CENTER c = 	white "_";
			title2 bcolor=white color=black  BOLD JUSTIFY=CENTER "TC 160 Covid-19 Detail Breakdown";
			title3 bcolor=white color=black  BOLD JUSTIFY=CENTER "&CLIENT_NM.";
			title4 bcolor=white color=black  BOLD JUSTIFY=CENTER "Account Numbers: &acct_num";
			title5 bcolor=white color=black  BOLD wrap JUSTIFY=CENTER "Paid Dates: &title_date1 - &title_date2";
			title6 bcolor=white color=black  BOLD JUSTIFY=CENTER "&proj_id";
			title7 bcolor=white color=black  BOLD JUSTIFY=CENTER "This reporting contains PHI and use of the data contained is limited to purposes of treatment, payment and healthcare operations.";
			title8 bcolor=white color=black  BOLD JUSTIFY=CENTER "INTENDED FOR &external_recipient. ONLY";
			
			%IF %UPCASE(&vaccine_detail) = Y %THEN
			%DO;
			Proc report data = work.cp_e_claim 
				/*(obs = max) CP_E_CLAIM headskip missing split='*'
				ls=256 ps=57*/
				style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
				column
			%END;
   			%IF %UPCASE(&vaccine_detail) = N %THEN         
			%DO;
			Proc report data = work.detail
				/*(obs = max) CP_E_CLAIM headskip missing split='*'
				ls=256 ps=57*/
				style (header)={background=#CCFFCC vjust=m font_weight=bold color=black just=center};
				column
			%END;
 
				%IF %UPCASE(&include_phi_on_detail) = Y %THEN

					%DO;
						MBR_NUM
					%END;
				%IF %UPCASE(&include_phi_on_detail) = Y %THEN

					%DO;
						MBR_AGE
					%END;

				%IF %UPCASE(&include_phi_on_detail) = Y %THEN
					%DO;
						SEX_CD
					%END;

				%IF %UPCASE(&include_phi_on_detail) = Y %THEN
					%DO;
						MEMBR_RELSHP_CD
					%END;
				    MIDSU_CLIENT_ID
					MIDSU_ACCT_NUM
					MIDSU_BRNCH_CD
					BEN_PLAN_CD
					%IF %UPCASE(&include_phi_on_detail) = Y %THEN

					%DO;
						CLM_NUM
					%END;

				%IF %UPCASE(&include_phi_on_detail) = Y %THEN
					%DO;
						LN_NUM
					%END;

				%IF %UPCASE(&include_phi_on_detail) = Y %THEN
					%DO;
						ORIG_MBR_NUM
					%END;

				%IF %UPCASE(&include_phi_on_detail) = Y %THEN
					%DO;
						SUBSCRBR_STE_CD
					%END;

				MSC_MAJOR_CATEG
					MSC_MINOR_CATEG
					MSC_SUBMINOR_CATEG
					PARTCPTG_IND
					DIAG_CD1
					DIAG_CD2
					DIAG_CD3
					PROC_CD
					HCFA_SVC_LOC_CD
					%IF %UPCASE(&include_phi_on_detail) = Y %THEN

					%DO;
						SVC_DT
					%END;

			     	DIAGNOSIS_IND
					TREATMENT_IND
					TESTING_IND
					OTC_TESTING_IND
					VIRTUAL_IND
					%IF %UPCASE(&vaccine_detail) = Y %THEN
					%DO;
					VACCINATED_IND
					%END;
					PD_DT
					%IF %UPCASE(&ASO) = Y %THEN
					%DO;
					PAY_AMT
					%END;
					%IF %UPCASE(&ASO) = Y %THEN
					%DO;
					COST_SHR_AMT
					%END;
					PLAN_AMT
				/*	%IF %UPCASE(&include_phi_on_detail) = Y %THEN

					%DO;
						MBR_AGE
					%END;

				%IF %UPCASE(&include_phi_on_detail) = Y %THEN
					%DO;
						SEX_CD
					%END;

				%IF %UPCASE(&include_phi_on_detail) = Y %THEN
					%DO;
						MEMBR_RELSHP_CD
					%END;*/
				;
				define MBR_NUM /  display "MEMBER ID" style={tagattr='format:text'};
				define MBR_AGE /  display "MEMBER AGE" style={tagattr='format:text'};
				define SEX_CD /  display "MEMBER GENDER" style={tagattr='format:text'};
				define MEMBR_RELSHP_CD /  display "MEMBER RELATIONSHIP" style={tagattr='format:text'};
				define MIDSU_CLIENT_ID /  display "CLIENT ID" style={tagattr='format:text'};
				define MIDSU_ACCT_NUM /  display "ACCOUNT NUMBER" style={tagattr='format:text'};
				define MIDSU_BRNCH_CD /  display "BRANCH CODE" style={tagattr='format:text'};
				define BEN_PLAN_CD /  display "BENEFIT PLAN CODE" style={tagattr='format:text'};
				define CLM_NUM /  display "CLAIM NUMBER" style={tagattr='format:text'};
				define LN_NUM /  display "LINE NUMBER" style={tagattr='format:text'};
				define ORIG_MBR_NUM /  display "LEGACY MBR ID" style={tagattr='format:text'};
				define SUBSCRBR_STE_CD / display "SUB STATE CD" style={tagattr='format:text'};
				define MSC_MAJOR_CATEG /  display "MAJOR CATEGORY CODE" style={tagattr='format:text'};
				define MSC_MINOR_CATEG /  display "MINOR CATEGORY CODE" style={tagattr='format:text'};
				define MSC_SUBMINOR_CATEG /  display "SUBMINOR CATEGORY CODE" style={tagattr='format:text'};
				define PARTCPTG_IND /  display "PARTICIPATING INDICATOR" style={tagattr='format:text'};
				define DIAG_CD1 /  display "DIAGNOSIS CODE 1" style={tagattr='format:text'};
				define DIAG_CD2 /  display "DIAGNOSIS CODE 2" style={tagattr='format:text'};
				define DIAG_CD3 /  display "DIAGNOSIS CODE 3" style={tagattr='format:text'};
				define PROC_CD /  display "PROCEDURE CODE" style={tagattr='format:text'};
				define HCFA_SVC_LOC_CD / display "HCFA SVC LOCATION" style={tagattr='format:text'};
				define SVC_DT /  display "SERVICE DATE";
				define DIAGNOSIS_IND /  display "COVID DIAGNOSED INDICATOR" style={tagattr='format:text'};
				define TREATMENT_IND /  display "COVID TREATMENT INDICATOR" style={tagattr='format:text'};
				define TESTING_IND /  display "COVID TESTING INDICATOR" style={tagattr='format:text'};
				define OTC_TESTING_IND /  display "COVID OTC TESTING INDICATOR" style={tagattr='format:text'};
				define VIRTUAL_IND /  display "COVID VIRTUAL INDICATOR" style={tagattr='format:text'};
				define VACCINATED_IND /  display "COVID VACCINATED INDICATOR" style={tagattr='format:text'};
				define PD_DT /  display "PAID DATE";
				define PAY_AMT /  display "PAID AMOUNT" style={tagattr='format:$###,##0.00'};
				/*define CHRG_AMT /  display "CHARGE AMOUNT" style={tagattr='format:$###,##0.00'};
				define DEDUCT_AMT /  display "DEDUCTABLE AMOUNT" style={tagattr='format:$###,##0.00'};
				define COINS_AMT /  display "COINSURANCE AMOUNT" style={tagattr='format:$###,##0.00'};
			  */define COST_SHR_AMT /  display "COST SHARE AMOUNT" style={tagattr='format:$###,##0.00'};
				define PLAN_AMT /  display "PLAN AMOUNT" style={tagattr='format:$###,##0.00'};
				

				/**/
				/*	%let title_style=justify=center bold bcolor=ltgray color=black;*/
				/*	*/
			RUN;

			ODS TAGSETS.EXCELXP CLOSE;
		%END;

	ODS TAGSETS.EXCELXP CLOSE;
	ods listing;

	/*Excel File Test***************************************************************************/
	/*    %put(email_address) = &email_address;*/
	/*	%let secure    = %str(securemessage@cigna.com);*/
	/* 	%let workpath  =  %sysfunc( pathname( work ));*/
	/*X "zip -j /user/hce/&sysuserid./&client_nm._&acct_num._covid19_rpt.zip /user/hce/&sysuserid./&client_nm._&acct_num._covid19_rpt.xls";*/
	data _null_;
		set email.email_address_table;
		where UPCASE(userid) = UPCASE("&userid");
		call symput('email_address',email);
	run;

	filename SENDMAIL email 
		to= "&email_address."
		CC= ("SecureMessage@cigna.com")
		subject= "&client_nm TC 160 COVID-19 Report"                                                                                     
		attach=("/user/hce/&sysuserid./&proj_id._&client_nm._&acct_num._&title_date1. - &title_date2._TC160.xls");
	run;

	DATA _NULL_;
		file SENDMAIL;
		put "Please find the attached TC-160 COVID-19 report for &Client_nm.." /;

		%IF %upcase(&ASO = N) %THEN
			%DO;
				put "This report should be checked to ensure it meets NonASO account requirements and thresholds." /;
			%END;

		put "This report is intended for &intended_use use.";
		put "Attached reports may contain PHI. HIPAA rules apply to any attached reports that contain PHI.";
		put "Use and distribution of this report is limited solely to authorized persons.";
		put "Confidential, unpublished property of Cigna. Do not duplicate or distribute Use and distribution limited solely to authorized personnel Â© Copyright  2020. Cigna." /;
	RUN;

%MEND REPORT_ACCT_LVL;

%REPORT_ACCT_LVL;
